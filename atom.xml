<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>洞香春</title>
  
  <subtitle>洞香春以名士荟萃、谈论国事、交流思想而著称于当时列国 --《大秦帝国》</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wdd.js.org/"/>
  <updated>2018-04-24T12:59:37.000Z</updated>
  <id>https://wdd.js.org/</id>
  
  <author>
    <name>王端端</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>GitUp, 你不可错过的秀外慧中的git工具</title>
    <link href="https://wdd.js.org/gitup-the-git-gui-you-will-like.html"/>
    <id>https://wdd.js.org/gitup-the-git-gui-you-will-like.html</id>
    <published>2018-04-24T10:03:44.000Z</published>
    <updated>2018-04-24T12:59:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>大部分时间，我都是使用git命令行来完成各种git操作。</p><p>然而有时候，想可视化的查看各个分支之间的关系时，还是觉得有个GUI工具比较完美。</p><p>众里寻他千百度，默然回首，她在github上。</p><p><code>GitUp, The Git interface you&#39;ve been missing all your life has finally arrived</code> <a href="http://gitup.co/" target="_blank" rel="noopener">http://gitup.co/</a></p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180424180658_8xeyJO_Screenshot.jpeg" alt=""></p><h1 id="1-功能介绍"><a href="#1-功能介绍" class="headerlink" title="1. 功能介绍"></a>1. 功能介绍</h1><h2 id="1-1-可视化、实时绘图、快速查看"><a href="#1-1-可视化、实时绘图、快速查看" class="headerlink" title="1.1. 可视化、实时绘图、快速查看"></a>1.1. 可视化、实时绘图、快速查看</h2><p><img src="../images/map.gif" alt=""></p><ul><li><code>仓库可视化</code>: GitUp让你清晰明了的看到你的整个分支的迷宫</li><li><code>实时绘图</code>: 你做的任何改变，都会立刻反应到GitUp的图形上，不用刷新，不用等待</li><li><code>快速查看</code>: 高亮选中的commit，并且按空格键会查看到commit的详情</li></ul><h2 id="1-2-远离脏乱、快速撤销、时光穿梭"><a href="#1-2-远离脏乱、快速撤销、时光穿梭" class="headerlink" title="1.2. 远离脏乱、快速撤销、时光穿梭"></a>1.2. 远离脏乱、快速撤销、时光穿梭</h2><p><img src="../images/snapshots.gif" alt=""></p><ul><li><code>远离脏乱</code>: GitUp给你完整的，透明的控制本地仓库的能力，非常方便去取消你不想要的改变</li><li><code>快速撤销</code>: 你只需要按 command + z就可以快速取消</li><li><code>快照穿梭</code>: GitUp的快照功能提供一种时光穿梭的功能，你可以访问任何时间点的文件</li></ul><h2 id="1-3-全功能、快捷键、改变！"><a href="#1-3-全功能、快捷键、改变！" class="headerlink" title="1.3. 全功能、快捷键、改变！"></a>1.3. 全功能、快捷键、改变！</h2><p><img src="../images/editing.gif" alt=""></p><ul><li><code>全功能</code>: Rewrite, split, delete, and re-order commits, fixup and squash, cherry-pick, merge, rebase全都有, 而且非常快</li><li><code>快捷键</code>: GitUp提供很多的快捷键</li><li><code>放弃原来的方法吧</code>: 你只需要专心写代码，剩下的事情都交给GitUp来处理吧</li></ul><h2 id="1-4-速度非常快"><a href="#1-4-速度非常快" class="headerlink" title="1.4. 速度非常快"></a>1.4. 速度非常快</h2><p><img src="http://p3alsaatj.bkt.clouddn.com/20180424203917_Wl9aRw_Screenshot.jpeg" alt=""></p><ul><li><code>速度非常快</code>: GitUp 加载和渲染超40000个commit的git仓库，只需要1秒之内。GitUp之所以这么快的原因是，GitUp绕过git的接口，直接与git本地数据库交互。所以，有些时候，GitUp要比git的原生命令要快的多。</li></ul><h2 id="1-5-实时搜索"><a href="#1-5-实时搜索" class="headerlink" title="1.5. 实时搜索"></a>1.5. 实时搜索</h2><p><img src="http://p3alsaatj.bkt.clouddn.com/20180424204319_6aEPUe_Screenshot.jpeg" alt=""></p><ul><li><code>实时搜索</code>: 你可以按照分支，tag, commmit消息，作者，甚至diff的内容进行搜索，GitUp会马上把结果提供给你。</li></ul><h2 id="1-6-命令行工具"><a href="#1-6-命令行工具" class="headerlink" title="1.6. 命令行工具"></a>1.6. 命令行工具</h2><p>GitUp也提供命令行工具，可以在命令行中打开GitUp图形界面。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">➜  gitup <span class="keyword">help</span></span><br><span class="line"><span class="keyword">Usage</span>: gitup [command]</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line"></span><br><span class="line"><span class="keyword">help</span></span><br><span class="line">  <span class="keyword">Show</span> this help.</span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> (<span class="keyword">default</span>)</span><br><span class="line">  <span class="keyword">Open</span> the <span class="keyword">current</span> Git repository <span class="keyword">in</span> GitUp.</span><br><span class="line"></span><br><span class="line"><span class="keyword">map</span></span><br><span class="line">  <span class="keyword">Open</span> the <span class="keyword">current</span> Git repository <span class="keyword">in</span> GitUp <span class="keyword">in</span> <span class="keyword">Map</span> view.</span><br><span class="line"></span><br><span class="line"><span class="keyword">commit</span></span><br><span class="line">  <span class="keyword">Open</span> the <span class="keyword">current</span> Git repository <span class="keyword">in</span> GitUp <span class="keyword">in</span> <span class="keyword">Commit</span> view.</span><br><span class="line"></span><br><span class="line">stash</span><br><span class="line">  <span class="keyword">Open</span> the <span class="keyword">current</span> Git repository <span class="keyword">in</span> GitUp <span class="keyword">in</span> Stashes view.</span><br></pre></td></tr></table></figure><h1 id="2-好消息与坏消息"><a href="#2-好消息与坏消息" class="headerlink" title="2. 好消息与坏消息"></a>2. 好消息与坏消息</h1><ul><li>好消息: GitUp免费开源</li><li>坏消息: GitUp仅支持macOS平台</li></ul><h1 id="3-别被GitUp忽悠了"><a href="#3-别被GitUp忽悠了" class="headerlink" title="3. 别被GitUp忽悠了"></a>3. 别被GitUp忽悠了</h1><p>事实上，无论Git相关的gui工具牛吹得有多大，git的常用命令，也是非常建议你学会使用的。</p><p>作为一个程序员，一个讲究效率的程序员，命令行才是最好的工具。不要因为一点点难学，就放弃学习。</p><p>就像玛丽莲梦露所说的：<code>你无法接受我差的一面，就不配拥有我最好的一面</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;大部分时间，我都是使用git命令行来完成各种git操作。&lt;/p&gt;
&lt;p&gt;然而有时候，想可视化的查看各个分支之间的关系时，还是觉得有个GUI工具比较完美。&lt;/p&gt;
&lt;p&gt;众里寻他千百度，默然回首，她在github上。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;GitUp, The Git i
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>当我们谈论工作经验时，我们在谈论什么</title>
    <link href="https://wdd.js.org/what-is-work-experience.html"/>
    <id>https://wdd.js.org/what-is-work-experience.html</id>
    <published>2018-04-19T10:53:54.000Z</published>
    <updated>2018-04-22T12:19:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何衡量工作经验"><a href="#如何衡量工作经验" class="headerlink" title="如何衡量工作经验"></a>如何衡量工作经验</h1><p>衡量工作经验的并不是一个数字, 比如说你工作<code>2</code>年了，他工作<code>4</code>年了。4的确是大于2的，但是这又能说明什么呢？我们需要的干货！硬货！而不是一个数字。</p><p>那么，什么是<code>干货</code>, <code>硬货</code></p><ul><li>个人技术博客</li><li>技术文章</li><li>github项目</li><li>个人项目star数量</li><li>个人微信公众号的粉丝数量</li><li>一些解决问题的方法</li><li>向开源项目提交bug或者PR</li></ul><p>这些东西才是HR真正想要看的东西，这些东西可以算作是资产。即使是你换工作了，这些资产都会始终跟着你自己。</p><p>所谓工作经验，就是那些<code>可以直接证明你的价值的东西</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;如何衡量工作经验&quot;&gt;&lt;a href=&quot;#如何衡量工作经验&quot; class=&quot;headerlink&quot; title=&quot;如何衡量工作经验&quot;&gt;&lt;/a&gt;如何衡量工作经验&lt;/h1&gt;&lt;p&gt;衡量工作经验的并不是一个数字, 比如说你工作&lt;code&gt;2&lt;/code&gt;年了，他工作&lt;cod
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Express静态文件浏览器缓存设置与缓存清除</title>
    <link href="https://wdd.js.org/express-static-file-cache-setting-and-cleaning.html"/>
    <id>https://wdd.js.org/express-static-file-cache-setting-and-cleaning.html</id>
    <published>2018-04-08T01:00:48.000Z</published>
    <updated>2018-04-08T01:28:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Express设置缓存"><a href="#1-Express设置缓存" class="headerlink" title="1. Express设置缓存"></a>1. Express设置缓存</h1><p>Express设置静态文件的方法很简单，一行代码搞定。<code>app.use(express.static(path.join(__dirname, &#39;public&#39;), {maxAge: MAX_AGE}))</code>,<br>注意MAX_AGE的单位是毫秒。这句代码的含义是让pulic目录下的所有文件都可以在浏览器中缓存，过期时长为MAX_AGE毫秒。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(express.<span class="keyword">static</span>(path.join(__dirname, <span class="string">'public'</span>), &#123;maxAge: <span class="built_in">config</span>.<span class="built_in">get</span>(<span class="string">'maxAge'</span>)&#125;))</span><br></pre></td></tr></table></figure><h1 id="2-Express让浏览器清除缓存"><a href="#2-Express让浏览器清除缓存" class="headerlink" title="2. Express让浏览器清除缓存"></a>2. Express让浏览器清除缓存</h1><p>缓存的好处是可以更快的访问服务，但是缓存也有坏处。例如设置缓存为10天，第二天的时候服务更新了。如果客户端不强制刷新页面的话，浏览器会一致使用更新前的静态文件，这样会导致一些BUG。你总当每次出问题时，客户打电话给你后，你让他强制刷新浏览器吧？</p><p>所以，最好在服务重启后，重新让浏览器获取最新的静态文件。</p><p>设置的方式是给每一个静态文件设置一个时间戳。</p><p>例如：<code>vendor/loadjs/load.js?_=123898923423&quot;&gt;&lt;/script&gt;</code></p><h2 id="2-1-Express-路由"><a href="#2-1-Express-路由" class="headerlink" title="2.1. Express 路由"></a>2.1. Express 路由</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// /routes/<span class="built_in">index</span>.js</span><br><span class="line">router.<span class="built_in">get</span>(<span class="string">'/home'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(req, res, next)</span> &#123;</span></span><br><span class="line">  <span class="keyword">res</span>.render(<span class="string">'home'</span>, &#123;confi<span class="variable">g:</span> config, serverStartTimestamp: <span class="keyword">new</span> Date().getTime()&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="2-2-视图文件"><a href="#2-2-视图文件" class="headerlink" title="2.2. 视图文件"></a>2.2. 视图文件</h2><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">// views/home.html</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"vendor/loadjs/load.js?_=&lt;%=</span></span></span><span class="ruby"> serverStartTimestamp </span><span class="xml"><span class="tag"><span class="string">%&gt;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>设置之后，每次服务更新或者重启，浏览器都会使用最新的时间戳serverStartTimestamp，去获取静态文件。</p><h2 id="2-3-动态加载JS文件"><a href="#2-3-动态加载JS文件" class="headerlink" title="2.3. 动态加载JS文件"></a>2.3. 动态加载JS文件</h2><p>有时候js文件并不是直接在HTML中引入，可能是使用了一些js文件加载库，例如requirejs, LABjs等。这些情况下，可以在全局设置环境变量SERVER_START_TIMESTAMP，用来表示服务启动的时间戳，在获取js的时候，将该时间戳拼接在路径上。</p><p>注意：<code>环境变量SERVER_START_TIMESTAMP，一定要在其他脚本使用前定义。</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// views/home.html</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> SERVER_START_TIMESTAMP = <span class="xml"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">serverStartTimestamp</span> %&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// load.js</span></span><br><span class="line"><span class="string">'vendor/contact-center/skill.js?_='</span> + SERVER_START_TIMESTAMP</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-Express设置缓存&quot;&gt;&lt;a href=&quot;#1-Express设置缓存&quot; class=&quot;headerlink&quot; title=&quot;1. Express设置缓存&quot;&gt;&lt;/a&gt;1. Express设置缓存&lt;/h1&gt;&lt;p&gt;Express设置静态文件的方法很简单，一行代码
      
    
    </summary>
    
    
      <category term="Express" scheme="https://wdd.js.org/tags/Express/"/>
    
      <category term="静态文件" scheme="https://wdd.js.org/tags/%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6/"/>
    
      <category term="浏览器缓存" scheme="https://wdd.js.org/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>绝对不要容忍拼写错误</title>
    <link href="https://wdd.js.org/do-not-tolerate-spelling-mistake.html"/>
    <id>https://wdd.js.org/do-not-tolerate-spelling-mistake.html</id>
    <published>2018-04-03T08:37:40.000Z</published>
    <updated>2018-04-03T13:01:20.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>最难找又最好找的bug是拼写错误。</code>如果你意识到问题的原因可能是拼写错误，那么检查起来是很容易的。否则，则可能花费几天事件去找问题的原因。</p><p>你要相信计算机，计算机告诉你的问题，99%一定是开发者自身的问题，而不是计算机的问题。</p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180403205759_9VJNcG_.jpeg" alt=""></p><p>找bug其实是一个很有意思的事情，有点像躲猫猫，计算机告诉你一些表象原因。有些时候，你可以从这些表象原因中立马发现问题所在，有时候又会让你抓耳挠腮，废寝忘食，辗转反侧，求之不得。</p><p>越难解决的问题，解决过后，幸福感和快乐感也随之增加。</p><blockquote><p>初极狭，才通人。复行数十步，豁然开朗。土地平旷，屋舍俨然，有良田美池桑竹之属。阡陌交通，鸡犬相闻。其中往来种作，男女衣着，悉如外人。黄发垂髫，并怡然自乐。– 《桃花源记》</p></blockquote><p><img src="http://p3alsaatj.bkt.clouddn.com/20180403205900_TGZuPo_.jpeg" alt=""></p><h1 id="1-为什么会产生拼写错误？"><a href="#1-为什么会产生拼写错误？" class="headerlink" title="1. 为什么会产生拼写错误？"></a>1. 为什么会产生拼写错误？</h1><ul><li>马虎</li><li>懒</li></ul><h1 id="2-拼写错误可能引起哪些问题？"><a href="#2-拼写错误可能引起哪些问题？" class="headerlink" title="2. 拼写错误可能引起哪些问题？"></a>2. 拼写错误可能引起哪些问题？</h1><ul><li>无法引用到变量，报一些引用的错误</li><li>HTTP 404, 如果路径拼写错误，那么是会导致请求404的</li></ul><h1 id="3-拼写错误的长远影响？"><a href="#3-拼写错误的长远影响？" class="headerlink" title="3. 拼写错误的长远影响？"></a>3. 拼写错误的长远影响？</h1><ul><li>有个成语叫<code>遗臭万年</code></li></ul><h1 id="4-如何减少拼写错误？"><a href="#4-如何减少拼写错误？" class="headerlink" title="4. 如何减少拼写错误？"></a>4. 如何减少拼写错误？</h1><ul><li>查字典 有道字典</li><li>代码拼写检查工具： 如vscode上的拼写检查插件<a href="https://github.com/Jason-Rev/vscode-spell-checker" target="_blank" rel="noopener">vscode-spell-checker</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;最难找又最好找的bug是拼写错误。&lt;/code&gt;如果你意识到问题的原因可能是拼写错误，那么检查起来是很容易的。否则，则可能花费几天事件去找问题的原因。&lt;/p&gt;
&lt;p&gt;你要相信计算机，计算机告诉你的问题，99%一定是开发者自身的问题，而不是计算机的问题。&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Small is Powerful Vue mixins</title>
    <link href="https://wdd.js.org/small-is-powerful-vue-mixins.html"/>
    <id>https://wdd.js.org/small-is-powerful-vue-mixins.html</id>
    <published>2018-03-30T07:33:58.000Z</published>
    <updated>2018-03-30T07:43:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="small-is-beautiful"><a href="#small-is-beautiful" class="headerlink" title="small is beautiful"></a>small is beautiful</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    hello: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'hello'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.hello()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="big-is-ugly"><a href="#big-is-ugly" class="headerlink" title="big is ugly"></a>big is ugly</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    hello: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'hello'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    hello1: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'hello1'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    hello2: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'hello2'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    hello3: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'hello3'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// a lot of function be added, this is ugly</span></span><br><span class="line">    helloN: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'helloN'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  created: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.hello()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="mixins-is-powerful"><a href="#mixins-is-powerful" class="headerlink" title="mixins is powerful"></a>mixins is powerful</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mix  = &#123;</span><br><span class="line">  created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'i am mixins'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    helloX: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'helloX'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  mixins: [mix],</span><br><span class="line">  methods: &#123;</span><br><span class="line">    hello: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'hello'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    hello1: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'hello1'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    hello2: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'hello2'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    hello3: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'hello3'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.hello()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="reading-more"><a href="#reading-more" class="headerlink" title="reading more"></a>reading more</h1><ul><li><a href="https://cn.vuejs.org/v2/guide/mixins.html" target="_blank" rel="noopener">guide-mixins</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;small-is-beautiful&quot;&gt;&lt;a href=&quot;#small-is-beautiful&quot; class=&quot;headerlink&quot; title=&quot;small is beautiful&quot;&gt;&lt;/a&gt;small is beautiful&lt;/h1&gt;&lt;figure c
      
    
    </summary>
    
    
      <category term="Vue" scheme="https://wdd.js.org/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>WebSocket断开原因分析</title>
    <link href="https://wdd.js.org/websocket-close-reasons.html"/>
    <id>https://wdd.js.org/websocket-close-reasons.html</id>
    <published>2018-03-29T12:35:38.000Z</published>
    <updated>2018-03-29T13:18:41.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-把错误打印出来"><a href="#1-把错误打印出来" class="headerlink" title="1. 把错误打印出来"></a>1. 把错误打印出来</h1><p>WebSocket断开的原因有很多，最好在WebSocket断开时，将错误打印出来。</p><p>在线demo地址：<a href="https://wdd.js.org/websocket-demos/">https://wdd.js.org/websocket-demos/</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ws.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'WebSocket发生错误: '</span> + e.code)</span><br><span class="line">  <span class="built_in">console</span>.log(e)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果你想自己玩玩WebSocket, 但是你又不想自己部署一个WebSocket服务器，你可以使用<code>ws = new WebSocket(&#39;wss://echo.websocket.org/&#39;)</code>, 你向echo.websocket.org发送消息，它会回复你同样的消息。</p></blockquote><h1 id="2-重要信息错误状态码"><a href="#2-重要信息错误状态码" class="headerlink" title="2. 重要信息错误状态码"></a>2. 重要信息错误状态码</h1><p>WebSocket断开时，会触发<code>CloseEvent</code>, CloseEvent会在连接关闭时发送给使用 WebSockets 的客户端. 它在 WebSocket 对象的 onclose 事件监听器中使用。CloseEvent的code字段表示了WebSocket断开的原因。可以从该字段中分析断开的原因。</p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180329204553_TjCFdu_Jietu20180329-204536.jpeg" alt=""></p><h1 id="3-关闭状态码表"><a href="#3-关闭状态码表" class="headerlink" title="3. 关闭状态码表"></a>3. 关闭状态码表</h1><p>一般来说<code>1006</code>的错误码出现的情况比较常见，该错误码一般出现在断网时。</p><table><thead><tr><th>状态码</th><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>0–999</td><td></td><td>保留段, 未使用.</td></tr><tr><td>1000</td><td>CLOSE_NORMAL</td><td>正常关闭; 无论为何目的而创建, 该链接都已成功完成任务.</td></tr><tr><td>1001</td><td>CLOSE_GOING_AWAY</td><td>终端离开, 可能因为服务端错误, 也可能因为浏览器正从打开连接的页面跳转离开.</td></tr><tr><td>1002</td><td>CLOSE_PROTOCOL_ERROR</td><td>由于协议错误而中断连接.</td></tr><tr><td>1003</td><td>CLOSE_UNSUPPORTED</td><td>由于接收到不允许的数据类型而断开连接 (如仅接收文本数据的终端接收到了二进制数据).</td></tr><tr><td>1004</td><td></td><td><code>保留</code>. 其意义可能会在未来定义.</td></tr><tr><td>1005</td><td>CLOSE_NO_STATUS</td><td><code>保留</code>.  表示没有收到预期的状态码.</td></tr><tr><td><code>1006</code></td><td>CLOSE_ABNORMAL</td><td><code>保留</code>. 用于期望收到状态码时连接非正常关闭 (也就是说, 没有发送关闭帧).</td></tr><tr><td>1007</td><td>Unsupported Data</td><td>由于收到了格式不符的数据而断开连接 (如文本消息中包含了非 UTF-8 数据).</td></tr><tr><td>1008</td><td>Policy Violation</td><td>由于收到不符合约定的数据而断开连接. 这是一个通用状态码, 用于不适合使用 1003 和 1009 状态码的场景.</td></tr><tr><td>1009</td><td>CLOSE_TOO_LARGE</td><td>由于收到过大的数据帧而断开连接.</td></tr><tr><td>1010</td><td>Missing Extension</td><td>客户端期望服务器商定一个或多个拓展, 但服务器没有处理, 因此客户端断开连接.</td></tr><tr><td>1011</td><td>Internal Error</td><td>客户端由于遇到没有预料的情况阻止其完成请求, 因此服务端断开连接.</td></tr><tr><td>1012</td><td>Service Restart</td><td>服务器由于重启而断开连接. </td></tr><tr><td>1013</td><td>Try Again Later</td><td>服务器由于临时原因断开连接, 如服务器过载因此断开一部分客户端连接. </td></tr><tr><td>1014</td><td></td><td>由 WebSocket标准保留以便未来使用.</td></tr><tr><td>1015</td><td>TLS Handshake</td><td>保留. 表示连接由于无法完成 TLS 握手而关闭 (例如无法验证服务器证书).</td></tr><tr><td>1016–1999</td><td></td><td>由 WebSocket标准保留以便未来使用.</td></tr><tr><td>2000–2999</td><td></td><td>由 WebSocket拓展保留使用.</td></tr><tr><td>3000–3999</td><td></td><td>可以由库或框架使用.? 不应由应用使用. 可以在 IANA 注册, 先到先得.</td></tr><tr><td>4000–4999</td><td></td><td>可以由应用使用.</td></tr></tbody></table><h1 id="4-其他注意事项"><a href="#4-其他注意事项" class="headerlink" title="4. 其他注意事项"></a>4. 其他注意事项</h1><p>如果你的服务所在的域是HTTPS的，那么使用的WebSocket协议也必须是<code>wss</code>, 而不能是<code>ws</code></p><h1 id="5-如何在老IE上使用原生WebSocket？"><a href="#5-如何在老IE上使用原生WebSocket？" class="headerlink" title="5. 如何在老IE上使用原生WebSocket？"></a>5. 如何在老IE上使用原生WebSocket？</h1><p><a href="https://github.com/gimite/web-socket-js" target="_blank" rel="noopener">web-socket-js</a>是基于flash的技术，只需要引入两个js文件和一个swf文件，就可以让浏览器用于几乎原生的WebSocket接口。另外，web-socket-js还是需要在ws服务端843端口做一个flash安全策略文件的服务。</p><p>我自己曾经基于stompjs和web-socket-js，做WebSocket兼容到IE5, 当然了stompjs在低版本的IE上有兼容性问题, 而且stompjs已经不再维护了，你可以使用我fork的一个版本，地址是：<a href="https://github.com/wangduanduan/stomp-websocket/blob/master/lib/stomp.js" target="_blank" rel="noopener">https://github.com/wangduanduan/stomp-websocket/blob/master/lib/stomp.js</a></p><p>主要是老版本IE在正则表达式行为方面有点异常。</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// fix ie8, ie9, RegExp not normal problem</span></span><br><span class="line"><span class="comment">// in chrome the frames length will be 2, but in ie8, ie9, it well be 1</span></span><br><span class="line"><span class="comment">// by wdd 20180321</span></span><br><span class="line"><span class="keyword">if</span> <span class="comment">(frames.length === 1)</span> &#123;</span><br><span class="line">  frames.push<span class="comment">('')</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-参考"><a href="#6-参考" class="headerlink" title="6. 参考"></a>6. 参考</h1><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CloseEvent" target="_blank" rel="noopener">CloseEvent</a></li><li><a href="https://stackoverflow.com/questions/19304157/getting-the-reason-why-websockets-closed-with-close-code-1006" target="_blank" rel="noopener">getting the reason why websockets closed with close code 1006</a></li><li><a href="https://tools.ietf.org/html/rfc6455#section-7.4.1" target="_blank" rel="noopener">Defined Status Codes</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-把错误打印出来&quot;&gt;&lt;a href=&quot;#1-把错误打印出来&quot; class=&quot;headerlink&quot; title=&quot;1. 把错误打印出来&quot;&gt;&lt;/a&gt;1. 把错误打印出来&lt;/h1&gt;&lt;p&gt;WebSocket断开的原因有很多，最好在WebSocket断开时，将错误打印出
      
    
    </summary>
    
    
      <category term="WebSocket" scheme="https://wdd.js.org/tags/WebSocket/"/>
    
  </entry>
  
  <entry>
    <title>拜领域内最顶尖人物为师</title>
    <link href="https://wdd.js.org/learn-from-the-top-master.html"/>
    <id>https://wdd.js.org/learn-from-the-top-master.html</id>
    <published>2018-03-28T00:44:06.000Z</published>
    <updated>2018-03-28T01:08:46.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p3alsaatj.bkt.clouddn.com/20180328085107_sqWkoq_110S46131-0.jpeg" alt=""></p><p>我很讨厌teacher, 我几乎所有做的噩梦都和上课，考试，老师有关。但是我渴望master, 特别是行业顶尖的master。我渴望从master哪里获取知识，但是master们往往都是很忙的，哪有时间教你。但是作为master, 几乎每个人都有基本领域公认的巨著。</p><p>例如学经济学，亚当斯密的国富论是必读的书；学心理学，弗洛伊德的《梦的解析》，古斯塔夫•勒庞的《乌合之众》也是必读的书。学前端，泽卡斯的《JavaScript高级程序设计》，弗兰纳根的《JavaScript权威指南》，这两本书如果你没读过，那么你几乎是一个不合格的前端。</p><p>但是，作为一个普通人，你无法接触到真的的大师，那么就把他们的巨著当做大师，从读书中汲取大师的知识，这未尝不是一件有意义的事情。</p><h1 id="读书真的那么难吗？-如何坚持下去？"><a href="#读书真的那么难吗？-如何坚持下去？" class="headerlink" title="读书真的那么难吗？ 如何坚持下去？"></a>读书真的那么难吗？ 如何坚持下去？</h1><h1 id="读哪些书？如何挑选"><a href="#读哪些书？如何挑选" class="headerlink" title="读哪些书？如何挑选"></a>读哪些书？如何挑选</h1><p><code>挑书实际上是挑人，你</code></p><h1 id="理论知识的重要性"><a href="#理论知识的重要性" class="headerlink" title="理论知识的重要性"></a>理论知识的重要性</h1><h1 id="书评与积累"><a href="#书评与积累" class="headerlink" title="书评与积累"></a>书评与积累</h1><h1 id="只取一瓢"><a href="#只取一瓢" class="headerlink" title="只取一瓢"></a>只取一瓢</h1><h1 id="不求甚解"><a href="#不求甚解" class="headerlink" title="不求甚解"></a>不求甚解</h1><h1 id="速读"><a href="#速读" class="headerlink" title="速读"></a>速读</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://p3alsaatj.bkt.clouddn.com/20180328085107_sqWkoq_110S46131-0.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;我很讨厌teacher, 我几乎所有做的噩梦都和上课，考试，老师有关。但是我渴
      
    
    </summary>
    
    
      <category term="读书" scheme="https://wdd.js.org/tags/%E8%AF%BB%E4%B9%A6/"/>
    
      <category term="未完成" scheme="https://wdd.js.org/tags/%E6%9C%AA%E5%AE%8C%E6%88%90/"/>
    
  </entry>
  
  <entry>
    <title>js中的真值和假值</title>
    <link href="https://wdd.js.org/js-true-and-false-value.html"/>
    <id>https://wdd.js.org/js-true-and-false-value.html</id>
    <published>2018-03-27T06:31:01.000Z</published>
    <updated>2018-03-27T06:45:18.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>无论什么语言，都需要逻辑，而逻辑中，能否判断出真假，是最基本也是最重要技能之一</code>。</p><h1 id="JS中的假值有6个"><a href="#JS中的假值有6个" class="headerlink" title="JS中的假值有6个"></a>JS中的假值有6个</h1><ol><li>false</li><li>‘’</li><li>undefinded</li><li>null</li><li>0, +0, -0</li><li>NaN</li></ol><h1 id="有点类似假值的真值有两个"><a href="#有点类似假值的真值有两个" class="headerlink" title="有点类似假值的真值有两个"></a>有点类似假值的真值有两个</h1><ol><li>{}</li><li>[]</li></ol><p>空对象和空数组，很多初学者都很用把这两个当做假值。但是实际上他们是真值，你只需要记住，除了null之外的所有对象类型的数据，都是真值。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span> <span class="comment">// 'object'</span></span><br></pre></td></tr></table></figure><p>据说：<code>typeof null返回对象这是一个js语言中的bug。</code>实际上typeof null应该返回null才比较准确，但是这个bug已经存来好久了。几乎所有的代码里都这样去判断。如果把typeof null给改成返回null, 那么这必定会导致JS世界末日。</p><p>我们承认<code>JS并不完美</code>，她有很多小缺点，但是这并不妨碍她吸引万千开发者拜倒在她的石榴裙下。</p><p>就像一首歌唱的：<code>有些人说不清哪里好 但就是谁都替代不了</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;无论什么语言，都需要逻辑，而逻辑中，能否判断出真假，是最基本也是最重要技能之一&lt;/code&gt;。&lt;/p&gt;
&lt;h1 id=&quot;JS中的假值有6个&quot;&gt;&lt;a href=&quot;#JS中的假值有6个&quot; class=&quot;headerlink&quot; title=&quot;JS中的假值有6个&quot;&gt;&lt;/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端之路 树根 树干 树叶</title>
    <link href="https://wdd.js.org/frontend-tree-root-trunk-leaf.html"/>
    <id>https://wdd.js.org/frontend-tree-root-trunk-leaf.html</id>
    <published>2018-03-26T10:09:44.000Z</published>
    <updated>2018-03-26T10:11:51.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="树根-向下扎实基本功"><a href="#树根-向下扎实基本功" class="headerlink" title="树根 向下扎实基本功"></a>树根 向下扎实基本功</h1><h1 id="树干-积累让身躯更坚实"><a href="#树干-积累让身躯更坚实" class="headerlink" title="树干 积累让身躯更坚实"></a>树干 积累让身躯更坚实</h1><h1 id="树叶-随风而去的好奇心"><a href="#树叶-随风而去的好奇心" class="headerlink" title="树叶 随风而去的好奇心"></a>树叶 随风而去的好奇心</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;树根-向下扎实基本功&quot;&gt;&lt;a href=&quot;#树根-向下扎实基本功&quot; class=&quot;headerlink&quot; title=&quot;树根 向下扎实基本功&quot;&gt;&lt;/a&gt;树根 向下扎实基本功&lt;/h1&gt;&lt;h1 id=&quot;树干-积累让身躯更坚实&quot;&gt;&lt;a href=&quot;#树干-积累让身躯更坚
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>一切皆有可能 IE5 支持WebSocket stompjs</title>
    <link href="https://wdd.js.org/everything-is-possible-ie5-support-websocket.html"/>
    <id>https://wdd.js.org/everything-is-possible-ie5-support-websocket.html</id>
    <published>2018-03-23T10:54:53.000Z</published>
    <updated>2018-03-24T09:29:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="web-socket-js让IE5支持WebSocket"><a href="#web-socket-js让IE5支持WebSocket" class="headerlink" title="web-socket-js让IE5支持WebSocket"></a>web-socket-js让IE5支持WebSocket</h1><p><a href="https://github.com/gimite/web-socket-js" target="_blank" rel="noopener">web-socket-js</a>基于flash技术, 让浏览器可以拥有类似原生的WebSocket的体验。只需要在服务端做少许的改动</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;web-socket-js让IE5支持WebSocket&quot;&gt;&lt;a href=&quot;#web-socket-js让IE5支持WebSocket&quot; class=&quot;headerlink&quot; title=&quot;web-socket-js让IE5支持WebSocket&quot;&gt;&lt;/a&gt;we
      
    
    </summary>
    
    
      <category term="未完成" scheme="https://wdd.js.org/tags/%E6%9C%AA%E5%AE%8C%E6%88%90/"/>
    
      <category term="ie5" scheme="https://wdd.js.org/tags/ie5/"/>
    
      <category term="websocket" scheme="https://wdd.js.org/tags/websocket/"/>
    
      <category term="stompjs" scheme="https://wdd.js.org/tags/stompjs/"/>
    
  </entry>
  
  <entry>
    <title>需求文档写作规范</title>
    <link href="https://wdd.js.org/demand-docs-guideline-draft.html"/>
    <id>https://wdd.js.org/demand-docs-guideline-draft.html</id>
    <published>2018-03-22T06:31:49.000Z</published>
    <updated>2018-03-23T01:44:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-项目创建"><a href="#1-项目创建" class="headerlink" title="1. 项目创建"></a>1. 项目创建</h1><p>一般情况，一个服务要有一个需求文档的git项目。即需要在<a href="http://192.168.60.11:30000/groups/docs" target="_blank" rel="noopener">gitlab docs 组织下建立与之对应的项目仓库</a></p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180323090328_PZuu7W_Jietu20180323-090307.jpeg" alt=""></p><p>例如创建一个需求文档的项目。</p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180323092522_uW8yBy_Jietu20180323-092513.jpeg" alt=""></p><h1 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h1><h1 id="2-版本管理"><a href="#2-版本管理" class="headerlink" title="2. 版本管理"></a>2. 版本管理</h1><p><code>需求文档基于git分支进行版本管理。</code></p><p>默认情况下，创建一个git项目都会有一个master分支。我们并不在master分支上写任何需求。</p><p>我们根据项目的版本来创建分支。例如我们先创建一个v1.0.0的分支，我们在该分支上写需求文档。当v1.0.0版本发布后，我们基于v1.0.1分支。 而且我们能够自由的切换分支。</p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180323092753_al0zTZ_Jietu20180323-092744.jpeg" alt=""></p><h1 id="3-需求状态"><a href="#3-需求状态" class="headerlink" title="3. 需求状态"></a>3. 需求状态</h1><p>需求有以下几种状态，</p><ul><li>开始(draft), 草稿阶段</li><li>需求稳定(stable), 需求标记为stable, 开发才着手开始开发</li><li>需求修改(modified), 需求处于修改状态，则开发暂停</li><li>开发(dev), 开始开发</li><li>测试(test), 开始测试</li><li>发布(released), 测试通过，开始发布</li></ul><p><img src="http://p3alsaatj.bkt.clouddn.com/20180323094409_akabhc_Jietu20180323-094357.jpeg" alt=""></p><h1 id="4-格式要求"><a href="#4-格式要求" class="headerlink" title="4. 格式要求"></a>4. 格式要求</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-项目创建&quot;&gt;&lt;a href=&quot;#1-项目创建&quot; class=&quot;headerlink&quot; title=&quot;1. 项目创建&quot;&gt;&lt;/a&gt;1. 项目创建&lt;/h1&gt;&lt;p&gt;一般情况，一个服务要有一个需求文档的git项目。即需要在&lt;a href=&quot;http://192.168.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>在实践中我遇到stompjs, websocket和nginx的问题与总结</title>
    <link href="https://wdd.js.org/stomp-over-websocket.html"/>
    <id>https://wdd.js.org/stomp-over-websocket.html</id>
    <published>2018-03-20T14:09:34.000Z</published>
    <updated>2018-03-22T01:39:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-AWS-EC2-不支持WebSocket"><a href="#1-AWS-EC2-不支持WebSocket" class="headerlink" title="1. AWS EC2 不支持WebSocket"></a>1. AWS EC2 不支持WebSocket</h1><p><a href="https://www.menubar.io/websockets-aws-elasticbeanstalk-ec2/" target="_blank" rel="noopener">直达解决方案 英文版</a></p><p>简单说一下思路：WebSocket底层基于TCP协议的，如果你的服务器基于HTTP协议暴露80端口，那WebSocket肯定无法连接。<code>你只要将HTTP协议修改成TCP协议就可以了。</code></p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180320223231_T2gHyb_Screenshot.jpeg" alt=""></p><p>然后是安全组的配置：</p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180320223255_pGGCWF_Screenshot.jpeg" alt=""></p><p>同样如果使用了NGINX作为反向代理，那么NGINX也需要做配置的。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://gist.githubusercontent.com/unshift/324be6a8dc9e880d4d670de0dc97a8ce/raw/29507ed6b3c9394ecd7842f9d3228827cffd1c58/elasticbeanstalk_websockets</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">files:</span></span><br><span class="line">    <span class="string">"/etc/nginx/conf.d/01_websockets.conf"</span> :</span><br><span class="line"><span class="symbol">        mode:</span> <span class="string">"000644"</span></span><br><span class="line"><span class="symbol">        owner:</span> root</span><br><span class="line"><span class="symbol">        group:</span> root</span><br><span class="line">        content : |</span><br><span class="line">            upstream <span class="class">nodejs </span>&#123;</span><br><span class="line">                server <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8081</span>;</span><br><span class="line">                keepalive <span class="number">256</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="class">server </span>&#123;</span><br><span class="line">                listen <span class="number">8080</span>;</span><br><span class="line"></span><br><span class="line">                location <span class="class">/ &#123;</span></span><br><span class="line"><span class="class">                    proxy_pass  http:<span class="comment">//nodejs;</span></span></span><br><span class="line"><span class="class">                    proxy_set_header Upgrade $http_upgrade;</span></span><br><span class="line"><span class="class">                    proxy_set_header Connection <span class="string">"upgrade"</span>;</span></span><br><span class="line"><span class="class">                    proxy_http_version <span class="number">1.1</span>;</span></span><br><span class="line"><span class="class">                    proxy_set_header        Host            $host;</span></span><br><span class="line"><span class="class">                    proxy_set_header        X-Real-IP       $remote_addr;</span></span><br><span class="line"><span class="class">                    proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;</span></span><br><span class="line"><span class="class">                &#125;</span></span><br><span class="line"><span class="class">            &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    <span class="string">"/opt/elasticbeanstalk/hooks/appdeploy/enact/41_remove_eb_nginx_confg.sh"</span>:</span></span><br><span class="line"><span class="class"><span class="symbol">        mode:</span> <span class="string">"000755"</span></span></span><br><span class="line"><span class="class"><span class="symbol">        owner:</span> root</span></span><br><span class="line"><span class="class"><span class="symbol">        group:</span> root</span></span><br><span class="line"><span class="class">        content : |</span></span><br><span class="line"><span class="class">            mv <span class="meta-keyword">/etc/</span>nginx/conf.d/<span class="number">00</span>_elastic_beanstalk_proxy.conf <span class="meta-keyword">/etc/</span>nginx/conf.d/<span class="number">00</span>_elastic_beanstalk_proxy.conf.old</span></span><br></pre></td></tr></table></figure><h1 id="2-NGINX做反向代理是需要注意的问题"><a href="#2-NGINX做反向代理是需要注意的问题" class="headerlink" title="2. NGINX做反向代理是需要注意的问题"></a>2. NGINX做反向代理是需要注意的问题</h1><p>如果排除所有问题后，那剩下的问题可以考虑出在反向代理上，一下有几点是可以考虑的。</p><ul><li><p>HTTP的版本问题: http有三个版本，http 1.0, 1.1, 2.0, 现在主流的浏览器都是使用http 1.1版本，为了保证更好的兼容性，最好转发时不要修改协议的版本号</p></li><li><p>NGINX具有路径重写功能，如果你使用了该功能，就要考虑问题可能出在这里，因为NGINX在路径重写时，需要对路径进行编解码，有可能在解码之后，没有编码就发送给后端的服务器，导致后端服务器无法对URL进行解码。</p></li></ul><h1 id="3-IE8-IE9-有没有简单方便支持WebSocket的方案"><a href="#3-IE8-IE9-有没有简单方便支持WebSocket的方案" class="headerlink" title="3. IE8 IE9 有没有简单方便支持WebSocket的方案"></a>3. IE8 IE9 有没有简单方便支持WebSocket的方案</h1><p>目前测试下来，最简单方案是基于flash的。参考：<a href="https://github.com/gimite/web-socket-js" target="_blank" rel="noopener">https://github.com/gimite/web-socket-js</a>, </p><p>注意该方案需要在WebSocket服务上的843端口, 提供<a href="https://www.adobe.com/devnet/flashplayer/articles/socket_policy_files.html" target="_blank" rel="noopener">socket_policy_files</a>, 也可以参考：<a href="http://old.briangonzalez.org/posts/websockets-polyfill" target="_blank" rel="noopener">A PolyFill for WebSockets</a></p><p>网上也有教程是使用socket.io基于ajax长轮训的方案，如果服务端已经确定的情况下，一般是不会轻易改动服务端代码的。而且ajax长轮训也是有延迟，和disconnect时，无法回调的问题。</p><h1 id="4-stompjs-connected后，没有调用connect-callBack"><a href="#4-stompjs-connected后，没有调用connect-callBack" class="headerlink" title="4. stompjs connected后，没有调用connect_callBack"></a>4. stompjs connected后，没有调用connect_callBack</h1><p>该问题主要是使用web-socket-js，在ie8,ie9上出现的</p><p>该问题还没有分析出原因，但是看了stompjs的源码不是太多，明天用源码调试看看原因。</p><p>问题已经找到，请参考：<a href="https://github.com/wangduanduan/stomp-websocket#about-ie8-ie9-use-websocket" target="_blank" rel="noopener">https://github.com/wangduanduan/stomp-websocket#about-ie8-ie9-use-websocket</a></p><h1 id="5-参考文献"><a href="#5-参考文献" class="headerlink" title="5. 参考文献"></a>5. 参考文献</h1><ul><li><a href="http://jmesnil.net/stomp-websocket/doc/" target="_blank" rel="noopener">STOMP Over WebSocket</a></li><li><a href="http://stomp.github.io/stomp-specification-1.1.html" target="_blank" rel="noopener">STOMP Protocol Specification, Version 1.1</a></li><li><a href="https://segmentfault.com/a/1190000006617344" target="_blank" rel="noopener">Stomp Over Websocket文档</a>, </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-AWS-EC2-不支持WebSocket&quot;&gt;&lt;a href=&quot;#1-AWS-EC2-不支持WebSocket&quot; class=&quot;headerlink&quot; title=&quot;1. AWS EC2 不支持WebSocket&quot;&gt;&lt;/a&gt;1. AWS EC2 不支持WebSo
      
    
    </summary>
    
    
      <category term="websocket" scheme="https://wdd.js.org/tags/websocket/"/>
    
      <category term="stompjs" scheme="https://wdd.js.org/tags/stompjs/"/>
    
  </entry>
  
  <entry>
    <title>笔记 编写可读性代码的艺术</title>
    <link href="https://wdd.js.org/art-of-readable-code.html"/>
    <id>https://wdd.js.org/art-of-readable-code.html</id>
    <published>2018-03-15T10:21:50.000Z</published>
    <updated>2018-03-15T10:27:53.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p3alsaatj.bkt.clouddn.com/20180315182640_4hEdE7_.jpeg" alt=""></p><h1 id="1-代码应当易于理解"><a href="#1-代码应当易于理解" class="headerlink" title="1. 代码应当易于理解"></a>1. 代码应当易于理解</h1><ul><li>唯一标准：<code>让别人理解的时间最小</code></li></ul><h1 id="2-把信息装到名字里"><a href="#2-把信息装到名字里" class="headerlink" title="2. 把信息装到名字里"></a>2. 把信息装到名字里</h1><ul><li>选择专业的词</li><li>避免泛泛的名字</li><li>使用具体的名字代替抽象的名字</li><li>为名字携带更多的信息</li><li>名字的作用域越大，最好名字越长</li><li>丢掉没用的词</li></ul><table><thead><tr><th>单词</th><th>更多选择</th></tr></thead><tbody><tr><td>send</td><td>deliver, dispatch, announce, distribute,route</td></tr><tr><td>find</td><td>search, extract, locate, recover</td></tr><tr><td>start</td><td>launch, create, begin, open</td></tr><tr><td>make</td><td>create, set up, build, generate, compose, add ,new </td></tr></tbody></table><h1 id="3-审美"><a href="#3-审美" class="headerlink" title="3. 审美"></a>3. 审美</h1><p>我之前学设计的时候看过一本书，<a href="https://book.douban.com/subject/3323633/" target="_blank" rel="noopener">写给大家看的设计书（第3版）</a>将这本书中的设计审美原理应用到写代码上，真实十分贴切，如果你读过此书，你的审美能力会大幅提高。</p><ul><li>对齐</li><li>重复</li><li>对比</li><li>亲密性 按照亲密关系分段</li><li>顺序</li></ul><p><img src="http://p3alsaatj.bkt.clouddn.com/20180315182604_54Imyu_.jpeg" alt=""></p><h1 id="4-写什么样的注释"><a href="#4-写什么样的注释" class="headerlink" title="4. 写什么样的注释"></a>4. 写什么样的注释</h1><ul><li>不要写一眼就能看懂的注释，类似于此地无银三百两</li><li>与其写注释，不如把变量名函数名写好，可以从名字中理解</li><li>记录你的思想</li><li>加入评论</li><li>指出哪里有陷阱，需要注意</li><li>言简意赅，不要啰嗦</li><li>不要使用不明确的代词，不要像像算命先生，如何解释都对</li></ul><h1 id="5-可读性控制流"><a href="#5-可读性控制流" class="headerlink" title="5. 可读性控制流"></a>5. 可读性控制流</h1><ul><li><code>追求最小理解时间</code>，而不是最少代码行</li><li>尽可能提前return结果</li><li>少点嵌套，要尽可能扁平化</li><li>理解执行流程。有些是连续执行。有些是随时都可能执行，像事件回调</li><li>避免使用while, 一般我们循环都是为了遍历数组，为什么不用forEach呢？</li></ul><h1 id="6-拆分超长表达式"><a href="#6-拆分超长表达式" class="headerlink" title="6. 拆分超长表达式"></a>6. 拆分超长表达式</h1><ul><li>拆分超长的表达式</li><li>拆分巨大的语句</li><li>尽量把逻辑包裹在函数中，不要重复你自己 DRY</li></ul><h1 id="7-变量与可读性"><a href="#7-变量与可读性" class="headerlink" title="7. 变量与可读性"></a>7. 变量与可读性</h1><ul><li>减少变量，变量越少越好</li><li>减少中间结果，垂直消费</li><li>减少用于控制流的变量</li><li>缩小变量的作用域</li><li>用到变量再定义，不要提前定义，不然还要随时想着，之前定义的变量是用干嘛的呢？</li></ul><h1 id="8-重构"><a href="#8-重构" class="headerlink" title="8. 重构"></a>8. 重构</h1><ul><li>抽取不相关的自子问题</li><li>抽取各种配置性的变量在一起，他们都是配置</li><li>尽量写纯函数</li><li>创建大量通用代码</li><li>打造自己的武器装备库</li><li>简化接口传参</li><li>过犹不及，不要太苛刻</li></ul><h1 id="9-一次只做一件事"><a href="#9-一次只做一件事" class="headerlink" title="9. 一次只做一件事"></a>9. 一次只做一件事</h1><h1 id="10-少写代码"><a href="#10-少写代码" class="headerlink" title="10. 少写代码"></a>10. 少写代码</h1><ul><li><code>最好的代码就是没有代码</code></li><li>别费神实现那个功能，你不会需要的</li><li>质疑和拆分的需求</li><li>保持小代码库</li><li>删除没用的代码</li><li>删除没有的注释</li></ul><h1 id="11-调试"><a href="#11-调试" class="headerlink" title="11. 调试"></a>11. 调试</h1><ul><li>尽可能将错误打印出来，不要隐藏</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://p3alsaatj.bkt.clouddn.com/20180315182640_4hEdE7_.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-代码应当易于理解&quot;&gt;&lt;a href=&quot;#1-代码应当易于理解&quot; class=&quot;head
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>如何高效地报告 Bug</title>
    <link href="https://wdd.js.org/how-to-report-bug-effective.html"/>
    <id>https://wdd.js.org/how-to-report-bug-effective.html</id>
    <published>2018-03-15T08:39:06.000Z</published>
    <updated>2018-03-15T13:32:33.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p3alsaatj.bkt.clouddn.com/20180315213220_Rq8h6q_lady-bug-on-leaf.jpg.653x0_q80_crop-smart.jpeg" alt=""></p><h1 id="1-自问自答"><a href="#1-自问自答" class="headerlink" title="1. 自问自答"></a>1. 自问自答</h1><ul><li>该问题是否是必现的？</li><li>该问题出现多久了？</li><li>问题出现前后有没有什么异常？ 例如几分钟之前启动了其他的服务，有其他服务在更新</li></ul><h1 id="2-要事实，不要推测"><a href="#2-要事实，不要推测" class="headerlink" title="2. 要事实，不要推测"></a>2. 要事实，不要推测</h1><p>在bug报告里，要设法搞清什么是事实（例如：压测环境座席监控没有数据）。什么是推测（例如：我想问题可能出在XXX）。如果愿意的话，<code>您可以省去推测，但是千万别省略事实。</code></p><h1 id="3-要精确，不要模糊"><a href="#3-要精确，不要模糊" class="headerlink" title="3. 要精确，不要模糊"></a>3. 要精确，不要模糊</h1><h2 id="3-1-不要使用代词"><a href="#3-1-不要使用代词" class="headerlink" title="3.1. 不要使用代词"></a>3.1. 不要使用代词</h2><h2 id="3-2-不要使用”没有”"><a href="#3-2-不要使用”没有”" class="headerlink" title="3.2. 不要使用”没有”"></a>3.2. 不要使用”没有”</h2><h1 id="4-要详细，不要粗略"><a href="#4-要详细，不要粗略" class="headerlink" title="4. 要详细，不要粗略"></a>4. 要详细，不要粗略</h1><h1 id="5-建议要提供的数据"><a href="#5-建议要提供的数据" class="headerlink" title="5. 建议要提供的数据"></a>5. 建议要提供的数据</h1><ul><li><code>建议</code> 错误日志, 程序员最喜欢bug里的错误日志，<code>错误日志能说明一切</code>，非常建议你能提供错误日志</li><li><code>必须</code> 操作步骤, 有利于程序员去重现bug</li><li><code>可选</code> 错误截图, 在描述不清楚的时候，错误截图时更好的方法</li></ul><h1 id="6-参考"><a href="#6-参考" class="headerlink" title="6. 参考"></a>6. 参考</h1><ul><li><a href="https://www.chiark.greenend.org.uk/~sgtatham/bugs-cn.html" target="_blank" rel="noopener">如何有效地报告 Bug</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://p3alsaatj.bkt.clouddn.com/20180315213220_Rq8h6q_lady-bug-on-leaf.jpg.653x0_q80_crop-smart.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-自问
      
    
    </summary>
    
    
      <category term="bug" scheme="https://wdd.js.org/tags/bug/"/>
    
  </entry>
  
  <entry>
    <title>状态码为200时 jQuery ajax报错</title>
    <link href="https://wdd.js.org/status-code-200-jquery-ajax-failed.html"/>
    <id>https://wdd.js.org/status-code-200-jquery-ajax-failed.html</id>
    <published>2018-03-15T06:17:59.000Z</published>
    <updated>2018-03-15T06:33:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-问题现象"><a href="#1-问题现象" class="headerlink" title="1. 问题现象"></a>1. 问题现象</h1><p>HTTP 状态码为 200 OK 时， jquery ajax报错</p><h1 id="2-问题原因"><a href="#2-问题原因" class="headerlink" title="2. 问题原因"></a>2. 问题原因</h1><p>jquery ajax的dataType字段包含：json, 但是服务端返回的数据不是规范的json格式，导致jquery解析json字符串报错，最终导致ajax报错。</p><p>jQuery ajax 官方文档上说明：</p><blockquote><p>“json”: Evaluates the response as JSON and returns a JavaScript object. Cross-domain “json” requests are converted to “jsonp” unless the request includes jsonp: false in its request options. The JSON data is parsed in a strict manner; any malformed JSON is rejected and a parse error is thrown. As of jQuery 1.9, an empty response is also rejected; the server should return a response of null or {} instead. (See json.org for more information on proper JSON formatting.)</p></blockquote><p>设置dataType为json时，jquery就会去解析响应体为JavaScript对象。跨域的json请求会被转化成jsonp, 除非设置了<code>jsonp: false</code>。JSON数据会以严格模式去解析，任何不规范的JSON字符串都会解析异常并抛出错误。从jQuery 1.9起，一个空的响应也会被抛出异常。服务端应该返回一个<code>null</code>或者<code>{}</code>去代替空响应。参考<a href="http://json.org/" target="_blank" rel="noopener">json.org</a>, 查看更多内容</p><h1 id="3-解决方案"><a href="#3-解决方案" class="headerlink" title="3. 解决方案"></a>3. 解决方案</h1><p>这个问题的原因是后端返回的数据格式不规范，所以后端在返回结果是，不要使用空的响应，也不应该去手动拼接JSON字符串，而应该交给响应的库来实现JSON序列化字符串工作。</p><h1 id="4-参考"><a href="#4-参考" class="headerlink" title="4. 参考"></a>4. 参考</h1><ul><li><a href="https://stackoverflow.com/questions/6186770/ajax-request-returns-200-ok-but-an-error-event-is-fired-instead-of-success" target="_blank" rel="noopener">Ajax request returns 200 OK, but an error event is fired instead of success</a></li><li><a href="http://api.jquery.com/jQuery.ajax/" target="_blank" rel="noopener">jQuery.ajax</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-问题现象&quot;&gt;&lt;a href=&quot;#1-问题现象&quot; class=&quot;headerlink&quot; title=&quot;1. 问题现象&quot;&gt;&lt;/a&gt;1. 问题现象&lt;/h1&gt;&lt;p&gt;HTTP 状态码为 200 OK 时， jquery ajax报错&lt;/p&gt;
&lt;h1 id=&quot;2-问题原因
      
    
    </summary>
    
    
      <category term="ajax" scheme="https://wdd.js.org/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>前端剪贴板复制功能实现原理</title>
    <link href="https://wdd.js.org/clipboard-copy-tutorial.html"/>
    <id>https://wdd.js.org/clipboard-copy-tutorial.html</id>
    <published>2018-03-14T06:19:12.000Z</published>
    <updated>2018-03-14T10:36:45.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-兼容情况"><a href="#1-兼容情况" class="headerlink" title="1. 兼容情况"></a>1. 兼容情况</h1><p>如果想浏览器支持粘贴功能，那么浏览器必须支持，<a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/execCommand" target="_blank" rel="noopener">document.execCommand(‘copy’)</a>方法，也可以根据<a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/queryCommandSupported" target="_blank" rel="noopener">document.queryCommandEnabled(‘copy’)</a>，返回的true或者false判断浏览器是否支持copy命令。</p><p>从下表可以看出，主流的浏览器都支持execCommand命令</p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180314142213_IhrFsz_Jietu20180314-141253.jpeg" alt=""></p><h1 id="2-复制的原理"><a href="#2-复制的原理" class="headerlink" title="2. 复制的原理"></a>2. 复制的原理</h1><ol><li>查询元素</li><li>选中元素</li><li>执行复制命令</li></ol><h1 id="3-代码展示"><a href="#3-代码展示" class="headerlink" title="3. 代码展示"></a>3. 代码展示</h1><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// html</span></span><br><span class="line">&lt;<span class="selector-tag">input</span> id=<span class="string">"username"</span> value=<span class="string">"123456"</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询元素</span></span><br><span class="line"><span class="selector-tag">var</span> username = document.getElementById(‘username’)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选中元素</span></span><br><span class="line">username.select()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行复制</span></span><br><span class="line">document.execCommand(<span class="string">'copy'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>注意: 以上代码只是简单示意，在实践过程中还有几个要判断的情况</p></blockquote><ol><li>首要要去检测浏览器execCommand能力检测</li><li>选取元素时，有可能选取元素为空，要考虑这种情况的处理</li></ol><h1 id="4-第三方方案"><a href="#4-第三方方案" class="headerlink" title="4. 第三方方案"></a>4. 第三方方案</h1><p><a href="https://clipboardjs.com/" target="_blank" rel="noopener">clipboard.js</a>是一个比较方便的剪贴板库，功能蛮多的。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Target --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">"bar"</span>&gt;</span>Mussum ipsum cacilds...<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Trigger --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">data-clipboard-action</span>=<span class="string">"cut"</span> <span class="attr">data-clipboard-target</span>=<span class="string">"#bar"</span>&gt;</span></span><br><span class="line">    Cut to clipboard</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>官方给的代码里有上面的一个示例，如果你用了这个示例，但是不起作用，那你估计是没有初始化ClipboardJS示例的。</p><p>注意：下面的函数必须要主动调用，这样才能给响应的DOM元素注册事件。 ClipboardJS源代码压缩后大约有3kb，虽然很小了，但是如果你不需要它的这么多功能的话，其实你自己写几行代码就可以搞定复制功能。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="type">ClipboardJS</span>(<span class="string">'.btn'</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-兼容情况&quot;&gt;&lt;a href=&quot;#1-兼容情况&quot; class=&quot;headerlink&quot; title=&quot;1. 兼容情况&quot;&gt;&lt;/a&gt;1. 兼容情况&lt;/h1&gt;&lt;p&gt;如果想浏览器支持粘贴功能，那么浏览器必须支持，&lt;a href=&quot;https://developer.mo
      
    
    </summary>
    
    
      <category term="copy" scheme="https://wdd.js.org/tags/copy/"/>
    
      <category term="clipboard" scheme="https://wdd.js.org/tags/clipboard/"/>
    
  </entry>
  
  <entry>
    <title>如何成为从培训班里出来的牛人？</title>
    <link href="https://wdd.js.org/how-to-learn-form-trianing-class.html"/>
    <id>https://wdd.js.org/how-to-learn-form-trianing-class.html</id>
    <published>2018-03-12T11:44:10.000Z</published>
    <updated>2018-03-13T03:38:18.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p3alsaatj.bkt.clouddn.com/20180312210006_ggoJT5_.jpeg" alt="牛人"></p><a id="more"></a><h1 id="1-培训行业的现状和问题"><a href="#1-培训行业的现状和问题" class="headerlink" title="1. 培训行业的现状和问题"></a>1. 培训行业的现状和问题</h1><p><img src="http://p3alsaatj.bkt.clouddn.com/20180312210146_0EzB4z_.jpeg" alt=""></p><p>进入培训班学习可能有一下两个原因：</p><ol><li>想转行</li><li>学校里学的东西太过时了，需要深入学习本行业的知识</li></ol><p>培训的行业的核心思想都是：如何快速的让你能够面试通过</p><p>老师教的东西大多是一些面试必须要问的一些知识，做的项目也应该都是市面上比较火的项目。这么做的不利之处有以下几点：</p><ol><li>局限性：知识局限于教师的授课范围，知识面窄</li><li>扩展性：快餐式学习管饱不管消化，很多知识吸收不高，无法举一反三</li><li>系统性：没有系统的整体知识体系</li></ol><p>所以这些因素可能会让用人不太喜欢培训出来的应聘者，而往往希望刚毕业的应届生。但是，培训行业出来的应聘者，也不乏国士无双的牛逼人物。</p><h1 id="2-如何成为培训出来的牛人？"><a href="#2-如何成为培训出来的牛人？" class="headerlink" title="2. 如何成为培训出来的牛人？"></a>2. 如何成为培训出来的牛人？</h1><p><img src="http://p3alsaatj.bkt.clouddn.com/20180312210006_ggoJT5_.jpeg" alt="牛人"></p><p>无论在哪个行业，自学都是必不可少的事情。毕业不是学习的终点，而应该是起点。你和技术牛人之间的距离或许并不遥远，可能只是一个芭蕉扇的距离。</p><h2 id="2-1-读权威书籍，扎实理论基础"><a href="#2-1-读权威书籍，扎实理论基础" class="headerlink" title="2.1. 读权威书籍，扎实理论基础"></a>2.1. 读权威书籍，扎实理论基础</h2><p><img src="http://p3alsaatj.bkt.clouddn.com/20180312205915_vK65MG_images.jpeg" alt=""></p><p>每个行业都有一些经历时间考验而熠熠生辉的经典数据，例如在前端行业。我认为下面两本书是必须要读完一本的。</p><p><strong>基础</strong></p><ul><li><a href="https://book.douban.com/subject/10546125/" target="_blank" rel="noopener">JavaScript高级程序设计</a></li><li><a href="https://book.douban.com/subject/1232061/" target="_blank" rel="noopener">JavaScript权威指南</a></li></ul><p><strong>进阶</strong></p><ul><li><a href="https://book.douban.com/subject/3590768/" target="_blank" rel="noopener">JavaScript语言精粹</a></li><li><a href="https://book.douban.com/subject/26638316/" target="_blank" rel="noopener">JavaScript忍者秘籍</a></li><li><a href="https://book.douban.com/subject/25883834/" target="_blank" rel="noopener">You Don’t Know JS</a></li><li><a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/" target="_blank" rel="noopener">JS函数式编程指南</a></li></ul><h2 id="2-2-动手能力，闲话少说，放码过来"><a href="#2-2-动手能力，闲话少说，放码过来" class="headerlink" title="2.2. 动手能力，闲话少说，放码过来"></a>2.2. 动手能力，闲话少说，放码过来</h2><p><img src="http://p3alsaatj.bkt.clouddn.com/20180312210414_APpqMz_Screenshot.jpeg" alt=""></p><p>各种demo啊，效果啊，有时间自己都可以撸一遍，放在github上，又不收钱，还能提高动手能力。</p><h2 id="2-3-数据结构"><a href="#2-3-数据结构" class="headerlink" title="2.3. 数据结构"></a>2.3. 数据结构</h2><p><img src="http://p3alsaatj.bkt.clouddn.com/20180312205748_PCryFT_.jpeg" alt=""></p><blockquote><p>差劲的程序员操心代码，牛逼的程序员操心数据结构和它们之间的关系。 一一Linus Torvalds, Linux 创始人</p></blockquote><p>优秀的数据结构，可以节省你80%的编码时间。差劲的数据结构，你需要花大量的时间去做各种高难度动作的转换，一不小心，数据库就要累的气喘如牛，停机罢工。</p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180313113812_yObLd0_.jpeg" alt=""></p><h2 id="2-4-知识积累，从博客开始"><a href="#2-4-知识积累，从博客开始" class="headerlink" title="2.4. 知识积累，从博客开始"></a>2.4. 知识积累，从博客开始</h2><p><img src="http://p3alsaatj.bkt.clouddn.com/20180312205835_RKuuzw_.jpeg" alt=""></p><p>如果你已经在某个行业工作个两三年，一篇像样的博客都没有。</p><p><code>那我觉得你可能是个懒人。</code>因为几乎很少写东西。</p><p><code>我觉得你可以是个自私的人。</code>因为做计算机行业的，谁没有用过别人造的轮子。即使你没有造轮子的能力，即使你给出一个问题应该如何解决的，至少你对计算机行业也作出了你的贡献。</p><h2 id="2-5-互联网的基石-TCP-IP"><a href="#2-5-互联网的基石-TCP-IP" class="headerlink" title="2.5. 互联网的基石 TCP IP"></a>2.5. 互联网的基石 TCP IP</h2><p><img src="http://p3alsaatj.bkt.clouddn.com/20180312205615_vUZuEg_.jpeg" alt=""></p><p>计算机行业是分层的，就像大海一样，海面上的往往都是惊涛骇浪，暴风骤雨，各种框架层出不穷，争奇斗艳。当你深入海底，你会发现，那里是最平静的地方。而TCP IP等协议知识，就是整个互联网大航海时代的海底。互联网行业如此多娇，引无数框架竞折腰。浪潮之巅者成为行业热点，所有资源会喷薄涌入，失去优势被替代者，往往折戟沉沙铁未销。总之，越是上层，竞争越激烈，换代越快。</p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180313113545_2Wlw3y_.jpeg" alt=""><img src="http://p3alsaatj.bkt.clouddn.com/20180313113633_GQRwhD_images.jpeg" alt=""></p><p>但是底层的TCP/IP之类的知识，往往几十年都不会有多大的改变。而且无论你从事什么语言开发，只要你涉及到通信了，你就需要TCP/IP的知识点，不过你不清楚这些知识点，你可以随时给自己埋下定时炸弹。</p><p>这个错误我也犯过，你可以看我的犯错记录：<a href="https://wdd.js.org/tcp-high-recv-q-or-send-q-reasons.html">哑代理 - TCP链接高Recv-Q，内存泄露的罪魁祸首</a>。</p><p>关于TCP/IP, 推荐一下书籍</p><p><strong>基础</strong></p><ul><li><a href="https://book.douban.com/subject/24737674/" target="_blank" rel="noopener">图解TCP/IP : 第5版</a></li><li><a href="https://book.douban.com/subject/25863515/" target="_blank" rel="noopener">图解HTTP</a></li></ul><p><strong>进阶</strong></p><ul><li><a href="https://book.douban.com/subject/10746113/" target="_blank" rel="noopener">HTTP权威指南</a></li></ul><h2 id="2-6-工具的威力"><a href="#2-6-工具的威力" class="headerlink" title="2.6. 工具的威力"></a>2.6. 工具的威力</h2><p><img src="http://p3alsaatj.bkt.clouddn.com/20180312205507_oFCW2L_images.jpeg" alt=""></p><p><code>你用刀，我用枪，谁说谁能打过谁</code>。原始社会两个野蛮人相遇，块头大的，食物多，可以拥有更多的繁衍后代的权利。但是当一个野蛮人知道用刀的威力时，他就不会害怕胳膊比较粗的对手了。</p><p>举例来说，前端开发免不了有时需要一个静态文件服务器，如果你只知道阿帕奇，那你的工具也太落后了。你可以看看这篇文章：<a href="https://wdd.js.org/one-command-create-static-file-server.html">一行命令搭建简易静态文件http服务器</a></p><p><code>当你想要更偷懒，想要不安于现状时，你会找到更多的厉害的工具。</code></p><h2 id="2-7-英语阅读能力"><a href="#2-7-英语阅读能力" class="headerlink" title="2.7. 英语阅读能力"></a>2.7. 英语阅读能力</h2><p><img src="http://p3alsaatj.bkt.clouddn.com/20180312211550_3JOQkF_.jpeg" alt=""></p><p>IT行业还有一个现象，就是看英文文档如喝中药一般，总是捏着鼻子也看不下去。看中文文档放佛如喝王老吉，消火又滋润。</p><p>IT行业至今来说，放佛还是个舶来品。所有的最新的文档都是英文的。但是也不乏有好的中文翻译文档，但是都是需要花时间去等待。而且英文文档也随着翻译者的水平而参差不齐。</p><p>其实我们完全没必要去害怕英文文档，其实英文文档里最常用的单词往往是很固定的。又不是什么言情小说，总是让你摸不着头脑。</p><p>你不想看英文文档，从本质上说，还是因为你懒。</p><h2 id="2-8-文档能力"><a href="#2-8-文档能力" class="headerlink" title="2.8. 文档能力"></a>2.8. 文档能力</h2><p><img src="http://p3alsaatj.bkt.clouddn.com/20180312212821_8MdIOS_.jpeg" alt=""></p><p>大多说程序的文档都是写给自己看的，或者说大多说的程序员的语文都是数学老师教的。这个其实很让看文档的人苦恼的。一个优秀的程序和框架，无一不是文档非常完善。因为文档的完善才能有利于文档的传播，才有利于解决问题。你的框架再牛逼，效率再如何高，没有人能看的懂，那是没用了。闭门造车永远也搞不出好东西。</p><p>关于如何写作文档，可以参考：<a href="https://wdd.js.org/how-to-write-a-technical-document.html">如何写好技术文档?</a></p><h1 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h1><ul><li>开放的思维，敢于接纳一些新事物</li><li>不断学习，不舍昼夜</li><li>记笔记，写博客，要给所有的努力留下记录</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p3alsaatj.bkt.clouddn.com/20180312210006_ggoJT5_.jpeg&quot; alt=&quot;牛人&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习方法" scheme="https://wdd.js.org/tags/%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>你不知道的专业化道路</title>
    <link href="https://wdd.js.org/feature-of-dangerous-professional-skill.html"/>
    <id>https://wdd.js.org/feature-of-dangerous-professional-skill.html</id>
    <published>2018-03-10T13:16:32.000Z</published>
    <updated>2018-03-10T14:14:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="从分工到专业化"><a href="#从分工到专业化" class="headerlink" title="从分工到专业化"></a>从分工到专业化</h1><p>分工提高生产效率，专业化提高个人价值。很多人都认为，一旦我们进入了某一行，我们就应该在这个行业深挖到底。例如我是做前端的，我就会去学习各种前端的知识点，各种层出不穷的框架。我总是在如饥似渴的希望自己能够保持在深入学习的状态，我不想哪一天自己突然out了。</p><h1 id="专业化的危机在哪？"><a href="#专业化的危机在哪？" class="headerlink" title="专业化的危机在哪？"></a>专业化的危机在哪？</h1><p>以前我在上初中的时候，就稍稍的学习了一点点ActionScript的知识。可能有些人不知道ActionScript是干嘛的，它是在flash的环境中工作的，可以在flash里做一些动画和特效之类的。那时候flash是很火的技术，几乎所有的网站都是有flash的，所以会ActionScript语言的程序员，工资都不低。</p><p>但是，你现在还听过什么ActionScript吗？ 它的宿主环境flash都已经被淘汰了，皮之不存毛将焉附。可想而知，flash的淘汰，同时也让时长淘汰了一批在ActionScript的专家。</p><p>所以，专业化并不是一个安全的道路。准确来说，世界上本来就没有安全的路。大多说认为这条路安全，是因为他们总是以静态的眼光看这条路。说点题外话，如果你书读多了，你会发现，其实一直在你思想里的那些观念，那些故事，往往都是忽悠人的。你可以看看我的一个书单：<a href="https://wdd.js.org/2018-reading-plan.html">2018年我的阅读计划</a>。</p><p>从企业的角度考虑，每个老板都想招在某一方面专家。但是从个人的角度考虑，如果你在专业化的道路钻研的非常深，或许有时候你应该放慢脚步，找个长椅，坐着想一想，如果你前面马上就是死路了，你应该怎么办？</p><h1 id="我们应该怎么办？"><a href="#我们应该怎么办？" class="headerlink" title="我们应该怎么办？"></a>我们应该怎么办？</h1><p>世界上没有安全的路，世界上也没有一直安全的职业。一个职业的火爆，往往因为这个行业的火爆。而永远也没有永远火爆的行业，当退潮时，将会有大批的弄潮儿会搁浅，干死，窒息……</p><p>除去环境造成的扰动，人的身体也会随着年龄会慢慢老化。</p><p>你可以想象一下，当你四十多岁时。那些新来的实习生，比你要的工资低，比你更容易接受这个行业的前沿知识，比你更加能加班，比你能力更强时，比你更听话时。你的优势在哪里？我相信到那时候，你的领导会毫不犹豫开了你。</p><p>在此，你要改变。我给出以下几个角度，你可以自行延伸。</p><ul><li>开始锻炼身体 这是一切的基石</li><li>搞一搞副业，学习一下你喜欢的东西，你可以去深入学学如何做菜，如何摄影等等</li><li>学习理财知识，这是学校从没教你的，但是却是非常重要的东西</li><li>读书，越多越好</li></ul><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul><li><a href="https://book.douban.com/subject/1790456/" target="_blank" rel="noopener">专业主义 日 大前研一 </a></li><li><a href="https://book.douban.com/subject/25816940/" target="_blank" rel="noopener">富爸爸穷爸爸 罗伯特·清崎 / 莎伦·莱希特</a></li><li><a href="https://book.douban.com/subject/1261560/" target="_blank" rel="noopener">国富论 英 亚当·斯密</a></li><li><a href="https://book.douban.com/subject/5375620/" target="_blank" rel="noopener">失控</a></li><li><a href="https://book.douban.com/subject/1012611/" target="_blank" rel="noopener">乌合之众 法 古斯塔夫·勒庞</a></li><li><a href="http://survivor.ruanyifeng.com/index.html" target="_blank" rel="noopener">未来世界的幸存者 阮一峰</a></li><li><a href="https://www.gitbook.com/book/xiaolai/reborn/details" target="_blank" rel="noopener">新生 七年就是一辈子 李笑来</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;从分工到专业化&quot;&gt;&lt;a href=&quot;#从分工到专业化&quot; class=&quot;headerlink&quot; title=&quot;从分工到专业化&quot;&gt;&lt;/a&gt;从分工到专业化&lt;/h1&gt;&lt;p&gt;分工提高生产效率，专业化提高个人价值。很多人都认为，一旦我们进入了某一行，我们就应该在这个行业深挖到
      
    
    </summary>
    
    
      <category term="职业规划" scheme="https://wdd.js.org/tags/%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>Chrome本地跨域origin-null-is-not-allowed问题分析与解决方案</title>
    <link href="https://wdd.js.org/origin-null-is-not-allowed.html"/>
    <id>https://wdd.js.org/origin-null-is-not-allowed.html</id>
    <published>2018-03-09T09:58:05.000Z</published>
    <updated>2018-03-09T10:24:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-问题表现"><a href="#1-问题表现" class="headerlink" title="1. 问题表现"></a>1. 问题表现</h1><p>以<code>file:///xxx.html</code>打开某个html文件，发送ajax请求时报错：</p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Response <span class="keyword">to</span> preflight request doesn<span class="symbol">'t</span> pass <span class="keyword">access</span> control check: The <span class="symbol">'Access</span>-Control-Allow-Origin' header has a value <span class="symbol">'null</span>' that <span class="keyword">is</span> <span class="keyword">not</span> equal <span class="keyword">to</span> the supplied origin. Origin <span class="symbol">'null</span>' <span class="keyword">is</span> therefore <span class="keyword">not</span> allowed <span class="keyword">access</span>.</span><br></pre></td></tr></table></figure><h1 id="2-问题原因"><a href="#2-问题原因" class="headerlink" title="2. 问题原因"></a>2. 问题原因</h1><p>Origin null是本地文件系统，因此这表明您正在加载通过file：// URL进行加载调用的HTML页面（例如，只需在本地文件浏览器或类似文件中双击它）。不同的浏览器采用不同的方法将相同来源策略应用到本地文件。<code>Chrome要求比较严格，不允许这种形势的跨域请求。</code>而最好使用http:// 访问html.</p><h1 id="3-解决方案"><a href="#3-解决方案" class="headerlink" title="3. 解决方案"></a>3. 解决方案</h1><p>以下给出三个解决方案，第一个最快，第三个作为彻底。</p><h2 id="3-1-方案1-给Chrome快捷方式中增加-–allow-file-access-from-files"><a href="#3-1-方案1-给Chrome快捷方式中增加-–allow-file-access-from-files" class="headerlink" title="3.1. 方案1 给Chrome快捷方式中增加 –allow-file-access-from-files"></a>3.1. 方案1 给Chrome快捷方式中增加 –allow-file-access-from-files</h2><p>打开Chrome快捷方式的属性中设置：右击Chrome浏览器快捷方式，选择“属性”，在“目标”中加”–allow-file-access-from-files”，注意前面有个空格，重启Chrome浏览器便可。</p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180309181105_SUxYRg_Screenshot.jpeg" alt=""></p><h2 id="3-2-方案2-启动一个简单的静态文件服务器-以http协议访问html"><a href="#3-2-方案2-启动一个简单的静态文件服务器-以http协议访问html" class="headerlink" title="3.2. 方案2 启动一个简单的静态文件服务器, 以http协议访问html"></a>3.2. 方案2 启动一个简单的静态文件服务器, 以http协议访问html</h2><p>参见我的这篇文章: <a href="https://wdd.js.org/one-command-create-static-file-server.html">一行命令搭建简易静态文件http服务器</a></p><h2 id="3-3-方案3-服务端响应修改Access-Control-Allow-Origin"><a href="#3-3-方案3-服务端响应修改Access-Control-Allow-Origin" class="headerlink" title="3.3. 方案3 服务端响应修改Access-Control-Allow-Origin : *"></a>3.3. 方案3 服务端响应修改Access-Control-Allow-Origin : *</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">response</span><span class="selector-class">.addHeader</span>(<span class="string">"Access-Control-Allow-Origin"</span>,<span class="string">"*"</span>)</span><br></pre></td></tr></table></figure><h1 id="4-参考文章"><a href="#4-参考文章" class="headerlink" title="4. 参考文章"></a>4. 参考文章</h1><ul><li><a href="http://blog.csdn.net/dandanzmc/article/details/31344267" target="_blank" rel="noopener">如何解决XMLHttpRequest cannot load file<del>~</del>~~Origin ‘null’ is therefore not allowed access</a></li><li><a href="http://blog.csdn.net/kissliux/article/details/16889111" target="_blank" rel="noopener">让chrome支持本地Ajax请求,Ajax请求status cancel Origin null is not allowed by Access-Control-Allow-Origin</a></li><li><a href="https://stackoverflow.com/questions/8456538/origin-null-is-not-allowed-by-access-control-allow-origin" target="_blank" rel="noopener">Origin null is not allowed by Access-Control-Allow-Origin</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-问题表现&quot;&gt;&lt;a href=&quot;#1-问题表现&quot; class=&quot;headerlink&quot; title=&quot;1. 问题表现&quot;&gt;&lt;/a&gt;1. 问题表现&lt;/h1&gt;&lt;p&gt;以&lt;code&gt;file:///xxx.html&lt;/code&gt;打开某个html文件，发送ajax请求时报错
      
    
    </summary>
    
    
      <category term="chrome" scheme="https://wdd.js.org/tags/chrome/"/>
    
      <category term="跨域" scheme="https://wdd.js.org/tags/%E8%B7%A8%E5%9F%9F/"/>
    
      <category term="origin-null-is-not-allowed" scheme="https://wdd.js.org/tags/origin-null-is-not-allowed/"/>
    
  </entry>
  
  <entry>
    <title>曲线救国 使用googler命令行搜索</title>
    <link href="https://wdd.js.org/use-googler-for-serarch.html"/>
    <id>https://wdd.js.org/use-googler-for-serarch.html</id>
    <published>2018-03-06T03:15:38.000Z</published>
    <updated>2018-03-06T03:33:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前因为有优惠政策，于是我在xx云上买了一台位于香港的最低配置的服务器，期限三年，主要用来搭建ss, 用来跨栏。</p><p>用了一段时间，感觉挺稳定的。后来一纸通知，收到了整改信息。于是我就把ss服务停了。</p><p>三年的主机不能浪费，于是我就思考一下曲线救国的思路。</p><p>即使用<code>ssh链接上远程服务器后，使用googler命令进行搜索，然后点击链接，使用本地浏览器打开搜索结果</code></p><p>关于googler可以查看，<a href="https://github.com/jarun/googler#installation" target="_blank" rel="noopener">https://github.com/jarun/googler#installation</a></p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180306113311_LrY1wY_68747470733a2f2f73312e706f7374696d672e6f72672f3168673278316471726a2f676f6f676c65722e706e67.jpeg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前因为有优惠政策，于是我在xx云上买了一台位于香港的最低配置的服务器，期限三年，主要用来搭建ss, 用来跨栏。&lt;/p&gt;
&lt;p&gt;用了一段时间，感觉挺稳定的。后来一纸通知，收到了整改信息。于是我就把ss服务停了。&lt;/p&gt;
&lt;p&gt;三年的主机不能浪费，于是我就思考一下曲线救国的思
      
    
    </summary>
    
    
      <category term="谷歌" scheme="https://wdd.js.org/tags/%E8%B0%B7%E6%AD%8C/"/>
    
  </entry>
  
</feed>

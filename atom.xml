<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>洞香春</title>
  
  <subtitle>洞香春以名士荟萃、谈论国事、交流思想而著称于当时列国 --《大秦帝国》</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wdd.js.org/"/>
  <updated>2018-03-09T10:16:22.000Z</updated>
  <id>https://wdd.js.org/</id>
  
  <author>
    <name>王端端</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Chrome本地跨域origin-null-is-not-allowed问题分析与解决方案</title>
    <link href="https://wdd.js.org/origin-null-is-not-allowed.html"/>
    <id>https://wdd.js.org/origin-null-is-not-allowed.html</id>
    <published>2018-03-09T09:58:05.000Z</published>
    <updated>2018-03-09T10:16:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-问题表现"><a href="#1-问题表现" class="headerlink" title="1. 问题表现"></a>1. 问题表现</h1><p>以<code>file:///xxx.html</code>打开某个html文件，发送ajax请求时报错：</p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Response <span class="keyword">to</span> preflight request doesn<span class="symbol">'t</span> pass <span class="keyword">access</span> control check: The <span class="symbol">'Access</span>-Control-Allow-Origin' header has a value <span class="symbol">'null</span>' that <span class="keyword">is</span> <span class="keyword">not</span> equal <span class="keyword">to</span> the supplied origin. Origin <span class="symbol">'null</span>' <span class="keyword">is</span> therefore <span class="keyword">not</span> allowed <span class="keyword">access</span>.</span><br></pre></td></tr></table></figure><h1 id="2-问题原因"><a href="#2-问题原因" class="headerlink" title="2. 问题原因"></a>2. 问题原因</h1><p>Origin null是本地文件系统，因此这表明您正在加载通过file：// URL进行加载调用的HTML页面（例如，只需在本地文件浏览器或类似文件中双击它）。不同的浏览器采用不同的方法将相同来源策略应用到本地文件。<code>Chrome要求比较严格，不允许这种形势的跨域请求。</code>而最好使用http:// 访问html.</p><h1 id="3-解决方案"><a href="#3-解决方案" class="headerlink" title="3. 解决方案"></a>3. 解决方案</h1><p>以下给出三个解决方案，第一个最快，第三个作为彻底。</p><h2 id="3-1-方案1-给Chrome快捷方式中增加-–allow-file-access-from-files"><a href="#3-1-方案1-给Chrome快捷方式中增加-–allow-file-access-from-files" class="headerlink" title="3.1. 方案1 给Chrome快捷方式中增加 –allow-file-access-from-files"></a>3.1. 方案1 给Chrome快捷方式中增加 –allow-file-access-from-files</h2><p>打开Chrome快捷方式的属性中设置：右击Chrome浏览器快捷方式，选择“属性”，在“目标”中加”–allow-file-access-from-files”，注意前面有个空格，重启Chrome浏览器便可。</p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180309181105_SUxYRg_Screenshot.jpeg" alt=""></p><h2 id="3-2-方案2-启动一个简单的静态文件服务器-以http协议访问html"><a href="#3-2-方案2-启动一个简单的静态文件服务器-以http协议访问html" class="headerlink" title="3.2. 方案2 启动一个简单的静态文件服务器, 以http协议访问html"></a>3.2. 方案2 启动一个简单的静态文件服务器, 以http协议访问html</h2><p>参见我的这篇文章: <a href="https://wdd.js.org/one-command-create-static-file-server.html">一行命令搭建简易静态文件http服务器</a></p><h2 id="3-3-方案3-服务端响应修改Access-Control-Allow-Origin"><a href="#3-3-方案3-服务端响应修改Access-Control-Allow-Origin" class="headerlink" title="3.3. 方案3 服务端响应修改Access-Control-Allow-Origin : *"></a>3.3. 方案3 服务端响应修改Access-Control-Allow-Origin : *</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">response</span><span class="selector-class">.addHeader</span>(<span class="string">"Access-Control-Allow-Origin"</span>,<span class="string">"*"</span>)</span><br></pre></td></tr></table></figure><h1 id="4-参考文章"><a href="#4-参考文章" class="headerlink" title="4. 参考文章"></a>4. 参考文章</h1><ul><li><a href="http://blog.csdn.net/dandanzmc/article/details/31344267" target="_blank" rel="noopener">如何解决XMLHttpRequest cannot load file<del>~</del>~~Origin ‘null’ is therefore not allowed access</a></li><li><a href="http://blog.csdn.net/kissliux/article/details/16889111" target="_blank" rel="noopener">让chrome支持本地Ajax请求,Ajax请求status cancel Origin null is not allowed by Access-Control-Allow-Origin</a></li><li><a href="https://stackoverflow.com/questions/8456538/origin-null-is-not-allowed-by-access-control-allow-origin" target="_blank" rel="noopener">Origin null is not allowed by Access-Control-Allow-Origin</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-问题表现&quot;&gt;&lt;a href=&quot;#1-问题表现&quot; class=&quot;headerlink&quot; title=&quot;1. 问题表现&quot;&gt;&lt;/a&gt;1. 问题表现&lt;/h1&gt;&lt;p&gt;以&lt;code&gt;file:///xxx.html&lt;/code&gt;打开某个html文件，发送ajax请求时报错
      
    
    </summary>
    
    
      <category term="chrome" scheme="https://wdd.js.org/tags/chrome/"/>
    
      <category term="跨域" scheme="https://wdd.js.org/tags/%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>曲线救国 使用googler命令行搜索</title>
    <link href="https://wdd.js.org/use-googler-for-serarch.html"/>
    <id>https://wdd.js.org/use-googler-for-serarch.html</id>
    <published>2018-03-06T03:15:38.000Z</published>
    <updated>2018-03-06T03:33:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前因为有优惠政策，于是我在xx云上买了一台位于香港的最低配置的服务器，期限三年，主要用来搭建ss, 用来跨栏。</p><p>用了一段时间，感觉挺稳定的。后来一纸通知，收到了整改信息。于是我就把ss服务停了。</p><p>三年的主机不能浪费，于是我就思考一下曲线救国的思路。</p><p>即使用<code>ssh链接上远程服务器后，使用googler命令进行搜索，然后点击链接，使用本地浏览器打开搜索结果</code></p><p>关于googler可以查看，<a href="https://github.com/jarun/googler#installation" target="_blank" rel="noopener">https://github.com/jarun/googler#installation</a></p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180306113311_LrY1wY_68747470733a2f2f73312e706f7374696d672e6f72672f3168673278316471726a2f676f6f676c65722e706e67.jpeg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前因为有优惠政策，于是我在xx云上买了一台位于香港的最低配置的服务器，期限三年，主要用来搭建ss, 用来跨栏。&lt;/p&gt;
&lt;p&gt;用了一段时间，感觉挺稳定的。后来一纸通知，收到了整改信息。于是我就把ss服务停了。&lt;/p&gt;
&lt;p&gt;三年的主机不能浪费，于是我就思考一下曲线救国的思
      
    
    </summary>
    
    
      <category term="谷歌" scheme="https://wdd.js.org/tags/%E8%B0%B7%E6%AD%8C/"/>
    
  </entry>
  
  <entry>
    <title>前端团队合作规范</title>
    <link href="https://wdd.js.org/front-end-team-work-blog.html"/>
    <id>https://wdd.js.org/front-end-team-work-blog.html</id>
    <published>2018-03-02T00:59:01.000Z</published>
    <updated>2018-03-02T01:04:53.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-编程风格"><a href="#1-编程风格" class="headerlink" title="1. 编程风格"></a>1. 编程风格</h1><ul><li><code>代码风格</code> <a href="https://standardjs.com/readme-zhcn.html" target="_blank" rel="noopener">JavaScript Standard Style</a></li><li><a href="https://wdd.js.org/js-best-parctices/#/">js最佳实践</a></li></ul><h1 id="2-编辑器"><a href="#2-编辑器" class="headerlink" title="2. 编辑器"></a>2. 编辑器</h1><p>vscode</p><h1 id="3-git版本控制"><a href="#3-git版本控制" class="headerlink" title="3. git版本控制"></a>3. git版本控制</h1><p>master随时发布<br>dev用于开发</p><h1 id="4-工程化与模块化"><a href="#4-工程化与模块化" class="headerlink" title="4. 工程化与模块化"></a>4. 工程化与模块化</h1><p>构件工具必须要有<br>模块化</p><h1 id="5-代码整洁"><a href="#5-代码整洁" class="headerlink" title="5. 代码整洁"></a>5. 代码整洁</h1><p>阅读代码整洁之道<br>单个文件代码行越少越好，尽量按模块分散<br>函数体代码行越少越好，职责单一</p><h1 id="6-tcp-ip"><a href="#6-tcp-ip" class="headerlink" title="6. tcp ip"></a>6. tcp ip</h1><p>阅读http权威指南<br>图解tcp ip</p><h1 id="7-es6"><a href="#7-es6" class="headerlink" title="7. es6"></a>7. es6</h1><p>阮一峰 es6教程</p><h1 id="8-vue编程风格"><a href="#8-vue编程风格" class="headerlink" title="8. vue编程风格"></a>8. vue编程风格</h1><p>vue官方推荐风格</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-编程风格&quot;&gt;&lt;a href=&quot;#1-编程风格&quot; class=&quot;headerlink&quot; title=&quot;1. 编程风格&quot;&gt;&lt;/a&gt;1. 编程风格&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;代码风格&lt;/code&gt; &lt;a href=&quot;https://standardjs.
      
    
    </summary>
    
    
      <category term="规范" scheme="https://wdd.js.org/tags/%E8%A7%84%E8%8C%83/"/>
    
      <category term="前端团队" scheme="https://wdd.js.org/tags/%E5%89%8D%E7%AB%AF%E5%9B%A2%E9%98%9F/"/>
    
  </entry>
  
  <entry>
    <title>python3入门书籍与在线资料</title>
    <link href="https://wdd.js.org/python-books-comments.html"/>
    <id>https://wdd.js.org/python-books-comments.html</id>
    <published>2018-02-25T14:44:19.000Z</published>
    <updated>2018-02-26T01:24:51.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-书籍类"><a href="#1-书籍类" class="headerlink" title="1. 书籍类"></a>1. 书籍类</h1><h2 id="1-1-老太婆一样的罗里吧嗦：-Python学习手册（第4版）"><a href="#1-1-老太婆一样的罗里吧嗦：-Python学习手册（第4版）" class="headerlink" title="1.1. 老太婆一样的罗里吧嗦： Python学习手册（第4版）"></a>1.1. 老太婆一样的罗里吧嗦： Python学习手册（第4版）</h2><p>这本书相当的啰嗦，讲的内容空洞乏力，一些概念蜻蜓点水，买了必定会后悔。</p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180225225213_u31NAG_Jietu20180225-225148.jpeg" alt=""></p><h2 id="1-2-很有意思：Python编程：从入门到实践"><a href="#1-2-很有意思：Python编程：从入门到实践" class="headerlink" title="1.2. 很有意思：Python编程：从入门到实践"></a>1.2. 很有意思：Python编程：从入门到实践</h2><p>这本书讲的知识点虽然不是很全面，但是要点都讲的很清晰，行文也很有意思，最后一些实践项目也很有趣。</p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180225225523_yfBUXd_Jietu20180225-225513.jpeg" alt=""></p><h2 id="1-3-干货满满：Python语言及其应用"><a href="#1-3-干货满满：Python语言及其应用" class="headerlink" title="1.3. 干货满满：Python语言及其应用"></a>1.3. 干货满满：Python语言及其应用</h2><p>这本书虽然不是非常有趣，但是都是干货满满，知识点讲解也是很到位，非常推荐初学者看看。</p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180225225931_DmTPVu_Jietu20180225-225852.jpeg" alt=""></p><h1 id="2-免费在线资料"><a href="#2-免费在线资料" class="headerlink" title="2. 免费在线资料"></a>2. 免费在线资料</h1><h2 id="2-1-廖雪峰pthon3教程：中文，免费，零起点，完整示例，基于最新的Python-3版本"><a href="#2-1-廖雪峰pthon3教程：中文，免费，零起点，完整示例，基于最新的Python-3版本" class="headerlink" title="2.1. 廖雪峰pthon3教程：中文，免费，零起点，完整示例，基于最新的Python 3版本"></a>2.1. <a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000" target="_blank" rel="noopener">廖雪峰pthon3教程：中文，免费，零起点，完整示例，基于最新的Python 3版本</a></h2><p><img src="http://p3alsaatj.bkt.clouddn.com/20180225230211_jxRF1S_Jietu20180225-230203.jpeg" alt=""></p><h2 id="2-2-菜鸟教程-python3"><a href="#2-2-菜鸟教程-python3" class="headerlink" title="2.2. 菜鸟教程 python3 "></a>2.2. <a href="http://www.runoob.com/python3/python3-tutorial.html" target="_blank" rel="noopener">菜鸟教程 python3 </a></h2><p><code>非常适合作为一个快速查找的手册</code></p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180225230510_1cHt69_Jietu20180225-230456.jpeg" alt=""></p><h2 id="2-3-进阶-Python-Cookbook-3"><a href="#2-3-进阶-Python-Cookbook-3" class="headerlink" title="2.3. 进阶 Python Cookbook 3"></a>2.3. 进阶 <a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/index.html" target="_blank" rel="noopener">Python Cookbook 3</a></h2><p><code>适合有一定python基础的同学看</code></p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180225230726_Yo3D9i_Jietu20180225-230715.jpeg" alt=""></p><h2 id="2-4-把这个放在枕头下面-The-Python-Standard-Library"><a href="#2-4-把这个放在枕头下面-The-Python-Standard-Library" class="headerlink" title="2.4. 把这个放在枕头下面 The Python Standard Library"></a>2.4. 把这个放在枕头下面 <a href="https://docs.python.org/3/library/index.html" target="_blank" rel="noopener">The Python Standard Library</a></h2><p>Python官方标准库参考手册，有什么需要刨根问底的问题需要查的时候，此处务必需要查阅一下。</p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180225231148_DiPST4_Jietu20180225-231133.jpeg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-书籍类&quot;&gt;&lt;a href=&quot;#1-书籍类&quot; class=&quot;headerlink&quot; title=&quot;1. 书籍类&quot;&gt;&lt;/a&gt;1. 书籍类&lt;/h1&gt;&lt;h2 id=&quot;1-1-老太婆一样的罗里吧嗦：-Python学习手册（第4版）&quot;&gt;&lt;a href=&quot;#1-1-老太婆一
      
    
    </summary>
    
    
      <category term="python" scheme="https://wdd.js.org/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式在线工具集合</title>
    <link href="https://wdd.js.org/regex-online-tools.html"/>
    <id>https://wdd.js.org/regex-online-tools.html</id>
    <published>2018-02-24T07:27:24.000Z</published>
    <updated>2018-02-24T07:43:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-功能最强：regex101"><a href="#1-功能最强：regex101" class="headerlink" title="1. 功能最强：regex101"></a>1. 功能最强：<a href="https://regex101.com/" target="_blank" rel="noopener">regex101</a></h1><p>优点：</p><ul><li>支持多种语言, prec,php,javascript,python,golang</li><li>界面美观大方</li><li>支持错误提示，实时匹配</li></ul><p>缺点：</p><ul><li>有时候加载速度太慢</li></ul><p><img src="http://p3alsaatj.bkt.clouddn.com/20180224153235_7QYNUW_Jietu20180224-153227.jpeg" alt=""></p><h1 id="2-可视化正则绘图-Regulex"><a href="#2-可视化正则绘图-Regulex" class="headerlink" title="2. 可视化正则绘图: Regulex"></a>2. 可视化正则绘图: <a href="https://jex.im/regulex/" target="_blank" rel="noopener">Regulex</a></h1><p>优点：</p><ul><li>实时根据正则表达式绘图</li><li>页面加载速度快</li></ul><p><img src="http://p3alsaatj.bkt.clouddn.com/20180224153440_Z2JC4M_Jietu20180224-153432.jpeg" alt=""></p><h1 id="3-可视化正则绘图：regexper"><a href="#3-可视化正则绘图：regexper" class="headerlink" title="3. 可视化正则绘图：regexper"></a>3. 可视化正则绘图：<a href="https://regexper.com/#%2F%5Bf%5D%2F" target="_blank" rel="noopener">regexper</a></h1><p>优点：</p><ul><li>根据正则表达式绘图</li><li>页面加载速度快</li></ul><p>缺点：</p><ul><li>无法实时绘图，需要点击才可以</li></ul><p><img src="http://p3alsaatj.bkt.clouddn.com/20180224153957_KAVhWs_Jietu20180224-153944.jpeg" alt=""></p><h1 id="4-专注于python正则：pyregex"><a href="#4-专注于python正则：pyregex" class="headerlink" title="4. 专注于python正则：pyregex"></a>4. 专注于python正则：<a href="http://www.pyregex.com/" target="_blank" rel="noopener">pyregex</a></h1><ul><li>专注python</li><li>页面加载速度快</li></ul><p><img src="http://p3alsaatj.bkt.clouddn.com/20180224153711_pNQ236_Jietu20180224-153703.jpeg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-功能最强：regex101&quot;&gt;&lt;a href=&quot;#1-功能最强：regex101&quot; class=&quot;headerlink&quot; title=&quot;1. 功能最强：regex101&quot;&gt;&lt;/a&gt;1. 功能最强：&lt;a href=&quot;https://regex101.com/&quot; 
      
    
    </summary>
    
    
      <category term="正则表达式" scheme="https://wdd.js.org/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>VScode Formatter yapf is not installed解决方法</title>
    <link href="https://wdd.js.org/formatter-yapf-is-not-installed.html"/>
    <id>https://wdd.js.org/formatter-yapf-is-not-installed.html</id>
    <published>2018-02-24T03:56:48.000Z</published>
    <updated>2018-02-24T04:02:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-判断你是否安装了yapf"><a href="#1-判断你是否安装了yapf" class="headerlink" title="1. 判断你是否安装了yapf"></a>1. 判断你是否安装了yapf</h1><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">yapf -v</span></span><br></pre></td></tr></table></figure><p>如果你没有安装过，那么必须要安装。</p><h1 id="2-指定pathon路径"><a href="#2-指定pathon路径" class="headerlink" title="2. 指定pathon路径"></a>2. 指定pathon路径</h1><p>有些系统，像macOS，自带python2, 如果你又安装了python3, 并且你使用<code>pip3</code>来安装的yapf， 那么你就需要指定pythonPath</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// <span class="keyword">user</span> <span class="title">settings</span></span><br><span class="line"><span class="string">"python.pythonPath"</span>: <span class="string">"python3"</span>,</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-判断你是否安装了yapf&quot;&gt;&lt;a href=&quot;#1-判断你是否安装了yapf&quot; class=&quot;headerlink&quot; title=&quot;1. 判断你是否安装了yapf&quot;&gt;&lt;/a&gt;1. 判断你是否安装了yapf&lt;/h1&gt;&lt;figure class=&quot;highligh
      
    
    </summary>
    
    
      <category term="python" scheme="https://wdd.js.org/tags/python/"/>
    
      <category term="yapf" scheme="https://wdd.js.org/tags/yapf/"/>
    
      <category term="vscode" scheme="https://wdd.js.org/tags/vscode/"/>
    
      <category term="Formatter yapf is not installed" scheme="https://wdd.js.org/tags/Formatter-yapf-is-not-installed/"/>
    
  </entry>
  
  <entry>
    <title>前端面试和笔试题目</title>
    <link href="https://wdd.js.org/front-end-interview-handbook.html"/>
    <id>https://wdd.js.org/front-end-interview-handbook.html</id>
    <published>2018-02-23T07:18:26.000Z</published>
    <updated>2018-03-09T09:45:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-问答题"><a href="#1-问答题" class="headerlink" title="1. 问答题"></a>1. 问答题</h1><h2 id="1-1-HTML相关"><a href="#1-1-HTML相关" class="headerlink" title="1.1. HTML相关"></a>1.1. HTML相关</h2><h3 id="1-1-1-lt-DOCTYPE-html-gt-的作用是什么？"><a href="#1-1-1-lt-DOCTYPE-html-gt-的作用是什么？" class="headerlink" title="1.1.1. &lt;!DOCTYPE html&gt;的作用是什么？"></a>1.1.1. &lt;!DOCTYPE html&gt;的作用是什么？</h3><h3 id="1-1-2-script-script-async和script-defer之间有什么区别？"><a href="#1-1-2-script-script-async和script-defer之间有什么区别？" class="headerlink" title="1.1.2. script, script async和script defer之间有什么区别？"></a>1.1.2. script, script async和script defer之间有什么区别？</h3><h3 id="1-1-3-cookie-sessionStorage-和-localStorage之间有什么区别？"><a href="#1-1-3-cookie-sessionStorage-和-localStorage之间有什么区别？" class="headerlink" title="1.1.3. cookie, sessionStorage 和 localStorage之间有什么区别？"></a>1.1.3. cookie, sessionStorage 和 localStorage之间有什么区别？</h3><h3 id="1-1-4-用过哪些html模板渲染工具？"><a href="#1-1-4-用过哪些html模板渲染工具？" class="headerlink" title="1.1.4. 用过哪些html模板渲染工具？"></a>1.1.4. 用过哪些html模板渲染工具？</h3><h2 id="1-2-CSS相关"><a href="#1-2-CSS相关" class="headerlink" title="1.2. CSS相关"></a>1.2. CSS相关</h2><h3 id="1-2-1-简述CSS盒子模型"><a href="#1-2-1-简述CSS盒子模型" class="headerlink" title="1.2.1. 简述CSS盒子模型"></a>1.2.1. 简述CSS盒子模型</h3><h3 id="1-2-2-CSS有哪些选择器？"><a href="#1-2-2-CSS有哪些选择器？" class="headerlink" title="1.2.2. CSS有哪些选择器？"></a>1.2.2. CSS有哪些选择器？</h3><h3 id="1-2-3-CSS-sprite是什么？"><a href="#1-2-3-CSS-sprite是什么？" class="headerlink" title="1.2.3. CSS sprite是什么？"></a>1.2.3. CSS sprite是什么？</h3><h3 id="1-2-4-写一下你知道的前端UI框架？"><a href="#1-2-4-写一下你知道的前端UI框架？" class="headerlink" title="1.2.4. 写一下你知道的前端UI框架？"></a>1.2.4. 写一下你知道的前端UI框架？</h3><h2 id="1-3-JS相关"><a href="#1-3-JS相关" class="headerlink" title="1.3. JS相关"></a>1.3. JS相关</h2><h3 id="1-3-1-js有哪些数据类型？"><a href="#1-3-1-js有哪些数据类型？" class="headerlink" title="1.3.1. js有哪些数据类型？"></a>1.3.1. js有哪些数据类型？</h3><h3 id="1-3-2-js有哪些假值？"><a href="#1-3-2-js有哪些假值？" class="headerlink" title="1.3.2. js有哪些假值？"></a>1.3.2. js有哪些假值？</h3><h3 id="1-3-3-js数字和字符串之间有什么快速转换的写法？"><a href="#1-3-3-js数字和字符串之间有什么快速转换的写法？" class="headerlink" title="1.3.3. js数字和字符串之间有什么快速转换的写法？"></a>1.3.3. js数字和字符串之间有什么快速转换的写法？</h3><h3 id="1-3-4-经常使用哪些ES6的语法？"><a href="#1-3-4-经常使用哪些ES6的语法？" class="headerlink" title="1.3.4. 经常使用哪些ES6的语法？"></a>1.3.4. 经常使用哪些ES6的语法？</h3><h3 id="1-3-5-什么是同源策略？"><a href="#1-3-5-什么是同源策略？" class="headerlink" title="1.3.5. 什么是同源策略？"></a>1.3.5. 什么是同源策略？</h3><h3 id="1-3-6-跨域有哪些解决方法？"><a href="#1-3-6-跨域有哪些解决方法？" class="headerlink" title="1.3.6. 跨域有哪些解决方法？"></a>1.3.6. 跨域有哪些解决方法？</h3><h3 id="1-3-7-网页进度条实现的原理"><a href="#1-3-7-网页进度条实现的原理" class="headerlink" title="1.3.7. 网页进度条实现的原理"></a>1.3.7. 网页进度条实现的原理</h3><h3 id="1-3-8-请问console-log是同步的，还是异步的？"><a href="#1-3-8-请问console-log是同步的，还是异步的？" class="headerlink" title="1.3.8. 请问console.log是同步的，还是异步的？"></a>1.3.8. 请问console.log是同步的，还是异步的？</h3><h3 id="1-3-9-下面console输出的值是什么？"><a href="#1-3-9-下面console输出的值是什么？" class="headerlink" title="1.3.9. 下面console输出的值是什么？"></a>1.3.9. 下面console输出的值是什么？</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scores = [10,11,12];</span><br><span class="line"><span class="keyword">var</span> <span class="keyword">total</span> = 0;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> <span class="keyword">score</span> <span class="keyword">in</span> scores)&#123;</span><br><span class="line">  <span class="keyword">total</span> += <span class="keyword">score</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> average = <span class="keyword">total</span>/scores.length;</span><br><span class="line">console.<span class="built_in">log</span>(average);</span><br></pre></td></tr></table></figure><h3 id="1-3-10-请问下面的写法问题在哪？"><a href="#1-3-10-请问下面的写法问题在哪？" class="headerlink" title="1.3.10. 请问下面的写法问题在哪？"></a>1.3.10. 请问下面的写法问题在哪？</h3><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">console.<span class="built_in">log</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    console.<span class="built_in">log</span>(<span class="number">1</span>)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h3 id="1-3-11-解释闭包概念及其作用"><a href="#1-3-11-解释闭包概念及其作用" class="headerlink" title="1.3.11. 解释闭包概念及其作用"></a>1.3.11. 解释闭包概念及其作用</h3><h3 id="1-3-12-如何理解js-函数first-class的概念？"><a href="#1-3-12-如何理解js-函数first-class的概念？" class="headerlink" title="1.3.12. 如何理解js 函数first class的概念？"></a>1.3.12. 如何理解js 函数first class的概念？</h3><h3 id="1-3-13-函数有哪些调用方式？不同this的会指向哪里？"><a href="#1-3-13-函数有哪些调用方式？不同this的会指向哪里？" class="headerlink" title="1.3.13. 函数有哪些调用方式？不同this的会指向哪里？"></a>1.3.13. 函数有哪些调用方式？不同this的会指向哪里？</h3><h3 id="1-3-14-applly和call有什么区别？"><a href="#1-3-14-applly和call有什么区别？" class="headerlink" title="1.3.14. applly和call有什么区别？"></a>1.3.14. applly和call有什么区别？</h3><h3 id="1-3-15-函数的length属性的代表什么？"><a href="#1-3-15-函数的length属性的代表什么？" class="headerlink" title="1.3.15. 函数的length属性的代表什么？"></a>1.3.15. 函数的length属性的代表什么？</h3><h3 id="1-3-16-有用过哪些js编程风格"><a href="#1-3-16-有用过哪些js编程风格" class="headerlink" title="1.3.16. 有用过哪些js编程风格"></a>1.3.16. 有用过哪些js编程风格</h3><h3 id="1-3-17-如何理解EventLoop"><a href="#1-3-17-如何理解EventLoop" class="headerlink" title="1.3.17. 如何理解EventLoop?"></a>1.3.17. 如何理解EventLoop?</h3><h3 id="1-3-18-使用过哪些构建工具？各有什么优缺点？"><a href="#1-3-18-使用过哪些构建工具？各有什么优缺点？" class="headerlink" title="1.3.18. 使用过哪些构建工具？各有什么优缺点？"></a>1.3.18. 使用过哪些构建工具？各有什么优缺点？</h3><h2 id="1-4-其它"><a href="#1-4-其它" class="headerlink" title="1.4. 其它"></a>1.4. 其它</h2><h3 id="1-4-1-平时使用什么搜索引擎查资料？"><a href="#1-4-1-平时使用什么搜索引擎查资料？" class="headerlink" title="1.4.1. 平时使用什么搜索引擎查资料？"></a>1.4.1. 平时使用什么搜索引擎查资料？</h3><h3 id="1-4-2-对翻墙有什么看法？如何翻墙？"><a href="#1-4-2-对翻墙有什么看法？如何翻墙？" class="headerlink" title="1.4.2. 对翻墙有什么看法？如何翻墙？"></a>1.4.2. 对翻墙有什么看法？如何翻墙？</h3><h3 id="1-4-3-个人有没有技术博客，地址是什么？"><a href="#1-4-3-个人有没有技术博客，地址是什么？" class="headerlink" title="1.4.3. 个人有没有技术博客，地址是什么？"></a>1.4.3. 个人有没有技术博客，地址是什么？</h3><h3 id="1-4-4-github上有没有项目？"><a href="#1-4-4-github上有没有项目？" class="headerlink" title="1.4.4. github上有没有项目？"></a>1.4.4. github上有没有项目？</h3><h2 id="1-5-网络相关"><a href="#1-5-网络相关" class="headerlink" title="1.5. 网络相关"></a>1.5. 网络相关</h2><h3 id="1-5-1-请求状态码-1xx-2xx-3xx-4xx-5xx分别有什么含义？"><a href="#1-5-1-请求状态码-1xx-2xx-3xx-4xx-5xx分别有什么含义？" class="headerlink" title="1.5.1. 请求状态码 1xx,2xx,3xx,4xx,5xx分别有什么含义？"></a>1.5.1. 请求状态码 1xx,2xx,3xx,4xx,5xx分别有什么含义？</h3><h3 id="1-5-2-发送某些post请求时，有时会多一些options请求，请问这是为什么？"><a href="#1-5-2-发送某些post请求时，有时会多一些options请求，请问这是为什么？" class="headerlink" title="1.5.2. 发送某些post请求时，有时会多一些options请求，请问这是为什么？"></a>1.5.2. 发送某些post请求时，有时会多一些options请求，请问这是为什么？</h3><h3 id="1-5-3-http报文有哪些组成部分？"><a href="#1-5-3-http报文有哪些组成部分？" class="headerlink" title="1.5.3. http报文有哪些组成部分？"></a>1.5.3. http报文有哪些组成部分？</h3><h3 id="1-5-4-http端到端首部和逐跳首部有什么区别？"><a href="#1-5-4-http端到端首部和逐跳首部有什么区别？" class="headerlink" title="1.5.4. http端到端首部和逐跳首部有什么区别？"></a>1.5.4. http端到端首部和逐跳首部有什么区别？</h3><h3 id="1-5-5-http与https在同时使用时，有什么注意点？"><a href="#1-5-5-http与https在同时使用时，有什么注意点？" class="headerlink" title="1.5.5. http与https在同时使用时，有什么注意点？"></a>1.5.5. http与https在同时使用时，有什么注意点？</h3><h3 id="1-5-6-http-tcp-udp-websocket，分别位于7层网络的那一层？tcp和udp有什么不同？"><a href="#1-5-6-http-tcp-udp-websocket，分别位于7层网络的那一层？tcp和udp有什么不同？" class="headerlink" title="1.5.6. http, tcp, udp, websocket，分别位于7层网络的那一层？tcp和udp有什么不同？"></a>1.5.6. http, tcp, udp, websocket，分别位于7层网络的那一层？tcp和udp有什么不同？</h3><h1 id="2-编码题"><a href="#2-编码题" class="headerlink" title="2. 编码题"></a>2. 编码题</h1><h2 id="2-1-写一个函数，返回一个数组中所有元素被第一个元素除后的结果"><a href="#2-1-写一个函数，返回一个数组中所有元素被第一个元素除后的结果" class="headerlink" title="2.1. 写一个函数，返回一个数组中所有元素被第一个元素除后的结果"></a>2.1. 写一个函数，返回一个数组中所有元素被第一个元素除后的结果</h2><h2 id="2-2-写一个函数，来判断变量是否是数组，至少使用两种写法"><a href="#2-2-写一个函数，来判断变量是否是数组，至少使用两种写法" class="headerlink" title="2.2. 写一个函数，来判断变量是否是数组，至少使用两种写法"></a>2.2. 写一个函数，来判断变量是否是数组，至少使用两种写法</h2><h2 id="2-3-写一个函数，将秒转化成时分秒格式，如80转化成：00-01-20"><a href="#2-3-写一个函数，将秒转化成时分秒格式，如80转化成：00-01-20" class="headerlink" title="2.3. 写一个函数，将秒转化成时分秒格式，如80转化成：00:01:20"></a>2.3. 写一个函数，将秒转化成时分秒格式，如80转化成：00:01:20</h2><h1 id="3-翻译题"><a href="#3-翻译题" class="headerlink" title="3. 翻译题"></a>3. 翻译题</h1><blockquote><p>Aggregation operations process data records and return computed results. Aggregation operations group values from multiple documents together, and can perform a variety of operations on the grouped data to return a single result. MongoDB provides three ways to perform aggregation: the aggregation pipeline, the map-reduce function, and single purpose aggregation methods.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-问答题&quot;&gt;&lt;a href=&quot;#1-问答题&quot; class=&quot;headerlink&quot; title=&quot;1. 问答题&quot;&gt;&lt;/a&gt;1. 问答题&lt;/h1&gt;&lt;h2 id=&quot;1-1-HTML相关&quot;&gt;&lt;a href=&quot;#1-1-HTML相关&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="面试" scheme="https://wdd.js.org/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="笔试" scheme="https://wdd.js.org/tags/%E7%AC%94%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>PyMongo学习笔记</title>
    <link href="https://wdd.js.org/pymongo-tutorial-and-example.html"/>
    <id>https://wdd.js.org/pymongo-tutorial-and-example.html</id>
    <published>2018-02-22T08:32:39.000Z</published>
    <updated>2018-02-23T09:16:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-环境"><a href="#1-环境" class="headerlink" title="1. 环境"></a>1. 环境</h1><ul><li>mongodb 3.4</li><li>pymongo 3.6.0</li><li>macOS</li></ul><h1 id="2-安装pymongo"><a href="#2-安装pymongo" class="headerlink" title="2. 安装pymongo"></a>2. 安装pymongo</h1><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 <span class="keyword">install</span> pymongo</span><br></pre></td></tr></table></figure><h1 id="3-建立数据库链接"><a href="#3-建立数据库链接" class="headerlink" title="3. 建立数据库链接"></a>3. 建立数据库链接</h1><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"></span><br><span class="line">conn = MongoClient(<span class="string">'localhost'</span>, <span class="number">27017</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者 conn = MongoClient('mongodb://localhost:27017/')</span></span><br></pre></td></tr></table></figure><h1 id="4-获取数据库"><a href="#4-获取数据库" class="headerlink" title="4. 获取数据库"></a>4. 获取数据库</h1><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">db</span> = conn.db_name // 如果数据库不存在，则自动创建</span><br><span class="line"></span><br><span class="line"><span class="attr">db</span> = conn[<span class="string">'db-name'</span>] // 如果数据库名中有中划线，则需要使用中括号的形式</span><br></pre></td></tr></table></figure><h1 id="5-获取集合"><a href="#5-获取集合" class="headerlink" title="5. 获取集合"></a>5. 获取集合</h1><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">collection = db<span class="selector-class">.test_users</span> <span class="comment">// 如果集合不存在，则自动创建</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者 collection = db['test-users']</span></span><br></pre></td></tr></table></figure><p>注意：只有当数据库或者集合中有数据被插入时，集合才真正被创建。</p><blockquote><p>An important note about collections (and databases) in MongoDB is that they are created lazily - none of the above commands have actually performed any operations on the MongoDB server. Collections and databases are created when the first document is inserted into them.</p></blockquote><h1 id="6-插入单个文档-insert-one"><a href="#6-插入单个文档-insert-one" class="headerlink" title="6. 插入单个文档 insert_one"></a>6. 插入单个文档 insert_one</h1><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">post</span> = &#123;<span class="string">"name"</span>:<span class="string">"wangduanduan"</span>, <span class="string">"province"</span>:<span class="string">"shanghai"</span>, <span class="string">"age"</span>: 12&#125;</span><br><span class="line"><span class="keyword">db</span>.collection.inser_one(<span class="keyword">post</span>)</span><br><span class="line"></span><br><span class="line">5a8e90b83617b1a34a06d890 <span class="comment">// 插入成功后会返回ObjectId</span></span><br></pre></td></tr></table></figure><h1 id="7-查询一个文档-find-one"><a href="#7-查询一个文档-find-one" class="headerlink" title="7. 查询一个文档 find_one"></a>7. 查询一个文档 find_one</h1><p>如果你确定你的查询结果里只有一个，那么最好使用find_one来做查询</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">db</span>.find_one(&#123;<span class="string">"name"</span>:<span class="string">"wangduanduan"</span>&#125;)</span><br></pre></td></tr></table></figure><h1 id="8-按照ObjectId查询-ObjectId"><a href="#8-按照ObjectId查询-ObjectId" class="headerlink" title="8. 按照ObjectId查询 ObjectId()"></a>8. 按照ObjectId查询 ObjectId()</h1><p>ObjectId不是字符串，你绝对不能把它当做字符串来做查询，虽然它看起来像字符串。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good </span></span><br><span class="line"><span class="selector-tag">db</span><span class="selector-class">.find_one</span>(<span class="string">'_id'</span>: ObjectId(<span class="string">"5a8e82af3617b1a035d10264"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad 这是查不到结果的</span></span><br><span class="line"><span class="selector-tag">db</span><span class="selector-class">.find_one</span>(<span class="string">'_id'</span>: <span class="string">"5a8e82af3617b1a035d10264"</span>)</span><br></pre></td></tr></table></figure><h1 id="9-关于Unicode字符串的注意事项"><a href="#9-关于Unicode字符串的注意事项" class="headerlink" title="9. 关于Unicode字符串的注意事项"></a>9. 关于Unicode字符串的注意事项</h1><p>MongoDB使用<a href="http://bsonspec.org/" target="_blank" rel="noopener">BSON格式</a>来存储数据，而BSON是utf-8编码的，所以pymongo必须要确保字符串是utf-8格式的。</p><p><a href="http://docs.python.org/howto/unicode.html" target="_blank" rel="noopener">python3 unicode字符串深入阅读</a></p><h1 id="10-批量插入-insert-many"><a href="#10-批量插入-insert-many" class="headerlink" title="10. 批量插入 insert_many()"></a>10. 批量插入 insert_many()</h1><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db<span class="selector-class">.test_users</span><span class="selector-class">.insert_many</span>([user1, user2])</span><br><span class="line"></span><br><span class="line">[ObjectId1, ObjectId] <span class="comment">// 插入成功后会以数组形式返回ObjectId</span></span><br></pre></td></tr></table></figure><h1 id="11-条件查询-find"><a href="#11-条件查询-find" class="headerlink" title="11. 条件查询 find()"></a>11. 条件查询 find()</h1><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db<span class="selector-class">.test_users</span><span class="selector-class">.find</span>()</span><br><span class="line"><span class="comment">// 返回符合条件的集合</span></span><br></pre></td></tr></table></figure><h1 id="12-统计文档数量-count"><a href="#12-统计文档数量-count" class="headerlink" title="12. 统计文档数量 count()"></a>12. 统计文档数量 count()</h1><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db<span class="selector-class">.test_users</span><span class="selector-class">.find</span>().count()</span><br><span class="line"><span class="number">1</span> <span class="comment">// 返回文档的数量</span></span><br></pre></td></tr></table></figure><h1 id="13-范围查询"><a href="#13-范围查询" class="headerlink" title="13. 范围查询"></a>13. 范围查询</h1><p>返回查询如大于小于不能与之类的，MongoDB都是支持的，<a href="https://docs.mongodb.com/manual/reference/operator/" target="_blank" rel="noopener">详情参见</a></p><p>例如：查询日期小于2009年11月12号12点的文章，并按照作者排序<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d = datetime.datetime(<span class="number">2009</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">12</span>) <span class="comment">// </span></span><br><span class="line">posts.<span class="keyword">find</span>(&#123;<span class="string">"date"</span>: &#123;<span class="string">"$lt"</span>: d&#125;&#125;).<span class="keyword">sort</span>(<span class="string">"author"</span>)</span><br></pre></td></tr></table></figure></p><p>更多类似与<code>$lt</code>之类的用法，可以参考<a href="https://docs.mongodb.com/manual/reference/operator/query/" target="_blank" rel="noopener">Query and Projection Operators</a></p><h1 id="14-索引"><a href="#14-索引" class="headerlink" title="14. 索引"></a>14. 索引</h1><p>以user_id建立索引后，profiles集合就有两个索引了，因为MongoDB自带_id索引。</p><p>下面设置的user_id索引，并将其设置成唯一值。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = db.profiles.create_index([(<span class="string">'user_id'</span>, pymongo.ASCENDING)], unique=<span class="keyword">True</span>)</span><br><span class="line">sorted(list(db.profiles.index_information()))</span><br><span class="line">[<span class="string">u'_id_'</span>, <span class="string">u'user_id_1'</span>]</span><br></pre></td></tr></table></figure></p><p>如果插入重复的user_id，那么会插入不成功，这个功能可以避免数据重复。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; new_profile = &#123;<span class="string">'user_id'</span>: <span class="number">213</span>, <span class="string">'name'</span>: <span class="string">'Drew'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; duplicate_profile = &#123;<span class="string">'user_id'</span>: <span class="number">212</span>, <span class="string">'name'</span>: <span class="string">'Tommy'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; result = db.profiles.insert_one(new_profile)  <span class="comment"># This is fine.</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; result = db.profiles.insert_one(duplicate_profile)</span><br><span class="line">Traceback (most recent call last)<span class="symbol">:</span></span><br><span class="line"><span class="symbol">DuplicateKeyError:</span> E1100<span class="number">0</span> duplicate key error <span class="symbol">index:</span> test_database.profiles.$user_id_1 dup <span class="symbol">key:</span> &#123; : <span class="number">212</span> &#125;</span><br></pre></td></tr></table></figure><p>关于索引，可以参考<a href="https://docs.mongodb.com/manual/indexes/" target="_blank" rel="noopener">Indexes</a></p><h1 id="15-参考"><a href="#15-参考" class="headerlink" title="15. 参考"></a>15. 参考</h1><ul><li><a href="https://api.mongodb.com/python/current/" target="_blank" rel="noopener">PyMongo 3.6.0 Documentation</a></li><li><a href="https://docs.mongodb.com/manual/reference/method/ObjectId/" target="_blank" rel="noopener">ObjectId</a></li><li><a href="https://api.mongodb.com/python/current/api/pymongo/collection.html" target="_blank" rel="noopener">collection – Collection level operations</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-环境&quot;&gt;&lt;a href=&quot;#1-环境&quot; class=&quot;headerlink&quot; title=&quot;1. 环境&quot;&gt;&lt;/a&gt;1. 环境&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;mongodb 3.4&lt;/li&gt;
&lt;li&gt;pymongo 3.6.0&lt;/li&gt;
&lt;li&gt;macOS&lt;/li&gt;
      
    
    </summary>
    
    
      <category term="python" scheme="https://wdd.js.org/tags/python/"/>
    
      <category term="mongodb" scheme="https://wdd.js.org/tags/mongodb/"/>
    
      <category term="pymongo" scheme="https://wdd.js.org/tags/pymongo/"/>
    
  </entry>
  
  <entry>
    <title>Express 代理中间件的写法</title>
    <link href="https://wdd.js.org/express-proxy-middleware-demo.html"/>
    <id>https://wdd.js.org/express-proxy-middleware-demo.html</id>
    <published>2018-02-18T02:43:05.000Z</published>
    <updated>2018-02-18T03:04:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-配置文件写法"><a href="#1-配置文件写法" class="headerlink" title="1. 配置文件写法"></a>1. 配置文件写法</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// filename: config/default.js</span></span><br><span class="line"><span class="comment">// 开发环境配置文件</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="string">'ENV'</span>: <span class="string">'dev'</span>,</span><br><span class="line">  <span class="string">'PORT'</span>: <span class="string">'8088'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="string">'maxAge'</span>: <span class="number">10</span>,</span><br><span class="line">  proxyTable: &#123;</span><br><span class="line">    <span class="comment">// 这里是http代理</span></span><br><span class="line">    <span class="comment">// 含有路径重写功能</span></span><br><span class="line">    <span class="string">'/p/olap'</span>: &#123;</span><br><span class="line">      target: <span class="string">'http://192.168.40.231:30092'</span>,</span><br><span class="line">      pathRewrite: &#123;</span><br><span class="line">        <span class="string">'^/p/olap'</span>: <span class="string">'/olap'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 这里是http代理</span></span><br><span class="line">    <span class="comment">// 含有路径重写功能</span></span><br><span class="line">    <span class="string">'/p/qc'</span>: &#123;</span><br><span class="line">      target: <span class="string">'http://192.168.40.231:30088'</span>,</span><br><span class="line">      pathRewrite: &#123;</span><br><span class="line">        <span class="string">'^/p/qc'</span>: <span class="string">'/qc'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 这是WebSocket代理</span></span><br><span class="line">    <span class="string">'/mvc/stomp'</span>: &#123;</span><br><span class="line">      target: <span class="string">'http://192.168.40.231:30412'</span>,</span><br><span class="line">      changeOrigin: <span class="literal">true</span>,</span><br><span class="line">      ws: <span class="literal">true</span>,</span><br><span class="line">      logLevel: <span class="string">'debug'</span>,</span><br><span class="line">      onError: <span class="function"><span class="keyword">function</span> (<span class="params">err, req, res</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Something went wrong. And we are reporting a custom error message.'</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line"></span><br><span class="line">        res.writeHead(<span class="number">500</span>, &#123;</span><br><span class="line">          <span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span></span><br><span class="line">        &#125;)</span><br><span class="line">        res.end(<span class="string">'Something went wrong. And we are reporting a custom error message.'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-app-js写法"><a href="#2-app-js写法" class="headerlink" title="2. app.js写法"></a>2. app.js写法</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="keyword">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">var</span> compression = <span class="keyword">require</span>(<span class="string">'compression'</span>)</span><br><span class="line"><span class="keyword">var</span> path = <span class="keyword">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// config会根据NODE_ENV环境变量自动去读取config目录下的文件，默认读取的default.js文件</span></span><br><span class="line"><span class="comment">// 你可以在config目录下设置production.js, test.js等配置文件</span></span><br><span class="line"><span class="keyword">var</span> config = <span class="keyword">require</span>(<span class="string">'config'</span>)</span><br><span class="line"><span class="keyword">var</span> proxyMiddleware = <span class="keyword">require</span>(<span class="string">'http-proxy-middleware'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里可以获取到配置文件的proxyTable</span></span><br><span class="line"><span class="keyword">var</span> proxyTable = config.get(<span class="string">'proxyTable'</span>)</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里是要点</span></span><br><span class="line"><span class="comment">// 遍历proxyTable，将配置文件中的路径挂载到app上</span></span><br><span class="line">Object.keys(proxyTable).<span class="keyword">forEach</span>(<span class="function"><span class="keyword">function</span> <span class="params">(context)</span> </span>&#123;</span><br><span class="line">  app.<span class="keyword">use</span>(proxyMiddleware(context, proxyTable[context]))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">module.exports = app</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-配置文件写法&quot;&gt;&lt;a href=&quot;#1-配置文件写法&quot; class=&quot;headerlink&quot; title=&quot;1. 配置文件写法&quot;&gt;&lt;/a&gt;1. 配置文件写法&lt;/h1&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr
      
    
    </summary>
    
    
      <category term="proxy" scheme="https://wdd.js.org/tags/proxy/"/>
    
      <category term="http" scheme="https://wdd.js.org/tags/http/"/>
    
      <category term="Express" scheme="https://wdd.js.org/tags/Express/"/>
    
  </entry>
  
  <entry>
    <title>small is better than big 我的读书方法论</title>
    <link href="https://wdd.js.org/small-is-better-than-big.html"/>
    <id>https://wdd.js.org/small-is-better-than-big.html</id>
    <published>2018-02-13T06:57:23.000Z</published>
    <updated>2018-02-13T08:03:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="床底下秘密"><a href="#床底下秘密" class="headerlink" title="床底下秘密"></a>床底下秘密</h1><p>我是一个毅力不是很够的人。我曾经下定决心要锻炼身体，买了一些健身器材，例如瑜伽垫，仰卧起坐的器材，俯卧撑的器材。然而三分钟的热度过后，我把瑜伽垫卷了起来，塞到床底下。把仰卧起坐的器材拆开，也塞到了床底下。</p><p>所以每次我都不敢看床底下，那里塞满了我的羞愧。我常常想，我这不就是永远睡在羞愧之上吗？</p><p><code>那么，是什么让我放弃了自己的目标，慢慢活成了自己讨厌的样子呢？</code></p><p>之前和朋友聊天，我们有一段时间没见了。我突然觉得他也太能聊了，说了很多我不知道的新鲜事，还有一些可以让人茅塞顿开的想法。完了之后，他劝我让我多读书。我觉得这个想法很多。我是确实需要读书了。毕竟我的床底下已经没有空间再塞其他的东西了。</p><p>于是我在多看阅读上买了一下电子书，在京东上买了一些实体书，然后又买了一个kindle。在读书的过程中，有时候作者也会推荐你看一些其他的书。我给自己定了<a href="https://wdd.js.org/2018-reading-plan.html">2018年我的阅读计划</a>，给自己定下要看哪些书。</p><h1 id="看书的方法"><a href="#看书的方法" class="headerlink" title="看书的方法"></a>看书的方法</h1><p>当我决定要看书，并且为此付出了不少的金钱的情况下。我是非常不愿因让我的金钱的付出白白打水漂的，毕竟买书以及买设备，这不是免费的服务。于是我给自己指定了一个非常完善的定量阅读标准</p><p>读书方法v1.0.0 版 如下</p><ul><li>每天至少看三本书</li><li>每本书看50页</li></ul><p>人要有标准才能判断是否达标，没有标准，没有数字化的支撑，那是很难以持续的。比如说中国的菜谱，做某道菜中写了一句：<code>加入少许盐</code>。中国人看了会想，那我就按照口味随便加点盐吧。外国人就会被搞得非常迷糊，少许是多少克盐？ 20g, 30g? 完全没有标准嘛。</p><p>按照读书方法 v1.0.0版，我看了几天，这个效果是很好的。但是我很累，电子书50页可不是个小数目。有时候很难完成的。于是我必须要升级我的读书方法。</p><p>读书方法v1.0.1 版 如下</p><ul><li>每天至少看三本书</li><li>每本书看10页</li></ul><p>按照读书方法v1.0.1 版，我看了几天，虽然读书的进度很慢，但是我很容易有满足感，因为这个目标是很容易就达成的。因为你随便去上个厕所，看个10页电子书也是绰绰有余的。但是这个版本也有个问题。</p><ul><li>如果我今天看的这本书看的流连忘返，一不小心忘记看页码了，居然不知不觉读了38页，那么是不是已经消耗了未来几天的阅读量呢，明天这本书要不要度呢？</li></ul><p>所以，我要升级我的读书方法。</p><p>读书方法v1.0.2版：</p><ul><li>每天至少读三本书</li><li>每本书至少读10页</li></ul><p>我按照这个方法，感觉做的不错。每天都有一定的阅读量要看，而且阅读量不是很大，不会让我觉得很累。而且当我完成了这个目标，我是会获得不小的满足感。</p><p>大目标分解成小目标去逐个击破，这是我这篇文章的核心观点。</p><h1 id="冲量公式-I-F-x-T"><a href="#冲量公式-I-F-x-T" class="headerlink" title="冲量公式 I = F x T"></a>冲量公式 I = F x T</h1><blockquote><p>冲量是力的时间累积效应的量度，是矢量。如果物体所受的力是大小和方向都不变的恒力F，冲量I就是F和作用时间t的乘积。<br>冲量是描述力对物体作用的时间累积效应的物理量。力的冲量是一个过程量。在谈及冲量时，必须明确是哪个力在哪段时间上的冲量。</p></blockquote><p>个人好习惯的养成，不是一蹴而就的，而是类似于物理学冲量的概念：力在一段时间内的累积，是过程量</p><p>三分钟的热度对应的冲量：I = F_max x T_min。使用很大的力，作用时间超短，基本上没啥效果，冲量趋近于零。</p><p>微习惯对应的冲量：I = F_min x T_max。使用很小的力，做长时间的积累。冲量不会趋近于零，而是会慢慢增长，然后趋近于一个稳定水平。比如你给自己规定每天看1页书，但是大多数情况下，如果你做了看书的动作，基本上你看书的页数一定会大于1页。</p><h1 id="看什么样的书"><a href="#看什么样的书" class="headerlink" title="看什么样的书"></a>看什么样的书</h1><p>我自己喜欢看计算机，心理学，历史人文方面的出版书籍。而我的选择标准有两个，符合任一一个，我都会去看。</p><ol><li>要有用。无论是对我的专业知识，还是对人际交往，金融理财等方面要用有益之处</li><li>要有趣。没趣的书我是断然不会去看的。</li></ol><p>读书实际上是读人，一流作家写的一流的书，三流作家只能写出九流的书。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;床底下秘密&quot;&gt;&lt;a href=&quot;#床底下秘密&quot; class=&quot;headerlink&quot; title=&quot;床底下秘密&quot;&gt;&lt;/a&gt;床底下秘密&lt;/h1&gt;&lt;p&gt;我是一个毅力不是很够的人。我曾经下定决心要锻炼身体，买了一些健身器材，例如瑜伽垫，仰卧起坐的器材，俯卧撑的器材。然而
      
    
    </summary>
    
    
      <category term="读书" scheme="https://wdd.js.org/tags/%E8%AF%BB%E4%B9%A6/"/>
    
      <category term="思想者" scheme="https://wdd.js.org/tags/%E6%80%9D%E6%83%B3%E8%80%85/"/>
    
      <category term="微习惯" scheme="https://wdd.js.org/tags/%E5%BE%AE%E4%B9%A0%E6%83%AF/"/>
    
  </entry>
  
  <entry>
    <title>vscode控制字符引起的问题以及解决思路</title>
    <link href="https://wdd.js.org/vscode-control-characters-problem.html"/>
    <id>https://wdd.js.org/vscode-control-characters-problem.html</id>
    <published>2018-02-11T09:48:41.000Z</published>
    <updated>2018-02-11T16:17:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-环境"><a href="#1-环境" class="headerlink" title="1. 环境"></a>1. 环境</h1><ul><li>macOS Sierra 10.12.5</li><li>vscode  1.20.0 最新版</li></ul><h1 id="2-如何重现这个问题"><a href="#2-如何重现这个问题" class="headerlink" title="2. 如何重现这个问题"></a>2. 如何重现这个问题</h1><p>在使用中文输入法输入中文的时候，一直按后退键，例如输入<code>sfsf</code>，当你按了4下后退键时，你会发现，搜狗输入法弹出框虽然消失了，但是页面上还会剩下一个<code>s</code>, 这是你如何再次按一下后退的话，<code>s</code>就会变成<code>bs</code>, 变成隐藏字符。这个一般是右边有markdown渲染插件时才会出现。</p><p>从更确切的角度说，是你的编辑器一旦开了webview，就会出现这个问题，即使是vscode的欢迎页，也是webview，也会导致这个问题。所以最好在写代码时尽量关闭webview。</p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180211232544_7L7Ra6_Jietu20180211-232450.jpeg" alt=""></p><h1 id="3-如何让隐藏字符现身"><a href="#3-如何让隐藏字符现身" class="headerlink" title="3. 如何让隐藏字符现身"></a>3. 如何让隐藏字符现身</h1><p>Mac版的vscode控制字符一般是不会显示出来的，可以用一下的方法让其显示出来</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"editor.renderControlCharacters"</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>在编辑器中显示的像很小的<code>BS</code>, 表示backspace的意思。一般是在输入时，按了后退或者删除会偶尔出现这个字符。</p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180211175234_yzJFjc_Jietu20180211-175225.jpeg" alt=""></p><h1 id="4-隐藏的控制字符会出现什么问题？"><a href="#4-隐藏的控制字符会出现什么问题？" class="headerlink" title="4. 隐藏的控制字符会出现什么问题？"></a>4. 隐藏的控制字符会出现什么问题？</h1><h2 id="4-1-控制字符在github上会出现问号"><a href="#4-1-控制字符在github上会出现问号" class="headerlink" title="4.1. 控制字符在github上会出现问号"></a>4.1. 控制字符在github上会出现问号</h2><p>例如下图的的和同字之间就是出现一个隐藏字符，在github上就会出现一个带有背景的问号。</p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180211180035_gpDDju_Jietu20180211-175923s.jpeg" alt=""></p><h2 id="4-2-控制字符在Hexo-NexT-Local-Search-会导致search-xml渲染失败，搜索框一直在转圈"><a href="#4-2-控制字符在Hexo-NexT-Local-Search-会导致search-xml渲染失败，搜索框一直在转圈" class="headerlink" title="4.2. 控制字符在Hexo NexT Local Search 会导致search.xml渲染失败，搜索框一直在转圈"></a>4.2. 控制字符在Hexo NexT Local Search 会导致search.xml渲染失败，搜索框一直在转圈</h2><p>如果你使用浏览器打开search.xml，会发现解析报错</p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180211180331_Xr4FXL_Jietu20180211-180320.jpeg" alt=""></p><h1 id="5-如何解决"><a href="#5-如何解决" class="headerlink" title="5. 如何解决"></a>5. 如何解决</h1><h2 id="5-1-手动删除隐藏字符"><a href="#5-1-手动删除隐藏字符" class="headerlink" title="5.1. 手动删除隐藏字符"></a>5.1. 手动删除隐藏字符</h2><p>可以使用替换，先复制一个隐藏字符，然后把隐藏字符替换成空</p><h2 id="5-2-使用插件-Remove-backspace-control-character"><a href="#5-2-使用插件-Remove-backspace-control-character" class="headerlink" title="5.2. 使用插件 Remove backspace control character"></a>5.2. 使用插件 Remove backspace control character</h2><p><a href="https://marketplace.visualstudio.com/items?itemName=satokaz.vscode-bs-ctrlchar-remover" target="_blank" rel="noopener">Remove backspace control character</a></p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180211181051_MzYF2H_Jietu20180211-181045.jpeg" alt=""></p><p>在本家chromium已被合并，因此，在8月上旬发行的vscode 1.15将会重新确定(vscode 1.15, electron 1.7.4)。<code>事实上，到现在这个问题还是没解决的</code></p><p><strong>特点</strong></p><p>格式化程序，用于删除打开的文档中包含的控制字符。要被删除的控制字符默认如下。</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/<span class="string">[\u0000]</span>|<span class="string">[\u0001]</span>|<span class="string">[\u0002]</span>|<span class="string">[\u0003]</span>|<span class="string">[\u0004]</span>|<span class="string">[\u0005]</span>|<span class="string">[\u0006]</span>|<span class="string">[\u0007]</span>|<span class="string">[\u0008]</span>|<span class="string">[\u000b]</span>|<span class="string">[\u000c]</span>|<span class="string">[\u000d]</span>|<span class="string">[\u000e]</span>|<span class="string">[\u000f]</span>|<span class="string">[\u0010]</span>|<span class="string">[\u0011]</span>|<span class="string">[\u0012]</span>|<span class="string">[\u0013]</span>|<span class="string">[\u0014]</span>|<span class="string">[\u0015]</span>|<span class="string">[\u0016]</span>|<span class="string">[\u0017]</span>|<span class="string">[\u0018]</span>|<span class="string">[\u0019]</span>|<span class="string">[\u001a]</span>|<span class="string">[\u001b]</span>|<span class="string">[\u001c]</span>|<span class="string">[\u001d]</span>|<span class="string">[\u001e]</span>|<span class="string">[\u001f]</span>|<span class="string">[\u001c]</span>|<span class="string">[\u007f]</span>/gm</span><br></pre></td></tr></table></figure><p><strong>用法</strong></p><ul><li>“editor.formatOnSave”: true 如果被设定,保存时启动</li><li>“editor.formatOnType”: true 在被设定的情况下，进行变换时;输入时启动</li></ul><h2 id="5-3-坐等官方给出更好的解决方案"><a href="#5-3-坐等官方给出更好的解决方案" class="headerlink" title="5.3. 坐等官方给出更好的解决方案"></a>5.3. 坐等官方给出更好的解决方案</h2><p>官方这个bug依然还是<code>open</code>状态。<a href="https://github.com/Microsoft/vscode/issues/37114" target="_blank" rel="noopener">Using IME with markdown preview enabled, press ESC/BACKSPACE leads in control characters #37114</a></p><h2 id="5-4-关闭所有webview"><a href="#5-4-关闭所有webview" class="headerlink" title="5.4. 关闭所有webview"></a>5.4. 关闭所有webview</h2><p>这个问题一般出现在标签页含有webview时发生，所以在升级到vscode最新版后，在写代码时要注意，不要开启任何有webview的标签页，其中包括</p><ul><li>关闭markdown渲染插件实时渲染的功能</li><li>关闭vscode欢迎页标签页</li></ul><h1 id="6-为什么官方不直接解决这个问题？"><a href="#6-为什么官方不直接解决这个问题？" class="headerlink" title="6. 为什么官方不直接解决这个问题？"></a>6. 为什么官方不直接解决这个问题？</h1><ul><li><p>vscode底层使用了electron，这是<code>electron</code>的<a href="https://github.com/electron/electron/issues/9173" target="_blank" rel="noopener">Backspace can not erase the last one character during Japanese IME conversion (macOS) #9173</a>bug, electron不解决这个问题，vscode就不会解决。</p></li><li><p>electron底层使用了chromium， 这是<code>chromium</code>的<a href="https://bugs.chromium.org/p/chromium/issues/detail?id=714771" target="_blank" rel="noopener">Two backspaces required to delete last character in webview input</a>bug, chromium不解决，elctron就无法解决。</p></li><li><p>综上，截止文章写出之时，这个问题依然没解决。</p></li></ul><h1 id="7-参考"><a href="#7-参考" class="headerlink" title="7. 参考"></a>7. 参考</h1><ul><li><a href="https://www.zhihu.com/question/61638859" target="_blank" rel="noopener">Mac 上的 VSCode 编写 Markdown 总是出现隐藏字符？</a></li><li><a href="https://www.v2ex.com/t/298727" target="_blank" rel="noopener">Hexo next 主题的 local search 功能失效，点击搜索链接无法弹出叠加层</a></li><li><a href="https://github.com/Microsoft/vscode/issues/24981" target="_blank" rel="noopener">Backspace can not erase the last one character during Chinese/Japanese IME conversion (macOS) #24981</a></li><li><a href="https://github.com/electron/electron/issues/9173" target="_blank" rel="noopener">Backspace can not erase the last one character during Japanese IME conversion (macOS) #9173</a></li><li><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=714771" target="_blank" rel="noopener">Two backspaces required to delete last character in webview input</a></li><li><a href="https://zh.wikipedia.org/wiki/%E6%8E%A7%E5%88%B6%E5%AD%97%E7%AC%A6" target="_blank" rel="noopener">控制字符</a></li><li><a href="https://github.com/Microsoft/vscode/issues/37114" target="_blank" rel="noopener">Using IME with markdown preview enabled, press ESC/BACKSPACE leads in control characters #37114</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-环境&quot;&gt;&lt;a href=&quot;#1-环境&quot; class=&quot;headerlink&quot; title=&quot;1. 环境&quot;&gt;&lt;/a&gt;1. 环境&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;macOS Sierra 10.12.5&lt;/li&gt;
&lt;li&gt;vscode  1.20.0 最新版&lt;/li&gt;

      
    
    </summary>
    
    
      <category term="vscode" scheme="https://wdd.js.org/tags/vscode/"/>
    
      <category term="控制字符" scheme="https://wdd.js.org/tags/%E6%8E%A7%E5%88%B6%E5%AD%97%E7%AC%A6/"/>
    
      <category term="Local Search 解析失败" scheme="https://wdd.js.org/tags/Local-Search-%E8%A7%A3%E6%9E%90%E5%A4%B1%E8%B4%A5/"/>
    
  </entry>
  
  <entry>
    <title>VI必备常用场景快捷操作</title>
    <link href="https://wdd.js.org/vi-useful-expressions.html"/>
    <id>https://wdd.js.org/vi-useful-expressions.html</id>
    <published>2018-02-11T07:37:33.000Z</published>
    <updated>2018-02-11T09:11:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-【字符串替换】快速修改配置文件版本号"><a href="#1-【字符串替换】快速修改配置文件版本号" class="headerlink" title="1. 【字符串替换】快速修改配置文件版本号"></a>1. 【字符串替换】快速修改配置文件版本号</h1><p>语法：<code>%s/str1/str2/g</code> 将文件中所有的str1字符串替换成str2字符串。</p><p>示例：某个服务从43版本升级到44版本</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span> vi某个配置文件， 进入vi命令模式，输入</span><br><span class="line">:%s<span class="regexp">/43/</span><span class="number">44</span><span class="regexp">/g</span></span><br></pre></td></tr></table></figure><p>这样做的好处是不需要移动光标去查找，然后进入插入模式去修改版本，而是直接替换，这样比较快捷。</p><p>注意：<code>务必确认要被替换的字符串只有一个，否则可能造成误替换。</code></p><p>更多用法：</p><table><thead><tr><th>语法</th><th>功能</th><th>示例</th></tr></thead><tbody><tr><td><code>:s/str1/str2/</code></td><td>替换当前行<code>第一个</code>str1为str2</td><td><code>:s/44/45</code></td></tr><tr><td><code>:s/str1/str2/g</code></td><td>替换当前行<code>所有的</code>str1为str2</td><td><code>:s/44/45/g</code></td></tr><tr><td><code>:%s/str1/str2/</code></td><td>替换每一行<code>第一个</code>str1为str2</td><td><code>:%s/44/45</code></td></tr><tr><td><code>:%s/str1/str2/g</code></td><td>替换每一行<code>所有的</code>str1为str2</td><td><code>:%s/44/45/g</code></td></tr></tbody></table><h1 id="2-光标移动"><a href="#2-光标移动" class="headerlink" title="2. 光标移动"></a>2. 光标移动</h1><p>注意：可配合 <code>:set nu</code>显示行号</p><table><thead><tr><th>语法</th><th>功能</th><th>示例</th></tr></thead><tbody><tr><td>G</td><td>移动到这个档案的最后一行(常用)</td><td></td></tr><tr><td>nG</td><td>n 为数字。移动到这个档案的第 n 行。</td><td>20G 则会移动到这个档案的第20行</td></tr><tr><td>gg</td><td>移动到这个档案的第一行</td><td></td></tr><tr><td><code>n&lt;Enter&gt;</code></td><td>n 为数字 光标向下移动 n 行</td><td><code>3&lt;Enter&gt;</code> 向下移动三行</td></tr></tbody></table><h1 id="3-vi快捷手册"><a href="#3-vi快捷手册" class="headerlink" title="3. vi快捷手册"></a>3. vi快捷手册</h1><p><img src="http://p3alsaatj.bkt.clouddn.com/20180211161542_xzqVSU_vi-vim-cheat-sheet.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-【字符串替换】快速修改配置文件版本号&quot;&gt;&lt;a href=&quot;#1-【字符串替换】快速修改配置文件版本号&quot; class=&quot;headerlink&quot; title=&quot;1. 【字符串替换】快速修改配置文件版本号&quot;&gt;&lt;/a&gt;1. 【字符串替换】快速修改配置文件版本号&lt;/h1
      
    
    </summary>
    
    
      <category term="vi" scheme="https://wdd.js.org/tags/vi/"/>
    
  </entry>
  
  <entry>
    <title>xmysql 一行命令从任何mysql数据库生成REST API</title>
    <link href="https://wdd.js.org/readme-of-xmysql.html"/>
    <id>https://wdd.js.org/readme-of-xmysql.html</id>
    <published>2018-02-11T06:50:29.000Z</published>
    <updated>2018-02-11T06:51:19.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>github向我推荐这个<a href="https://github.com/o1lab/xmysql" target="_blank" rel="noopener">xmysql</a>时候，我瞟了一眼它的简介<code>One command to generate REST APIs for any MySql Database</code>, 说实话这个介绍让我眼前一亮，想想每次向后端的同学要个接口的时候，他们总是要<code>哼哧哼哧</code>搞个半天给才能我。抱着试试看的心态，我试用了一个疗程，oh不是， 是安装并使用了一下。 说实话，体验是蛮不错的，但是体验一把过后，我想不到这个工具的使用场景，因为<code>你不可能把数据库的所有表都公开出来，让前端随意读写,</code> 但是试试看总是不错的.</p></blockquote><h1 id="1-来吧，冒险一次！"><a href="#1-来吧，冒险一次！" class="headerlink" title="1 来吧，冒险一次！"></a>1 来吧，冒险一次！</h1><p><img src="http://p3alsaatj.bkt.clouddn.com/20180211145108_PKYPlv_Screenshot.jpeg" alt=""></p><p><code>安装与使用</code><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> -g xmysql</span><br><span class="line"></span><br><span class="line">xmysql -h localhost -u mysqlUsername -p mysqlPassword -d databaseName</span><br><span class="line"></span><br><span class="line">浏览器打开：<span class="keyword">http</span>://localhost:<span class="number">3000</span>， 应该可以看到一堆<span class="keyword">json</span></span><br></pre></td></tr></table></figure></p><h1 id="2-特点"><a href="#2-特点" class="headerlink" title="2 特点"></a>2 特点</h1><ul><li>产生REST Api从任何mysql 数据库 🔥🔥</li><li>无论主键，外键，表等的命名规则如何，都提供API 🔥🔥</li><li>支持复合主键 🔥🔥</li><li>REST API通常使用：CRUD，List，FindOne，Count，Exists，Distinct<br>批量插入，批量删除，批量读取 🔥</li><li>关联表</li><li>翻页</li><li>排序</li><li>按字段过滤 🔥</li><li>行过滤 🔥</li><li>综合功能</li><li>Group By, Having (as query params) 🔥🔥</li><li>Group By, Having (as a separate API) 🔥🔥</li><li>Multiple group by in one API 🔥🔥🔥🔥</li><li>Chart API for numeric column 🔥🔥🔥🔥🔥🔥</li><li>Auto Chart API - (a gift for lazy while prototyping) 🔥🔥🔥🔥🔥🔥</li><li>XJOIN - (Supports any number of JOINS) 🔥🔥🔥🔥🔥🔥🔥🔥🔥</li><li>Supports views</li><li>Prototyping (features available when using local MySql server only)</li><li>Run dynamic queries 🔥🔥🔥</li><li>Upload single file</li><li>Upload multiple files</li><li>Download file</li></ul><h1 id="3-API-概览"><a href="#3-API-概览" class="headerlink" title="3 API 概览"></a>3 API 概览</h1><table><thead><tr><th>HTTP Type</th><th>API URL</th><th>Comments</th></tr></thead><tbody><tr><td>GET</td><td>/</td><td>Gets all REST APIs</td></tr><tr><td>GET</td><td>/api/tableName</td><td>Lists rows of table</td></tr><tr><td>POST</td><td>/api/tableName</td><td>Create a new row</td></tr><tr><td>PUT</td><td>/api/tableName</td><td>Replaces existing row with new row</td></tr><tr><td>POST :fire:</td><td>/api/tableName/bulk</td><td>Create multiple rows - send object array in request body</td></tr><tr><td>GET  :fire:</td><td>/api/tableName/bulk</td><td>Lists multiple rows - /api/tableName/bulk?_ids=1,2,3</td></tr><tr><td>DELETE :fire:</td><td>/api/tableName/bulk</td><td>Deletes multiple rows - /api/tableName/bulk?_ids=1,2,3</td></tr><tr><td>GET</td><td>/api/tableName/:id</td><td>Retrieves a row by primary key</td></tr><tr><td>PATCH</td><td>/api/tableName/:id</td><td>Updates row element by primary key</td></tr><tr><td>DELETE</td><td>/api/tableName/:id</td><td>Delete a row by primary key</td></tr><tr><td>GET</td><td>/api/tableName/findOne</td><td>Works as list but gets single record matching criteria</td></tr><tr><td>GET</td><td>/api/tableName/count</td><td>Count number of rows in a table</td></tr><tr><td>GET</td><td>/api/tableName/distinct</td><td>Distinct row(s) in table - /api/tableName/distinct?_fields=col1</td></tr><tr><td>GET</td><td>/api/tableName/:id/exists</td><td>True or false whether a row exists or not</td></tr><tr><td>GET</td><td><a href="#relational-tables">/api/parentTable/:id/childTable</a></td><td>Get list of child table rows with parent table foreign key</td></tr><tr><td>GET :fire:</td><td><a href="#aggregate-functions">/api/tableName/aggregate</a></td><td>Aggregate results of numeric column(s)</td></tr><tr><td>GET :fire:</td><td><a href="#group-by-having-as-api">/api/tableName/groupby</a></td><td>Group by results of column(s)</td></tr><tr><td>GET :fire:</td><td><a href="#union-of-multiple-group-by-statements">/api/tableName/ugroupby</a></td><td>Multiple group by results using one call</td></tr><tr><td>GET :fire:</td><td><a href="#chart">/api/tableName/chart</a></td><td>Numeric column distribution based on (min,max,step) or(step array) or (automagic)</td></tr><tr><td>GET :fire:</td><td><a href="#autochart">/api/tableName/autochart</a></td><td>Same as Chart but identifies which are numeric column automatically - gift for lazy while prototyping</td></tr><tr><td>GET :fire:</td><td><a href="#xjoin">/api/xjoin</a></td><td>handles join</td></tr><tr><td>GET :fire:</td><td><a href="#run-dynamic-queries">/dynamic</a></td><td>execute dynamic mysql statements with params</td></tr><tr><td>GET :fire:</td><td><a href="#upload-single-file">/upload</a></td><td>upload single file</td></tr><tr><td>GET :fire:</td><td><a href="#upload-multiple-files">/uploads</a></td><td>upload multiple files</td></tr><tr><td>GET :fire:</td><td><a href="#download-file">/download</a></td><td>download a file</td></tr><tr><td>GET</td><td>/api/tableName/describe</td><td>describe each table for its columns</td></tr><tr><td>GET</td><td>/api/tables</td><td>get all tables in database</td></tr></tbody></table><h1 id="3-更多资料"><a href="#3-更多资料" class="headerlink" title="3 更多资料"></a>3 更多资料</h1><ul><li>项目地址：<a href="https://github.com/o1lab/xmysql" target="_blank" rel="noopener">https://github.com/o1lab/xmysql</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;github向我推荐这个&lt;a href=&quot;https://github.com/o1lab/xmysql&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;xmysql&lt;/a&gt;时候，我瞟了一眼它的简介&lt;code&gt;One command
      
    
    </summary>
    
    
      <category term="mysql" scheme="https://wdd.js.org/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>如何在vscode中用standard style 风格去验证 vue文件</title>
    <link href="https://wdd.js.org/vscode-lint-vue-file-by-standard-style.html"/>
    <id>https://wdd.js.org/vscode-lint-vue-file-by-standard-style.html</id>
    <published>2018-02-11T06:48:14.000Z</published>
    <updated>2018-02-11T06:49:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-JavaScript-Standard-Style简介"><a href="#1-JavaScript-Standard-Style简介" class="headerlink" title="1 JavaScript Standard Style简介"></a>1 JavaScript Standard Style简介</h1><p>本工具通过以下三种方式为你（及你的团队）节省大量时间：</p><ul><li>无须配置。 史上最便捷的统一代码风格的方式，轻松拥有。</li><li>自动代码格式化。 只需运行 standard –fix 从此和脏乱差的代码说再见。</li><li>提前发现风格及程序问题。 减少代码审查过程中反反复复的修改过程，节约时间。</li><li>无须犹豫。再也不用维护 .eslintrc, .jshintrc, or .jscsrc 。开箱即用。</li></ul><p>安装：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="selector-tag">i</span> standard -g</span><br></pre></td></tr></table></figure></p><p>关于<a href="https://standardjs.com/readme-zhcn.html" target="_blank" rel="noopener">JavaScript 代码规范</a>, 你可以点击链接看一下。</p><h1 id="2-如何在vscode中用JavaScript-Standard-Style风格去验证-vue文件"><a href="#2-如何在vscode中用JavaScript-Standard-Style风格去验证-vue文件" class="headerlink" title="2 如何在vscode中用JavaScript Standard Style风格去验证 vue文件"></a>2 如何在vscode中用JavaScript Standard Style风格去验证 vue文件</h1><p>实际上<a href="https://marketplace.visualstudio.com/items?itemName=chenxsan.vscode-standardjs" target="_blank" rel="noopener">JavaScript Standard Style</a>有一个FAQ, 说明了如何使用。</p><p>但是有一点非常重要的作者没有提到，就是<code>eslint-plugin-html这个插件必须要安装3.x.x版本的</code>, 现在<code>eslint-plugin-html</code>, 已经升级到4.x版本，默认不写版本号安装的就是4.x版本的，所以会出现问题。<a href="https://github.com/BenoitZugmeyer/eslint-plugin-html/issues/60" target="_blank" rel="noopener">参考</a></p><blockquote><p>ESLint v4 is only supported by eslint-plugin-html v3, so you can’t use eslint-plugin-html v1.5.2 with it (I should add a warning about this when trying to use the plugin with an incompatible version on ESLint).</p><p>If you do not use ESLint v4, please provide more information (package.json, a gist to reproduce, …)</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// FAQ</span><br><span class="line">How to lint script tag in vue or html files?</span><br><span class="line"></span><br><span class="line">You can lint them with eslint-plugin-html, just <span class="keyword">install</span> it <span class="keyword">first</span>, <span class="keyword">then</span> <span class="keyword">enable</span> linting <span class="keyword">for</span> those <span class="keyword">file</span> types <span class="keyword">in</span> settings.json <span class="keyword">with</span>:</span><br><span class="line"></span><br><span class="line"> <span class="string">"standard.validate"</span>: [</span><br><span class="line">     <span class="string">"javascript"</span>,</span><br><span class="line">     <span class="string">"javascriptreact"</span>,</span><br><span class="line">     <span class="string">"html"</span></span><br><span class="line"> ],</span><br><span class="line"> <span class="string">"standard.options"</span>: &#123;</span><br><span class="line">     <span class="string">"plugins"</span>: [<span class="string">"html"</span>]</span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="string">"files.associations"</span>: &#123;</span><br><span class="line">     <span class="string">"*.vue"</span>: <span class="string">"html"</span></span><br><span class="line"> &#125;,</span><br><span class="line"><span class="keyword">If</span> you want <span class="keyword">to</span> <span class="keyword">enable</span> autoFix <span class="keyword">for</span> the <span class="keyword">new</span> languages, you should <span class="keyword">enable</span> it yourself:</span><br><span class="line"></span><br><span class="line"> <span class="string">"standard.validate"</span>: [</span><br><span class="line">     <span class="string">"javascript"</span>,</span><br><span class="line">     <span class="string">"javascriptreact"</span>,</span><br><span class="line">     &#123; <span class="string">"language"</span>: <span class="string">"html"</span>, <span class="string">"autoFix"</span>: <span class="literal">true</span> &#125;</span><br><span class="line"> ],</span><br><span class="line"> <span class="string">"standard.options"</span>: &#123;</span><br><span class="line">     <span class="string">"plugins"</span>: [<span class="string">"html"</span>]</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h1 id="3-综上，-整理一下安装思路"><a href="#3-综上，-整理一下安装思路" class="headerlink" title="3 综上， 整理一下安装思路"></a>3 综上， 整理一下安装思路</h1><h2 id="3-1-需要安装哪些包？"><a href="#3-1-需要安装哪些包？" class="headerlink" title="3.1 需要安装哪些包？"></a>3.1 需要安装哪些包？</h2><ul><li><code>npm i -g standard</code></li><li><code>npm i -g eslint-plugin-html@3.2.2</code> 必须是3x版本</li><li><code>npm i -g eslint</code><br>以上三个包都是全局安装的，如果你想看看全局安装了哪些包可以用<code>npm list -g --depth=0</code>查看</li></ul><h2 id="3-2-vscode-config-如何写？"><a href="#3-2-vscode-config-如何写？" class="headerlink" title="3.2 vscode config 如何写？"></a>3.2 vscode config 如何写？</h2><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"standard.validate"</span>: [</span><br><span class="line">  <span class="string">"javascript"</span>,</span><br><span class="line">  <span class="string">"javascriptreact"</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"language"</span>: <span class="string">"html"</span>,</span><br><span class="line">    <span class="string">"autoFix"</span>: true</span><br><span class="line">  &#125;</span><br><span class="line">],</span><br><span class="line"><span class="string">"standard.options"</span>: &#123;</span><br><span class="line">  <span class="string">"plugin"</span>: [<span class="string">"html"</span>]</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"files.associations"</span>: &#123;</span><br><span class="line">  <span class="string">"*.vue"</span>: <span class="string">"html"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="3-3-如何在保存文件时，自动使用standard格式化vue文件"><a href="#3-3-如何在保存文件时，自动使用standard格式化vue文件" class="headerlink" title="3.3 如何在保存文件时，自动使用standard格式化vue文件"></a>3.3 如何在保存文件时，自动使用standard格式化vue文件</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"standard.autoFixOnSave"</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="4-如果还不行怎么办？"><a href="#4-如果还不行怎么办？" class="headerlink" title="4. 如果还不行怎么办？"></a>4. 如果还不行怎么办？</h2><ol><li>重启一下vscode</li><li>重启一下电脑</li><li>在此文后追加评论</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-JavaScript-Standard-Style简介&quot;&gt;&lt;a href=&quot;#1-JavaScript-Standard-Style简介&quot; class=&quot;headerlink&quot; title=&quot;1 JavaScript Standard Style简介&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="vscode" scheme="https://wdd.js.org/tags/vscode/"/>
    
      <category term="vue" scheme="https://wdd.js.org/tags/vue/"/>
    
      <category term="standard style" scheme="https://wdd.js.org/tags/standard-style/"/>
    
  </entry>
  
  <entry>
    <title>基于 WebRTC 构建 Web SIP Phone</title>
    <link href="https://wdd.js.org/webrtc-web-sip-phone.html"/>
    <id>https://wdd.js.org/webrtc-web-sip-phone.html</id>
    <published>2018-02-11T06:44:58.000Z</published>
    <updated>2018-02-11T06:46:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-阅前须知"><a href="#0-阅前须知" class="headerlink" title="0 阅前须知"></a>0 阅前须知</h1><ul><li>本文并不是教程，只是实现方案</li><li>我只是从WEB端考虑这个问题，实际还需要后端sip服务器的配合</li><li>jsSIP有个非常不错的在线demo, 可以去哪里玩耍，很好玩呢 <a href="https://tryit.jssip.net/" target="_blank" rel="noopener">try jssip </a></li></ul><p><img src="http://p3alsaatj.bkt.clouddn.com/20180211144554_nUwjgc_Screenshot.jpeg" alt=""></p><h1 id="1-技术简介"><a href="#1-技术简介" class="headerlink" title="1. 技术简介"></a>1. 技术简介</h1><blockquote><ul><li><p><code>WebRTC</code>: WebRTC，名称源自<code>网页即时通信</code>（英语：Web Real-Time Communication）的缩写，是一个支持网页浏览器进行实时语音对话或视频对话的API。它于2011年6月1日开源并在Google、Mozilla、Opera支持下被纳入万维网联盟的W3C推荐标准</p></li><li><p><code>SIP</code>: <code>会话发起协议</code>（Session Initiation Protocol，缩写SIP）是一个由IETF MMUSIC工作组开发的协议，作为标准被提议用于创建，修改和终止包括视频，语音，即时通信，在线游戏和虚拟现实等多种多媒体元素在内的交互式用户会话。2000年11月，SIP被正式批准成为3GPP信号协议之一，并成为IMS体系结构的一个永久单元。SIP与H.323一样，是用于VoIP最主要的信令协议之一。</p></li></ul></blockquote><p><img src="http://p3alsaatj.bkt.clouddn.com/20180211144604_Zdxh2x_Screenshot.jpeg" alt=""></p><p>一般来说，要么使用实体话机，要么在系统上安装基于sip的客户端程序。实体话机硬件成本高，基于sip的客户端往往兼容性差，无法跨平台，易被杀毒软件查杀。</p><p>而<code>WebRTC</code>或许是更好的解决方案，只要一个浏览器就可以实时语音视频通话，这是很不错的解决方案。WebSocket可以用来传递sip信令，而WebRTC用来实时传输语音视频流。</p><h1 id="2-前端WebRTC实现方案"><a href="#2-前端WebRTC实现方案" class="headerlink" title="2. 前端WebRTC实现方案"></a>2. 前端WebRTC实现方案</h1><p>其实我们不需要去自己处理WebRTC的相关方法，或者去处理视频或者媒体流。市面上已经有不错的模块可供选择。</p><h2 id="2-1-jsSIP"><a href="#2-1-jsSIP" class="headerlink" title="2.1 jsSIP"></a>2.1 <a href="http://jssip.net/" target="_blank" rel="noopener">jsSIP</a></h2><p><code>jsSIP是JavaScript SIP 库</code></p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180211144616_7c5Pf0_Screenshot.jpeg" alt=""></p><p>功能特点如下：</p><ul><li>可以在浏览器或者Nodejs中运行</li><li>使用WebSocket传递SIP协议</li><li>视频音频实时消息使用WebRTC</li><li>非常轻量</li><li>100%纯JavaScript</li><li>使用简单并且具有强大的Api</li><li>服务端支持 OverSIP, Kamailio, Asterisk, OfficeSIP，reSIProcate，Frafos ABC SBC，TekSIP</li><li>是RFC 7118 and OverSIP的作者写的</li></ul><p>下面是使用JsSIP打电话的例子，非常简单吧<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create our JsSIP instance and run it:</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> socket = <span class="keyword">new</span> JsSIP.WebSocketInterface(<span class="string">'wss://sip.myhost.com'</span>);</span><br><span class="line"><span class="keyword">var</span> configuration = &#123;</span><br><span class="line">  sockets  : [ socket ],</span><br><span class="line">  uri      : <span class="string">'sip:alice@example.com'</span>,</span><br><span class="line">  password : <span class="string">'superpassword'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ua = <span class="keyword">new</span> JsSIP.UA(configuration);</span><br><span class="line"></span><br><span class="line">ua.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Register callbacks to desired call events</span></span><br><span class="line"><span class="keyword">var</span> eventHandlers = &#123;</span><br><span class="line">  <span class="string">'progress'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'call is in progress'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'failed'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'call failed with cause: '</span>+ e.data.cause);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'ended'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'call ended with cause: '</span>+ e.data.cause);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'confirmed'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'call confirmed'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">  <span class="string">'eventHandlers'</span>    : eventHandlers,</span><br><span class="line">  <span class="string">'mediaConstraints'</span> : &#123; <span class="string">'audio'</span>: <span class="literal">true</span>, <span class="string">'video'</span>: <span class="literal">true</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> session = ua.call(<span class="string">'sip:bob@example.com'</span>, options);</span><br></pre></td></tr></table></figure></p><h2 id="2-2-SIP-js"><a href="#2-2-SIP-js" class="headerlink" title="2.2 SIP.js"></a>2.2 <a href="https://sipjs.com/" target="_blank" rel="noopener">SIP.js</a></h2><p>sip.js项目实际是fork自jsSIP的，这里主要介绍它的服务端支持情况。其他接口自己自行查阅</p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180211144630_24V1u8_Screenshot.jpeg" alt=""></p><ul><li>FreeSWITCH</li><li>Asterisk</li><li>OnSIP</li><li>FreeSWITCH Legacy</li></ul><h1 id="3-平台考量"><a href="#3-平台考量" class="headerlink" title="3. 平台考量"></a>3. 平台考量</h1><p><img src="http://p3alsaatj.bkt.clouddn.com/20180211144642_my1Cbb_Screenshot.jpeg" alt=""></p><p>由于WebRTC对浏览器有较高的要求，你可以看看下图，哪些浏览器支持WebRTC, 所有IE浏览器都不行，chrome系支持情况不错。</p><h2 id="3-1-考量标准"><a href="#3-1-考量标准" class="headerlink" title="3.1 考量标准"></a>3.1 考量标准</h2><ul><li>跨平台</li><li>兼容性</li><li>体积</li><li>集成性</li><li>硬件要求</li><li>开发成本</li></ul><h2 id="3-2-考量表格"><a href="#3-2-考量表格" class="headerlink" title="3.2 考量表格"></a>3.2 考量表格</h2><table><thead><tr><th>种类</th><th>适用平台</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>基于electron开发的桌面客户端</td><td>window, mac, linux</td><td>跨平台，兼容好</td><td>要下载安装，体积大（压缩后至少48MB），对电脑性能有要求</td></tr><tr><td>开发js sdk</td><td>现代浏览器</td><td>体积小，容易第三方集成</td><td>兼容差(因为涉及到webRTC, IE11以及以都不行，对宿主环境要求高)，客户集成需要开发量</td></tr><tr><td>开发谷歌浏览器扩展</td><td>谷歌浏览器</td><td>体积小</td><td>兼容差（仅限类chrome浏览器）</td></tr></tbody></table><h1 id="4-参考文档-and-延伸阅读-and-动手实践"><a href="#4-参考文档-and-延伸阅读-and-动手实践" class="headerlink" title="4 参考文档 and 延伸阅读 and 动手实践"></a>4 参考文档 and 延伸阅读 and 动手实践</h1><ul><li><a href="http://jssip.net/documentation/3.1.x/getting_started/" target="_blank" rel="noopener">Js SIP Getting Started</a></li><li><a href="https://segmentfault.com/a/1190000011848805" target="_blank" rel="noopener">120行代码实现 浏览器WebRTC视频聊天</a></li><li><a href="https://en.wikipedia.org/wiki/List_of_SIP_response_codes#4xx%E2%80%94Client_Failure_Responses" target="_blank" rel="noopener">SIP协议状态码：</a></li></ul><h1 id="5-常见问题"><a href="#5-常见问题" class="headerlink" title="5 常见问题"></a>5 常见问题</h1><h2 id="422-“Session-Interval-Too-Small”"><a href="#422-“Session-Interval-Too-Small”" class="headerlink" title="422: “Session Interval Too Small”"></a>422: “Session Interval Too Small”</h2><p>jsSIP默认携带<code>Session-Expires: 90</code>的头部信息，如果这个超时字段小于服务端的设定值，那么就会得到如下422的响应。参见<a href="https://en.wikipedia.org/wiki/List_of_SIP_response_codes#4xx%E2%80%94Client_Failure_Responses" target="_blank" rel="noopener">SIP协议状态码：</a>, 可以在call请求中设置<code>sessionTimersExpires</code>, 使其超过服务端的设定值即可<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">call(targer, options</span><br><span class="line">)</span><br><span class="line">option.sessionTimersExpires</span><br><span class="line">Number (<span class="keyword">in</span> seconds) <span class="keyword">for</span> the<span class="built_in"> default </span>Session Timers interval (default value is 90, <span class="keyword">do</span> <span class="keyword">not</span> <span class="builtin-name">set</span> a lower value).</span><br></pre></td></tr></table></figure></p><h1 id="6-最后，你我共勉"><a href="#6-最后，你我共勉" class="headerlink" title="6 最后，你我共勉"></a>6 最后，你我共勉</h1><p><img src="https://i.imgur.com/ZKAN9K7.gif" alt="clipboard.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0-阅前须知&quot;&gt;&lt;a href=&quot;#0-阅前须知&quot; class=&quot;headerlink&quot; title=&quot;0 阅前须知&quot;&gt;&lt;/a&gt;0 阅前须知&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;本文并不是教程，只是实现方案&lt;/li&gt;
&lt;li&gt;我只是从WEB端考虑这个问题，实际还需要后端si
      
    
    </summary>
    
    
      <category term="webrtc" scheme="https://wdd.js.org/tags/webrtc/"/>
    
      <category term="sip" scheme="https://wdd.js.org/tags/sip/"/>
    
  </entry>
  
  <entry>
    <title>追本溯源 substr与substring历史漫话</title>
    <link href="https://wdd.js.org/substr-substrig-history.html"/>
    <id>https://wdd.js.org/substr-substrig-history.html</id>
    <published>2018-02-11T06:42:16.000Z</published>
    <updated>2018-02-11T06:45:30.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>引子： 很多时候，当我要字符串截取时，我会想到substr和substring的方法，但是具体要怎么传参数时，我总是记不住。哪个应该传个字符串长度，哪个又应该传个开始和结尾的下标，如果我不去查查这两个函数，我始终不敢去使用它们。所以我总是觉得，这个两个方法名起的真是蹩脚。然而事实是这样的吗？</p></blockquote><p><code>看来是时候扒一扒这两个方法的历史了。</code></p><h1 id="1-基因追本溯源"><a href="#1-基因追本溯源" class="headerlink" title="1 基因追本溯源"></a>1 基因追本溯源</h1><p><img src="http://p3alsaatj.bkt.clouddn.com/20180211144257_1GqbRg_Screenshot.jpeg" alt=""></p><p>在编程语言的历史长河中，曾经出现过很多编程语言。然而大浪淘沙，铅华洗尽之后，很多早已折戟沉沙，有些却依旧光彩夺目。那么stubstr与substring的DNA究竟来自何处？</p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180211144314_cxhcdA_Screenshot.jpeg" alt=""></p><blockquote><p>1950与1960年代</p></blockquote><ul><li>1954 - FORTRAN</li><li>1958 - LISP</li><li>1959 - COBOL</li><li>1964 - BASIC</li><li>1970 - Pascal</li></ul><blockquote><p>1967-1978：确立了基础范式</p></blockquote><ul><li>1972 - <code>C语言</code></li><li>1975 - Scheme</li><li>1978 - SQL (起先只是一种查询语言，扩充之后也具备了程序结构)</li></ul><blockquote><p>1980年代：增强、模块、性能</p></blockquote><ul><li>1983 - <code>C++ (就像有类别的C)</code></li><li>1988 - Tcl</li></ul><blockquote><p>1990年代：互联网时代</p></blockquote><ul><li>1991 - <code>Python</code></li><li>1991 - Visual Basic</li><li>1993 - <code>Ruby</code></li><li>1995 - <code>Java</code></li><li>1995 - Delphi (Object Pascal)</li><li>1995 - <code>JavaScript</code></li><li>1995 - <code>PHP</code></li><li>2009 - <code>Go</code></li><li>2014 - <code>Swift (编程语言)</code></li></ul><h2 id="1-1-在C-中首次出现substr"><a href="#1-1-在C-中首次出现substr" class="headerlink" title="1.1 在C++中首次出现substr()"></a>1.1 在C++中首次出现substr()</h2><p><img src="http://p3alsaatj.bkt.clouddn.com/20180211144327_EtfLjV_Screenshot.jpeg" alt=""></p><p>在c语言中，并没有出现substr或者substring方法。然而在1983，substr()方法已经出现在C++语言中了。然而这时候还没有出现substring, 所以可以见得：<code>substr是stustring的老大哥</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">substr</span> <span class="params">(<span class="keyword">size_t</span> pos = <span class="number">0</span>, <span class="keyword">size_t</span> len = npos)</span> <span class="keyword">const</span></span>;</span><br></pre></td></tr></table></figure><p>从C++的方法定义中可以看到, <code>substr的参数是开始下标，以及字符串长度。</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> str=<span class="string">"We think in generalities, but we live in details."</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> str2 = str.substr (<span class="number">3</span>,<span class="number">5</span>);     <span class="comment">// "think"</span></span><br></pre></td></tr></table></figure><h2 id="1-2-在Java中首次出现substring"><a href="#1-2-在Java中首次出现substring" class="headerlink" title="1.2 在Java中首次出现substring()"></a>1.2 在Java中首次出现substring()</h2><p><img src="http://p3alsaatj.bkt.clouddn.com/20180211144338_id4nE2_Screenshot.jpeg" alt=""></p><p>距离substr()方法出现已经有了将近十年之隔，此间涌现一批后起之秀，如: Python, Ruby, VB之类，然而他们之中并没有stustring的基因，在Java的String类中，我们看到两个方法。从这两个方法之中我们可以看到：substring方法基本原型的参数是开始和结束的下标。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String</span> substring(<span class="keyword">int</span> beginIndex) <span class="comment">// 返回一个新的字符串，它是此字符串的一个子字符串。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">String</span> substring(<span class="keyword">int</span> beginIndex, <span class="keyword">int</span> endIndex)</span><br><span class="line"><span class="comment">// 返回一个新字符串，它是此字符串的一个子字符串。</span></span><br></pre></td></tr></table></figure><h1 id="1-3-JavaScript的历史继承"><a href="#1-3-JavaScript的历史继承" class="headerlink" title="1.3 JavaScript的历史继承"></a>1.3 JavaScript的历史继承</h1><p><img src="http://www.jstips.co/assets/images/jstips-animation.gif" alt=""></p><blockquote><p>1995年，网景公司招募了Brendan Eich，目的是将Scheme编程语言嵌入到Netscape Navigator中。在开始之前，Netscape Communications与Sun Microsystems公司合作，在Netscape Navigator中引入了更多的静态编程语言Java，以便与微软竞争用户采用Web技术和平台。网景公司决定，他们想创建的脚本语言将补充Java，并且应该有一个类似的语法，排除采用Perl，Python，TCL或Scheme等其他语言。为了捍卫对竞争性提案的JavaScript的想法，公司需要一个原型。 1995年5月，Eich在10天内写完。</p></blockquote><p>上帝用七天时间创造万物, Brendan Eich用10天时间创造了一门语言。或许用创造并不合适，因为JavaScript是站在了Perl，Python，TCL或Scheme等其他巨人的肩膀上而产生的。</p><p>JavaScript并不像C那样出身名门，在贝尔实验室精心打造，但是JavaScript在往后的<code>自然选择</code>中，并没有因此萧条，反而借助于C,C++, Java, Perl，Python，TCL, Scheme优秀基因，进化出更加强大强大的生命力。</p><p>因此可以想象，在10天之内，当Brendan Eich写到String的substr和substring方法时，或许他并没困惑着两个方法的参数应该如何设置，<code>因为在C++和Java的实现中，已经有了类似的定义。</code> 如果你了解历史，你就不会困惑现在。</p><h1 id="2-所以，substr和substring究竟有什么不同？"><a href="#2-所以，substr和substring究竟有什么不同？" class="headerlink" title="2 所以，substr和substring究竟有什么不同？"></a>2 所以，substr和substring究竟有什么不同？</h1><p>如下图所示：substr和substring都接受两个参数，他们的第一个参数的含义是相同的，<code>不同的是第二个参数。substr的第二个参数是到达结束点的距离，substring是结束的位置。</code></p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180211144352_POhgos_Screenshot.jpeg" alt=""></p><h1 id="3-参考文献"><a href="#3-参考文献" class="headerlink" title="3 参考文献"></a>3 参考文献</h1><ul><li><a href="https://zh.wikipedia.org/wiki/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80%E6%AD%B7%E5%8F%B2" target="_blank" rel="noopener">维基百科：程式語言歷史</a></li><li><a href="http://www.cplusplus.com/reference/string/string/substr/" target="_blank" rel="noopener">C++ std::string::substr</a></li><li><a href="https://en.wikipedia.org/wiki/JavaScript" target="_blank" rel="noopener">JavaScript</a></li></ul><p>如有不正确的地方，欢迎指正。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;引子： 很多时候，当我要字符串截取时，我会想到substr和substring的方法，但是具体要怎么传参数时，我总是记不住。哪个应该传个字符串长度，哪个又应该传个开始和结尾的下标，如果我不去查查这两个函数，我始终不敢去使用它们。所以我总是觉得，这个
      
    
    </summary>
    
    
      <category term="substr" scheme="https://wdd.js.org/tags/substr/"/>
    
      <category term="substring" scheme="https://wdd.js.org/tags/substring/"/>
    
  </entry>
  
  <entry>
    <title>回首2017 你其实是一个收集贝壳的孩子</title>
    <link href="https://wdd.js.org/2017-my-star-collection.html"/>
    <id>https://wdd.js.org/2017-my-star-collection.html</id>
    <published>2018-02-11T06:37:33.000Z</published>
    <updated>2018-02-11T06:41:19.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p3alsaatj.bkt.clouddn.com/20180211143825_5WhtUR_Screenshot.jpeg" alt=""></p><blockquote><p>我不知道世上的人对我怎样评价。我却这样认为：我好像是在海上玩耍，时而发现了一个光滑的石子儿，时而发现一个美丽的贝壳而为之高兴的孩子。尽管如此，那真理的海洋还神秘地展现在我们面前。—— 牛顿</p></blockquote><p><code>github</code>也像是一片海海，2017年，我大约从这篇海中捡了200多个彩色的贝壳。在年底之前，挑一些精致美丽的贝壳，分享出来。</p><a id="more"></a><h1 id="1-docsify：想让你的文档拥有Vue官方文档一样的颜值吗？"><a href="#1-docsify：想让你的文档拥有Vue官方文档一样的颜值吗？" class="headerlink" title="1. docsify：想让你的文档拥有Vue官方文档一样的颜值吗？"></a>1. <a href="https://github.com/QingWei-Li/docsify" target="_blank" rel="noopener">docsify：想让你的文档拥有Vue官方文档一样的颜值吗？</a></h1><p><code>我喜欢Vue的原因是Vue官方文档颜值很高 by me</code>, 那么你想来一份吗？</p><ul><li><code>高颜值</code></li><li><code>非常简单</code></li><li>无需构建，写完文档直接发布</li><li>容易使用并且轻量 (~18kB gzipped)</li><li>智能的全文搜索</li><li>提供多套主题</li><li>丰富的 API</li><li>支持 Emoji</li><li>兼容 IE10+</li><li>支持 SSR (example)</li></ul><p><img src="http://p3alsaatj.bkt.clouddn.com/20180211144002_TNZrwa_Screenshot.jpeg" alt=""></p><h1 id="2-JavaScript-Standard-Style：一千个开发者只有一个风格"><a href="#2-JavaScript-Standard-Style：一千个开发者只有一个风格" class="headerlink" title="2. JavaScript Standard Style：一千个开发者只有一个风格"></a>2. <a href="https://github.com/standard/standard" target="_blank" rel="noopener">JavaScript Standard Style：一千个开发者只有一个风格</a></h1><p><code>还在为要不要分号争吵吗？ 还在为两个空格和四个空格犹豫吗？ 还在为各种格式检查的配置文件苦恼吗？</code></p><p><code>其实，你需要的只是JavaScript Standard Style罢了，无数大牛公司在用，你还在犹豫什么？</code></p><p><code>好多编辑器支持JavaScript Standard Style，安装过后，ctrl + s一下，哪怕shi一样的代码，也会瞬间华丽变身成维多利亚的秘密。</code></p><p><code>帅的人已经用了，不帅的还在犹豫</code></p><ul><li><code>无须配置</code>。 史上最便捷的统一代码风格的方式，轻松拥有。</li><li><code>自动代码格式化</code>。 只需运行 standard –fix - 从此和脏乱差的代码说再见。</li><li>提前发现风格及程序问题。 - 减少代码审查过程中反反复复的修改过程，节约时间。</li><li>使用两个空格 – 进行缩进</li><li>无分号 – 这没什么不好。不骗你！</li><li>查看更多 – <a href="https://github.com/standard/standard/blob/master/docs/RULES-zhcn.md#javascript-standard-style" target="_blank" rel="noopener">为何不试试 standard 规范呢！</a></li></ul><p><img src="http://p3alsaatj.bkt.clouddn.com/20180211144016_ciMMeG_Screenshot.jpeg" alt=""></p><h1 id="3-mitt-纳米级别的事件订阅系统"><a href="#3-mitt-纳米级别的事件订阅系统" class="headerlink" title="3. mitt: 纳米级别的事件订阅系统"></a>3. <a href="https://github.com/developit/mitt" target="_blank" rel="noopener">mitt: 纳米级别的事件订阅系统</a></h1><p>如果你看了mitt的源码，你应该会惊呼：<code>WTF，人家接近50行代码也能获得2000多颗星！！！！</code></p><ul><li>纳米级别: 小于200B</li><li>相当有用: 用”*”可以去订阅所有事件</li><li>非常熟悉: 类似于Node’s EventEmitter</li><li>函数式: 方法不依赖<code>this</code></li></ul><p><img src="http://p3alsaatj.bkt.clouddn.com/20180211144027_hANzrm_Screenshot.jpeg" alt=""></p><h1 id="4-faker-js-最优雅的假数据生成器"><a href="#4-faker-js-最优雅的假数据生成器" class="headerlink" title="4. faker.js: 最优雅的假数据生成器"></a>4. <a href="https://github.com/Marak/faker.js" target="_blank" rel="noopener">faker.js: 最优雅的假数据生成器</a></h1><ul><li>Supports all Faker API Methods</li><li>Full-Featured Microservice</li><li>Hosted by hook.io</li></ul><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> randomName = faker.<span class="keyword">name</span>.findName(); <span class="comment">// Caitlyn Kerluke</span></span><br><span class="line"><span class="keyword">var</span> randomEmail = faker.internet.email(); <span class="comment">// Rusty@arne.info</span></span><br><span class="line"><span class="keyword">var</span> randomCard = faker.helpers.createCard(); <span class="comment">// random contact card containing many properties</span></span><br></pre></td></tr></table></figure><p><img src="http://p3alsaatj.bkt.clouddn.com/20180211144039_JErY9F_Screenshot.jpeg" alt=""></p><h1 id="5-superstruct-精准详细的runtime-数据验证工具"><a href="#5-superstruct-精准详细的runtime-数据验证工具" class="headerlink" title="5. superstruct: 精准详细的runtime 数据验证工具"></a>5. <a href="https://github.com/ianstormtaylor/superstruct" target="_blank" rel="noopener">superstruct: 精准详细的runtime 数据验证工具</a></h1><ul><li><code>给出的错误提示很详细，非常容易定位bug</code></li><li><code>帮你做好那些数据验证的脏活累活</code></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; superstruct, struct &#125; = <span class="built_in">window</span>.Superstruct</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> User = struct(&#123;</span><br><span class="line">  id: <span class="string">'number'</span>,</span><br><span class="line">  name: <span class="string">'string'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">  id: <span class="string">'invalid'</span>,</span><br><span class="line">  name: <span class="string">'Jane Smith'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> user = User(data)</span><br><span class="line">  log(<span class="string">'valid'</span>, user)</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; message, path, data, <span class="keyword">type</span>, value &#125; = e</span><br><span class="line">  log(<span class="string">'invalid'</span>, &#123; message, path, data, <span class="keyword">type</span>, value &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"><span class="keyword">type</span>, data</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.body.className = <span class="keyword">type</span></span><br><span class="line">  <span class="built_in">document</span>.body.textContent = <span class="built_in">JSON</span>.stringify(data, <span class="literal">null</span>, <span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>可以看一下她输出的错误信息</code><br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"message"</span>: <span class="string">"Expected a value of type `number` for `id` but received `\"invalid\"`."</span>,</span><br><span class="line">  <span class="attr">"path"</span>: [</span><br><span class="line">    <span class="string">"id"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"data"</span>: &#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="string">"invalid"</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Jane Smith"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"number"</span>,</span><br><span class="line">  <span class="attr">"value"</span>: <span class="string">"invalid"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="6-uppy-下一代开源文件上传插件"><a href="#6-uppy-下一代开源文件上传插件" class="headerlink" title="6. uppy: 下一代开源文件上传插件"></a>6. <a href="https://github.com/transloadit/uppy" target="_blank" rel="noopener">uppy: 下一代开源文件上传插件</a></h1><p><code>Uppy是一款时尚，模块化的文件上传器，可以与任何应用程序无缝集成。这是快速，易于使用，让您担心比建立一个文件上传更重要的问题。</code></p><ul><li>从本地磁盘，Google云端硬盘，Dropbox，Instagram获取文件，或使用相机捕捉和记录自拍;</li><li>用一个漂亮的界面预览和编辑元数据;</li><li>上传到最终目的地，可选择进行处理/编码</li></ul><p><img src="https://raw.githubusercontent.com/transloadit/uppy/master/uppy-screenshot.jpg" alt=""></p><h1 id="7-Inquirer-js-在命令行里做问卷调查"><a href="#7-Inquirer-js-在命令行里做问卷调查" class="headerlink" title="7. Inquirer.js: 在命令行里做问卷调查"></a>7. <a href="https://github.com/SBoudrias/Inquirer.js" target="_blank" rel="noopener">Inquirer.js: 在命令行里做问卷调查</a></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="keyword">var</span> inquirer = <span class="built_in">require</span>(<span class="string">'inquirer'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> questions = [</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">'input'</span>,</span><br><span class="line">    name: <span class="string">'name'</span>,</span><br><span class="line">    message: <span class="string">'请输入你的名字'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">'input'</span>,</span><br><span class="line">    name: <span class="string">'age'</span>,</span><br><span class="line">    message: <span class="string">'请输入你的年龄'</span>,</span><br><span class="line">    <span class="keyword">default</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'10'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">'list'</span>,</span><br><span class="line">    name: <span class="string">'sex'</span>,</span><br><span class="line">    message: <span class="string">'请选择你的性别'</span>,</span><br><span class="line">    choices: [<span class="string">'男'</span>, <span class="string">'女'</span>]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">inquirer.prompt(questions).then(<span class="function"><span class="params">answers</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(answers, <span class="literal">null</span>, <span class="string">'  '</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">➜  src git:(<span class="literal">master</span>) ✗ <span class="keyword">node</span> <span class="title">query</span>.js</span><br><span class="line">? 请输入你的名字 wdd</span><br><span class="line">? 请输入你的年龄 <span class="number">23</span></span><br><span class="line">? 请选择你的性别 男</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"wdd"</span>,</span><br><span class="line">  <span class="string">"age"</span>: <span class="string">"23"</span>,</span><br><span class="line">  <span class="string">"sex"</span>: <span class="string">"男"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p3alsaatj.bkt.clouddn.com/20180211143825_5WhtUR_Screenshot.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我不知道世上的人对我怎样评价。我却这样认为：我好像是在海上玩耍，时而发现了一个光滑的石子儿，时而发现一个美丽的贝壳而为之高兴的孩子。尽管如此，那真理的海洋还神秘地展现在我们面前。—— 牛顿&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;github&lt;/code&gt;也像是一片海海，2017年，我大约从这篇海中捡了200多个彩色的贝壳。在年底之前，挑一些精致美丽的贝壳，分享出来。&lt;/p&gt;
    
    </summary>
    
    
      <category term="star" scheme="https://wdd.js.org/tags/star/"/>
    
  </entry>
  
  <entry>
    <title>you-dont-need-serial</title>
    <link href="https://wdd.js.org/you-dont-need-serial.html"/>
    <id>https://wdd.js.org/you-dont-need-serial.html</id>
    <published>2018-02-11T06:35:59.000Z</published>
    <updated>2018-02-11T06:36:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-You-Dont-Need-JavaScript"><a href="#1-You-Dont-Need-JavaScript" class="headerlink" title="1 You-Dont-Need-JavaScript"></a><a href="https://github.com/you-dont-need/You-Dont-Need-JavaScript" target="_blank" rel="noopener">1 You-Dont-Need-JavaScript</a></h1><blockquote><p><code>CSS是强大的，你可以做很多事情没有JS。</code> 本文教你使用原生CSS做下面的事情。</p></blockquote><p><code>内容目录</code></p><ul><li>手风琴/切换</li><li>圆盘传送带</li><li>检查复选框的计数器</li><li>翻转点击</li><li>Textfield上的浮动标签</li><li>字体（拉丁）</li><li>游戏</li><li>悬停/弹出信息</li><li>图片廊</li><li>菜单</li><li>移动菜单关闭画布</li><li>汉堡菜单</li><li>花式菜单</li><li>莫代尔/弹出</li><li>鼠标跟踪</li><li>视差滚动</li><li>标签</li><li>待办事项列表</li><li>提示</li><li>树视图</li><li>Twitter心动画</li><li>动态图像着色</li><li>连锁反应</li><li>响应式计数器显示不适合屏幕的项目数量</li></ul><p>可以看一下纯CSS的例子</p><p><img src="https://github.com/you-dont-need/You-Dont-Need-JavaScript/raw/master/images/accordion.gif" alt=""></p><h1 id="2-You-Dont-Need-Lodash-Underscore"><a href="#2-You-Dont-Need-Lodash-Underscore" class="headerlink" title="2 You-Dont-Need-Lodash-Underscore"></a><a href="https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore" target="_blank" rel="noopener">2 You-Dont-Need-Lodash-Underscore</a></h1><blockquote><p>Lodash和Underscore是伟大的现代JavaScript实用程序库，它们被前端开发人员广泛使用。但是，如果您将目标锁定为现代浏览器，则可能会发现，许多方法已经得到ES5和ES6的原生支持。如果你想要你的项目需要更少的依赖，并且你清楚的知道你的目标浏览器，那么你可能不需要Lodash / Underscore。</p></blockquote><p><code>来自开发者的声音</code></p><ul><li><p>在代码变臃肿之前，请使用原生JS对象和数组工具函数. —Cody Lindley, Author of jQuery Cookbook and JavaScript Enlightenment</p></li><li><p>你可能不需要lodash. 有许多好用的原生方法了. —Daniel Lamb, Computer Scientist, Technical Reviewer of Secrets of the JavaScript Ninja and Functional Programming in JavaScript</p></li><li><p>我想不是，但我想要它. —Tero Parviainen, Author of build-your-own-angular</p></li><li><p>我承认，我曾经过度使用lodash.  —@therebelrobot, Maker of web things, Facilitator for Node.js/io.js</p></li></ul><p><code>内容目录</code></p><ul><li>Array<ul><li>_.compact</li><li>_.concat</li><li>_.fill</li><li>_.find</li><li>_.findIndex</li><li>_.first</li><li>_.flatten</li><li>_.flattenDeep</li><li><em>.head and </em>.tail</li><li>_.indexOf</li><li>_.join</li><li>_.last</li><li>_.lastIndexOf</li><li>_.reverse</li><li>_.without</li><li>_.slice</li><li>_.isArray</li></ul></li><li>Collection<ul><li>_.each</li><li>_.every</li><li>_.filter</li><li>_.groupBy</li><li>_.includes</li><li>_.map</li><li><em>.minBy and </em>.maxBy</li><li>_.pluck</li><li>_.range</li><li>_.reduce</li><li>_.reduceRight</li><li>_.size</li><li>_.some</li></ul></li><li>Function<ul><li>_.after</li></ul></li><li>Lang<ul><li>_.isNaN</li></ul></li><li>Object<ul><li>_.assign</li><li>_.keys</li><li>_.toPairs</li><li>_.values</li></ul></li><li>String<ul><li>_.repeat</li><li>_.template</li><li>_.toLower</li><li>_.toUpper</li><li>_.trim</li><li>_.replace</li></ul></li></ul><h1 id="3-You-Dont-Need-jQuery"><a href="#3-You-Dont-Need-jQuery" class="headerlink" title="3 You-Dont-Need-jQuery"></a><a href="https://github.com/nefe/You-Dont-Need-jQuery" target="_blank" rel="noopener">3 You-Dont-Need-jQuery</a></h1><p><code>纯JavaScript的例子, 实现做jQuery与查询，样式，dom，ajax，事件等</code></p><p>前端发展很快，现代浏览器原生 API 已经足够好用。我们并不需要为了操作 DOM、Event 等再学习一下 jQuery 的 API。同时由于 React、Angular、Vue 等框架的流行，直接操作 DOM 不再是好的模式，jQuery 使用场景大大减少。本项目总结了大部分 jQuery API 替代的方法，暂时只支持 IE10 以上浏览器。 </p><p><code>内容目录</code></p><ul><li>Translations</li><li>Query Selector</li><li>CSS &amp; Style</li><li>DOM Manipulation</li><li>Ajax</li><li>Events</li><li>Utilities</li><li>Promises</li><li>Animation</li><li>Alternatives</li><li>Browser Support</li></ul><h1 id="You-Dont-Need-GUI"><a href="#You-Dont-Need-GUI" class="headerlink" title="You-Dont-Need-GUI"></a><a href="https://github.com/you-dont-need/You-Dont-Need-GUI" target="_blank" rel="noopener">You-Dont-Need-GUI</a></h1><p>图形用户界面对计算机用户非常友好。它们被引入以响应命令行界面（CLI）感知的陡峭学习曲线。</p><p><img src="https://github.com/you-dont-need/You-Dont-Need-GUI/raw/master/Xerox_Star_8010_workstations.jpg" alt=""></p><p>但是，他们往往需要更多的资源，功能不强，难以通过脚本自动化。</p><p><code>作为计算机专家，我们希望更高效，更好地完成工作。</code>我们知道命令字可能不容易被发现或助记符，所以我们尝试列出一些您可能试图在GUI中执行的常见任务。</p><p><code>内容目录</code></p><ul><li>复制一个文件</li><li>复制一个文件</li><li>复制一个文件夹</li><li>复制一个文件夹</li><li>移动一个文件</li><li>重命名一个文件</li><li>移动一个文件夹</li><li>重命名文件夹</li><li>合并文件夹</li><li>创建一个新的文件</li><li>新建一个文件夹</li><li>显示文件/文件夹大小</li><li>用默认程序打开一个文件</li><li>压缩一个文件夹</li><li>解压缩文件夹</li><li>删除一个文件</li><li>删除一个文件夹</li><li>列出文件夹内容</li><li>树查看文件夹及其子文件夹</li><li>找到一个陈旧的文件</li><li>显示一个日历</li><li>找到未来的日期</li><li>使用计算器</li><li>强制退出程序</li></ul><p><img src="https://leanote.com/api/file/getImage?fileId=5a45b26aab64411cab000cf5" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-You-Dont-Need-JavaScript&quot;&gt;&lt;a href=&quot;#1-You-Dont-Need-JavaScript&quot; class=&quot;headerlink&quot; title=&quot;1 You-Dont-Need-JavaScript&quot;&gt;&lt;/a&gt;&lt;a href=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>不常用却很有妙用的事件及方法</title>
    <link href="https://wdd.js.org/useful-browser-events.html"/>
    <id>https://wdd.js.org/useful-browser-events.html</id>
    <published>2018-02-11T06:34:17.000Z</published>
    <updated>2018-02-11T06:35:11.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-visibilitychange事件"><a href="#1-visibilitychange事件" class="headerlink" title="1 visibilitychange事件"></a>1 <a href="https://developer.mozilla.org/zh-CN/docs/Web/Events/visibilitychange" target="_blank" rel="noopener">visibilitychange事件</a></h1><p>触发条件：<code>浏览器标签页被隐藏或显示的时候会触发visibilitychange事件.</code></p><p>使用场景：<code>当标签页显示或者隐藏时，触发一些业务逻辑</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"visibilitychange"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log( <span class="built_in">document</span>.visibilityState );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="2-storage事件"><a href="#2-storage事件" class="headerlink" title="2 storage事件"></a>2 <a href="https://developer.mozilla.org/en-US/docs/Web/Events/storage" target="_blank" rel="noopener">storage事件</a></h1><p>触发条件：<code>使用localStorage or sessionStorage存储或者修改某个本地存储时</code></p><p>使用场景：<code>标签页间通信</code></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AB页面同源</span></span><br><span class="line"><span class="comment">// 在A 页面</span></span><br><span class="line">window.addEventListener('storage', (e) =&gt; &#123;console.<span class="built_in">log</span>(e)&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在B 页面，向120打个电话</span></span><br><span class="line">localStorage.setItem('makeCall','120')</span><br><span class="line"></span><br><span class="line"><span class="comment">// 然后可以在A页面间有输出, 可以看出A页面 收到了B页面的通知</span></span><br><span class="line">...key: <span class="string">"makeCall"</span>, oldValue: <span class="string">"119"</span>, newValue: <span class="string">"120"</span>, ...</span><br></pre></td></tr></table></figure><h1 id="3-beforeunload事件"><a href="#3-beforeunload事件" class="headerlink" title="3 beforeunload事件"></a><a href="https://developer.mozilla.org/en-US/docs/Web/Events/beforeunload" target="_blank" rel="noopener">3 beforeunload事件</a></h1><p>触发条件：<code>当页面的资源将要卸载(及刷新或者关闭标签页前). 当页面依然可见，并且该事件可以被取消只时</code></p><p>使用场景：<code>关闭或者刷新页面时弹窗确认</code>，<code>关闭页面时向后端发送报告等</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"beforeunload"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> confirmationMessage = <span class="string">"\o/"</span>;</span><br><span class="line"></span><br><span class="line">  e.returnValue = confirmationMessage;     <span class="comment">// Gecko, Trident, Chrome 34+</span></span><br><span class="line">  <span class="keyword">return</span> confirmationMessage;              <span class="comment">// Gecko, WebKit, Chrome &lt;34</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="4-navigator-sendBeacon"><a href="#4-navigator-sendBeacon" class="headerlink" title="4 navigator.sendBeacon"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Navigator/sendBeacon" target="_blank" rel="noopener">4 navigator.sendBeacon</a></h1><p>这个方法主要用于满足 统计和诊断代码 的需要，这些代码通常尝试在卸载（unload）文档之前向web服务器发送数据。过早的发送数据可能导致错过收集数据的机会。然而， 对于开发者来说保证在文档卸载期间发送数据一直是一个困难。因为用户代理通常会忽略在卸载事件处理器中产生的异步 XMLHttpRequest 。</p><p>使用 sendBeacon() 方法，将会使用户代理在有机会时异步地向服务器发送数据，同时不会延迟页面的卸载或影响下一导航的载入性能。这就解决了提交分析数据时的所有的问题：使它可靠，异步并且不会影响下一页面的加载。此外，代码实际上还要比其他技术简单！</p><p><code>注意：该方法在IE和safari没有实现</code></p><p>使用场景：<code>发送崩溃报告</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'unload'</span>, logData, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    navigator.sendBeacon(<span class="string">"/log"</span>, analyticsData);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-visibilitychange事件&quot;&gt;&lt;a href=&quot;#1-visibilitychange事件&quot; class=&quot;headerlink&quot; title=&quot;1 visibilitychange事件&quot;&gt;&lt;/a&gt;1 &lt;a href=&quot;https://develop
      
    
    </summary>
    
    
      <category term="visibilitychange" scheme="https://wdd.js.org/tags/visibilitychange/"/>
    
      <category term="sendBeacon" scheme="https://wdd.js.org/tags/sendBeacon/"/>
    
  </entry>
  
  <entry>
    <title>xfire 简单优雅、高度可配置的fetch接口批量生成工具</title>
    <link href="https://wdd.js.org/overview-of-xfire.html"/>
    <id>https://wdd.js.org/overview-of-xfire.html</id>
    <published>2018-02-11T06:31:36.000Z</published>
    <updated>2018-02-11T09:23:41.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我曾写过两篇文章 <a href="https://segmentfault.com/a/1190000008678653" target="_blank" rel="noopener">jQuery进阶 用最优雅的方式写ajax请求</a>, <a href="https://segmentfault.com/a/1190000012037455" target="_blank" rel="noopener">axios进阶 用最优雅的方式写ajax请求</a>, 原理都是在将<code>使用配置文件的方式，自动生成接口方法</code>。 在多个项目中，我曾使用这种配置的方式批量生成ajax接口，但是每次都要造轮子是很繁琐的，索性自己发布一个npm包吧，于是xfire出来了。</p><p>xfire地址：<a href="https://github.com/wangduanduan/xfire，" target="_blank" rel="noopener">https://github.com/wangduanduan/xfire，</a></p><p>觉得不错的话，可以给xfire点个赞或者开个issue，或者提个建议。谢谢。</p></blockquote><h1 id="1-xfire"><a href="#1-xfire" class="headerlink" title="1. xfire"></a>1. xfire</h1><p><a href="https://www.npmjs.org/package/xfire" target="_blank" rel="noopener"><img src="https://img.shields.io/npm/v/xfire.svg" alt="npm"></a> <a href="https://standardjs.com" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/code_style-standard-brightgreen.svg" alt="JavaScript Style Guide"></a> </p><p><code>非常简单，高度可配置的fetch接口批量生成工具。</code></p><hr><h1 id="2-特点"><a href="#2-特点" class="headerlink" title="2. 特点"></a>2. 特点</h1><ul><li>:smile: <code>非常简单: 提供配置文件,自动生成接口</code></li><li>:triangular_ruler: <code>提前验证:支持请求体格式验证</code></li><li>:bug: <code>报错详细: 给出具体的报错位置,字段信息</code></li></ul><h1 id="3-安装"><a href="#3-安装" class="headerlink" title="3. 安装"></a>3. 安装</h1><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -S xfire</span><br><span class="line"></span><br><span class="line">yarn <span class="keyword">add</span><span class="bash"> xfire</span></span><br></pre></td></tr></table></figure><h1 id="4-demo"><a href="#4-demo" class="headerlink" title="4. demo"></a>4. demo</h1><p>首先需要一个配置文件<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// api.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">export</span> <span class="selector-tag">default</span> &#123;</span><br><span class="line">  <span class="attribute">prefix</span>: <span class="string">'http://localhost:80'</span>,</span><br><span class="line">  <span class="attribute">list</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attribute">name</span>: <span class="string">'login'</span>,</span><br><span class="line">      <span class="attribute">desp</span>: <span class="string">'sercurity login'</span>,</span><br><span class="line">      <span class="attribute">path</span>: <span class="string">'/agent/login'</span>,</span><br><span class="line">      <span class="attribute">method</span>: <span class="string">'post'</span>,</span><br><span class="line">      <span class="attribute">contentType</span>: <span class="string">'formData'</span>,</span><br><span class="line">      <span class="attribute">bodyStruct</span>: &#123;</span><br><span class="line">        <span class="attribute">username</span>: <span class="string">'string'</span>,</span><br><span class="line">        <span class="attribute">password</span>: <span class="string">'string'</span>,</span><br><span class="line">        <span class="attribute">namespace</span>: <span class="string">'string'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attribute">defaultBody</span>: &#123;</span><br><span class="line">        <span class="attribute">password</span>: <span class="string">'Aa123456'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attribute">status</span>: &#123;</span><br><span class="line">        <span class="number">401</span>: <span class="string">'username or password wrong'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attribute">name</span>: <span class="string">'heartBeat'</span>,</span><br><span class="line">      <span class="attribute">path</span>: <span class="string">'/sdk/api/csta/agent/heartbeat/&#123;&#123;agentId&#125;&#125;'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attribute">name</span>: <span class="string">'setAgentState'</span>,</span><br><span class="line">      <span class="attribute">desp</span>: <span class="string">'set agent state'</span>,</span><br><span class="line">      <span class="attribute">path</span>: <span class="string">'/sdk/api/csta/agent/state/&#123;&#123;namespace&#125;&#125;'</span>,</span><br><span class="line">      <span class="attribute">method</span>: <span class="string">'post'</span>,</span><br><span class="line">      <span class="attribute">bodyStruct</span>: &#123;</span><br><span class="line">        <span class="attribute">agentId</span>: <span class="string">'string?'</span>,</span><br><span class="line">        <span class="attribute">loginId</span>: <span class="string">'string'</span>,</span><br><span class="line">        <span class="attribute">func</span>: <span class="string">'string'</span>,</span><br><span class="line">        <span class="attribute">agentMode</span>: <span class="string">'string?'</span>,</span><br><span class="line">        <span class="attribute">device</span>: <span class="string">'string?'</span>,</span><br><span class="line">        <span class="attribute">password</span>: <span class="string">'string'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后引入xfire<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xfire <span class="keyword">from</span> <span class="string">'xfire'</span></span><br><span class="line"><span class="keyword">import</span> apiConfig <span class="keyword">from</span> <span class="string">'./api.config.js'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> API = xfire.init(apiConfig)</span><br></pre></td></tr></table></figure></p><blockquote><p>POTST 发送formData类型的数据示例<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">API.login.fire(&#123;&#125;, &#123;</span><br><span class="line">  username: <span class="string">'wangduanduan'</span>,</span><br><span class="line">  password: <span class="string">'123456'</span>,</span><br><span class="line">  namespace: <span class="string">'dd.com'</span></span><br><span class="line">&#125;)</span><br><span class="line">.<span class="keyword">then</span>(<span class="function"><span class="params">(res)</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="keyword">catch</span>(<span class="function"><span class="params">(err)</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>GET 数据示例<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">API.heartBeat.fire(&#123;</span><br><span class="line">  agentId: <span class="string">'5001@dd.com'</span></span><br><span class="line">&#125;)</span><br><span class="line">.<span class="keyword">then</span>(<span class="function"><span class="params">(res)</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="keyword">catch</span>(<span class="function"><span class="params">(err)</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>POST json类型数据示例<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">API.setAgentState.fire(&#123;</span><br><span class="line">  namespace: <span class="string">'windows'</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  agentId: <span class="string">'5001@dd.com'</span>,</span><br><span class="line">  loginId: <span class="string">'5001@dd.com'</span>,</span><br><span class="line">  func: <span class="string">'login'</span>,</span><br><span class="line">  agentMode: <span class="string">'Ready'</span>,</span><br><span class="line">  device: <span class="string">'8001@dd.com'</span>,</span><br><span class="line">  password: <span class="string">'123456'</span></span><br><span class="line">&#125;)</span><br><span class="line">.<span class="keyword">then</span>(<span class="function"><span class="params">(res)</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="keyword">catch</span>(<span class="function"><span class="params">(err)</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p></blockquote><h1 id="5-xfire-API"><a href="#5-xfire-API" class="headerlink" title="5. xfire API"></a>5. xfire API</h1><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> API = xfire.init(<span class="built_in">config</span>)</span><br></pre></td></tr></table></figure><p><code>config 字段说明</code></p><p>注意:如果config无法通过下面的格式验证,则会直接报错</p><table><thead><tr><th>字段名</th><th>类型</th><th>是否必须</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>config.prefix</td><td>string</td><td>是</td><td>无</td><td>接口url公用的前缀</td></tr><tr><td>config.list</td><td>array</td><td>是</td><td>无</td><td>接口数组</td></tr></tbody></table><p><code>config list字段说明</code></p><table><thead><tr><th>字段名</th><th>类型</th><th>是否必须</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td><code>name</code></td><td>string</td><td><code>是</code></td><td>无</td><td>接口名</td></tr><tr><td>desp</td><td>string</td><td>否</td><td>无</td><td>接口描述</td></tr><tr><td><code>path</code></td><td>string</td><td><code>是</code></td><td>无</td><td>接口路径</td></tr><tr><td>method</td><td>enum string</td><td>否</td><td>get</td><td>请求方式: get, post, put, delete </td></tr><tr><td>contentType</td><td>enum string</td><td>否</td><td>json</td><td>请求体类型: json, formData。json会被渲染: application/json; charset=UTF-8, formData会被渲染成: application/x-www-form-urlencoded; charset=UTF-8</td></tr><tr><td>bodyStruct</td><td>object</td><td>否</td><td>无</td><td>请求体格式验证结构, 如果bodyStruct存在,则使用bodyStruct验证body: 具体格式参考<a href="https://github.com/ianstormtaylor/superstruct/blob/master/docs/guide.md" target="_blank" rel="noopener">superstruct</a></td></tr><tr><td>defaultBody</td><td>object</td><td>否</td><td>无</td><td>默认请求体。bodyStruct存在的情况下才有效</td></tr><tr><td>status</td><td>object</td><td>否</td><td>无</td><td>响应状态码及其含义</td></tr></tbody></table><p>当某个list对象的 name 不存在时,config验证时的报错:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Uncaught StructError: Expected a value of<span class="built_in"> type </span>`string` <span class="keyword">for</span> `name` but received `undefined`.</span><br></pre></td></tr></table></figure></p><p>当发送请求时,请求体不符合bodyStruct时, 报错如下<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">name: <span class="string">'login'</span>,</span><br><span class="line">desp: <span class="string">'sercurity login'</span>,</span><br><span class="line">path: <span class="string">'/agent/login'</span>,</span><br><span class="line">method: <span class="string">'post'</span>,</span><br><span class="line">contentType: <span class="string">'formData'</span>,</span><br><span class="line">bodyStruct: &#123;</span><br><span class="line">  username: <span class="string">'string'</span>,</span><br><span class="line">  password: <span class="string">'string'</span>,</span><br><span class="line">  namespace: <span class="string">'string'</span></span><br><span class="line">&#125;,</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">API.login.fire(&#123;&#125;, &#123;</span><br><span class="line">  <span class="comment">// username: '5001',</span></span><br><span class="line">  password: <span class="string">'Aa123456'</span>,</span><br><span class="line">  namespace: <span class="string">'zhen04.cc'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Uncaught StructError: Expected a value <span class="keyword">of</span> type `string` for `username` but received `undefined`.</span><br></pre></td></tr></table></figure></p><h1 id="6-xfire-实例-API"><a href="#6-xfire-实例-API" class="headerlink" title="6. xfire 实例 API"></a>6. xfire 实例 API</h1><p>xfire.init()方法会返回xfire实例对象,该对象上有一个特殊方法<code>$setHeaders</code>, 还有其他的由配置文件产生的方法。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> API = xfire.init(apiConfig)</span><br></pre></td></tr></table></figure><h2 id="6-1-setHeaders-设置请求头部信息"><a href="#6-1-setHeaders-设置请求头部信息" class="headerlink" title="6.1. $setHeaders(): 设置请求头部信息"></a>6.1. $setHeaders(): 设置请求头部信息</h2><p>$setHeaders()用来设置除了<code>contentType</code>以外的请求头, 一旦设置请求头部信息,所有的实例接口在发送请求时,都会带有该头部信息。<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">API.$setHeaders(&#123;sessionId: <span class="string">'jfsldkf-sdflskdjf-sflskfjlsf'</span>&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="6-2-api方法-fire-pathParm-body"><a href="#6-2-api方法-fire-pathParm-body" class="headerlink" title="6.2. api方法: fire(pathParm, body)"></a>6.2. api方法: fire(pathParm, body)</h2><p>pathParm对象上的数据最终会被渲染到<code>请求路径上</code>, body是请求体。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attribute">name</span>: <span class="string">'heartBeat'</span>,</span><br><span class="line">      desp: <span class="string">'agent heart beat'</span>,</span><br><span class="line">      path: <span class="string">'/sdk/api/csta/agent/heartbeat/&#123;&#123;agentId&#125;&#125;'</span>,</span><br><span class="line">      method: <span class="string">'post'</span></span><br><span class="line">    &#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>类似上面的对象,会产生一个以<code>heartBeat</code>为名称的方法,所有请求方法都是fire()方法。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">API<span class="selector-class">.xxx</span><span class="selector-class">.fire</span>(pathParm, body)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不需要请求体时, body可以不传</span></span><br><span class="line">API<span class="selector-class">.xxx</span><span class="selector-class">.fire</span>(pathParm)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不需要参数渲染到路径时,pathParm必须传空对象:&#123;&#125;</span></span><br><span class="line">API<span class="selector-class">.xxx</span><span class="selector-class">.fire</span>(&#123;&#125;, body)</span><br></pre></td></tr></table></figure><p>例子:<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">API.heartBeat(&#123;</span><br><span class="line">  agentId: <span class="string">'5001@ee.com'</span></span><br><span class="line">&#125;)</span><br><span class="line">.<span class="keyword">then</span>(<span class="function"><span class="params">(res)</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="keyword">catch</span>(<span class="function"><span class="params">(err)</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>关于<code>path</code>和 fire的 <code>pathParm</code>参数:<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// path 如下</span></span><br><span class="line"><span class="attribute">path</span>: <span class="string">'/store/order/&#123;&#123;type&#125;&#125;/&#123;&#123;age&#125;&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 则pathParm应该是</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attribute">type</span>: <span class="string">'dog'</span>,</span><br><span class="line">  <span class="attribute">aget</span>: <span class="number">14</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>注意</code>: pathParm不支持复杂的数据类型。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原始数据类型 string, number, boolean 都是可以的</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attribute">key1</span>: <span class="string">'string'</span>,</span><br><span class="line">  <span class="attribute">key2</span>: number,</span><br><span class="line">  <span class="attribute">key3</span>: boolean</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复杂的数据类型,如数组和嵌套对象, 函数, 将导致渲染失败</span></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attribute">key1</span>: [<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>],</span><br><span class="line">  <span class="attribute">key2</span>: &#123;</span><br><span class="line">    <span class="attribute">key3</span>: <span class="string">'string'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attribute">key4</span>: function()&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="7-warning-polyfill"><a href="#7-warning-polyfill" class="headerlink" title="7. :warning: polyfill"></a>7. :warning: polyfill</h1><p>xfire底层使用了浏览器原生的<code>Promise</code>, <code>fetch</code>, <code>Object.keys()</code>, <code>Object.assign()</code> 所以对浏览器是有要求的。<code>xfire本身不带有任何polyfill。</code></p><p>目前IE11以及以下是不支持Promise和fetch的。</p><p>在此给出两个方案:</p><h2 id="7-1-方案1-babel-polyfill"><a href="#7-1-方案1-babel-polyfill" class="headerlink" title="7.1. 方案1: babel-polyfill"></a>7.1. 方案1: babel-polyfill</h2><p>通过引入<a href="https://babeljs.io/docs/usage/polyfill/" target="_blank" rel="noopener">babel-polyfill</a>, 让浏览器支持xfire所需要的原生方法。</p><h2 id="7-2-方案2-polyfill-io"><a href="#7-2-方案2-polyfill-io" class="headerlink" title="7.2. 方案2: polyfill.io"></a>7.2. 方案2: <a href="https://polyfill.io/v2/docs/" target="_blank" rel="noopener">polyfill.io</a></h2><p><img src="https://leanote.com/api/file/getImage?fileId=5a5a136aab6441186c001591" alt=""></p><p>只需要为您的网站,为每个浏览器量身定制的polyfills。 复制代码释放魔法:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.polyfill.io/v2/polyfill.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Polyfill.io读取每个请求的User-Agent头并返回适合请求浏览器的polyfill。 根据您在应用中使用的功能量身定制响应,并查看我们的实例以快速入门。</p><h1 id="8-ajax-Vs-fetch"><a href="#8-ajax-Vs-fetch" class="headerlink" title="8. ajax Vs fetch"></a>8. ajax Vs fetch</h1><p><code>与其使用各种ajax第三方库，不如使用原始fetch</code></p><blockquote><p>总结一下，Fetch 优点主要有：</p><p>语法简洁，更加语义化<br>基于标准 Promise 实现，支持 async/await<br>同构方便，使用 isomorphic-fetch –<a href="https://github.com/camsong/blog/issues/2" target="_blank" rel="noopener">传统 Ajax 已死，Fetch 永生</a><br>未来更容易扩展 – by me</p></blockquote><p>我使用ajax经历过三个阶段：<br>1、 jQuery时期，我用jQuery的<code>ajax</code><br>2、 类似Vue的现代框架时，使用<a href="https://github.com/axios/axios" target="_blank" rel="noopener">axio</a><br>3、 再后来我就使用浏览器原生的<code>fetch</code></p><blockquote><p>Fetch API  提供了一个 JavaScript接口，用于访问和操纵HTTP管道的部分，例如请求和响应。它还提供了一个全局 fetch()方法，该方法提供了一种简单，合乎逻辑的方式来跨网络异步获取资源。– <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch" target="_blank" rel="noopener">MDN</a></p><p>这种功能以前是使用  XMLHttpRequest实现的。Fetch提供了一个更好的替代方法，可以很容易地被其他技术使用，例如 Service Workers。Fetch还提供了单个逻辑位置来定义其他HTTP相关概念，例如 CORS和HTTP的扩展。– <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch" target="_blank" rel="noopener">MDN</a></p></blockquote><p>从<a href="https://caniuse.com/#search=fetch" target="_blank" rel="noopener">caniuse</a>的数据来看，fetch方法除IE11不支持以外，大部分常用浏览器都支持了。</p><p>fetch接口示例：<br><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'/users.json'</span>)</span><br><span class="line">  .<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">(response)</span> &#123;</span></span><br><span class="line">    <span class="keyword">return</span> response.json()</span><br><span class="line">  &#125;).<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">(json)</span> &#123;</span></span><br><span class="line">    console.<span class="built_in">log</span>(<span class="string">'parsed json'</span>, json)</span><br><span class="line">  &#125;).<span class="keyword">catch</span>(<span class="function"><span class="keyword">function</span><span class="params">(ex)</span> &#123;</span></span><br><span class="line">    console.<span class="built_in">log</span>(<span class="string">'parsing failed'</span>, ex)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  fetch(<span class="string">'/users.html'</span>)</span><br><span class="line">  .<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">(response)</span> &#123;</span></span><br><span class="line">    <span class="keyword">return</span> response.text()</span><br><span class="line">  &#125;).<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">(body)</span> &#123;</span></span><br><span class="line">    document.body.innerHTML = body</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></p><h1 id="9-fetch相关文章"><a href="#9-fetch相关文章" class="headerlink" title="9. fetch相关文章"></a>9. fetch相关文章</h1><ul><li><a href="https://github.com/camsong/blog/issues/2" target="_blank" rel="noopener">传统 Ajax 已死，Fetch 永生</a></li><li><a href="https://juejin.im/entry/574512b7c26a38006c43567c" target="_blank" rel="noopener">fetch 简介: 新一代 Ajax API</a></li><li><a href="http://undefinedblog.com/window-fetch-is-not-as-good-as-you-imagined/" target="_blank" rel="noopener">fetch 没有你想象的那么美</a></li></ul><h1 id="10-fetch相关库"><a href="#10-fetch相关库" class="headerlink" title="10. fetch相关库"></a>10. fetch相关库</h1><ul><li><a href="https://github.com/github/fetch" target="_blank" rel="noopener">github/fetch</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;我曾写过两篇文章 &lt;a href=&quot;https://segmentfault.com/a/1190000008678653&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;jQuery进阶 用最优雅的方式写ajax请求&lt;/a&gt;, &lt;
      
    
    </summary>
    
    
      <category term="xfire" scheme="https://wdd.js.org/tags/xfire/"/>
    
      <category term="fetch" scheme="https://wdd.js.org/tags/fetch/"/>
    
  </entry>
  
</feed>

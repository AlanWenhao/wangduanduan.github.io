<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>洞香春</title>
  
  <subtitle>洞香春以名士荟萃、谈论国事、交流思想而著称于当时列国 --《大秦帝国》</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wdd.js.org/"/>
  <updated>2018-06-04T10:31:19.000Z</updated>
  <id>https://wdd.js.org/</id>
  
  <author>
    <name>王端端</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记一次如何解决谷歌浏览器占用过高cpu问题过程</title>
    <link href="https://wdd.js.org/how-to-fix-google-chrome-very-high-cpu-cost.html"/>
    <id>https://wdd.js.org/how-to-fix-google-chrome-very-high-cpu-cost.html</id>
    <published>2018-06-04T09:58:24.000Z</published>
    <updated>2018-06-04T10:31:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>有时候发现mac风扇响的厉害，于是我检查了mac系统的活动监视器，发现Google Chrome Helper占用99%的CPU。</p><p>通常来说Chrome如果占用过高的内存，这并不是什么问题，毕竟Chrome的性能以及易用性是建立在占用很多内存的基础上的。<code>但是无论什么程序，持续的占用超过80%的cpu，都是极不正常的</code>。大多数程序都是占用维持在低于10%的CPU。</p><p>活动监视器指出问题出现在Chrome浏览器。那么问题可以再次细分为三块。</p><ol><li>Chrome系统自身问题</li><li>一些插件，例如flash插件，扩展插件</li><li>网页程序js出现的问题</li></ol><p>其实Chrome浏览器自身也是有任务管理器的，一般来说windows版chrome按住<code>shift+esc</code>就会调出任务管理器窗口。mac版调出任务管理器没有快捷，只能通过<code>Window &gt; Task Manager</code>调出。</p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180604181340_ymCT2T_Jietu20180604-174820.jpeg" alt=""></p><p>调出任务管理器后，发现一个标签页，CPU占用率达到99%， 那就说明，应该是这个标签页中存在持续占用大量CPU计算的程序。</p><p>最后找到这个页面，发现该页面背景图是一种动态粒子图。就是基于<a href="https://github.com/VincentGarreau/particles.js/" target="_blank" rel="noopener">particles.js</a>做的。我想，终于找到你了。</p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180604181757_rRfc8L_687474703a2f2f76696e63656e74676172726561752e636f6d2f7061727469636c65732e6a732f6173736574732f696d672f6769746875622d73637265656e2e6a7067.jpeg" alt=""></p><p>于是我把这个动态图的相关js代码给注释掉，电脑的风扇也终于变得安静了。</p><p>问题解决的总结：<code>解决问题的方法时很简单的，基于一个现象，找到一个原因，基于这个原因再找到一个现象，然后一步一步缩小问题范围，逼近最终原因。</code></p><p>机器CPU过高，一般都是可以从任务管理器着手解决。系统的任务管理器可以监控各个程序占用的CPU是否正常，通常程序自身也是有任务管理的。像谷歌浏览器这种软件，几乎本身就是一个操作系统，所以说它的任务管理器也是必不可少的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有时候发现mac风扇响的厉害，于是我检查了mac系统的活动监视器，发现Google Chrome Helper占用99%的CPU。&lt;/p&gt;
&lt;p&gt;通常来说Chrome如果占用过高的内存，这并不是什么问题，毕竟Chrome的性能以及易用性是建立在占用很多内存的基础上的。&lt;co
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>关于白血病的思考</title>
    <link href="https://wdd.js.org/think-about-leukemia.html"/>
    <id>https://wdd.js.org/think-about-leukemia.html</id>
    <published>2018-06-03T14:44:54.000Z</published>
    <updated>2018-06-03T15:13:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近有个朋友的孩子得了白血病，我曾经以为白血病就是血液是白色的，后来查了资料才知道，白血病的白字是白细胞的意思。</p><p>虽然我对白血病不甚了解，我也知道这个病是很严重的，最低要花个四五十万，可能也是治不好。</p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180129134826_f2U0eJ_Screenshot.jpeg" alt=""></p><p>达尔文的物种进化论物竞天择，适者生存在人类面前似乎并不顶用。脖子短的长颈鹿慢慢饿死了，生存下来的都是脖子长的。按照这个道理，人类之中得了各种癌症的都会慢慢死去，逐渐减少，剩下的人应该都是健康的居多。但是事实呢，各种得了疑难杂症的人不仅没有减少，反而增多了。</p><p>你不能因为一个人有某种癌症，就剥夺他繁衍后代的权利吧。</p><p>最近在看一本书《我们为什么生病》，这本书我还没看完，但是获取到一点概念：生病的原因并不仅仅只有遗传因素，外界的因素往往也是至关重要的。</p><p>以后我看完这本书时，再来补充内容吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近有个朋友的孩子得了白血病，我曾经以为白血病就是血液是白色的，后来查了资料才知道，白血病的白字是白细胞的意思。&lt;/p&gt;
&lt;p&gt;虽然我对白血病不甚了解，我也知道这个病是很严重的，最低要花个四五十万，可能也是治不好。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p3als
      
    
    </summary>
    
    
      <category term="白血病" scheme="https://wdd.js.org/tags/%E7%99%BD%E8%A1%80%E7%97%85/"/>
    
  </entry>
  
  <entry>
    <title>浏览器端数据库存储方案的整理 -- indexDB 和 localStorage</title>
    <link href="https://wdd.js.org/client-side-storage-about-indexdb.html"/>
    <id>https://wdd.js.org/client-side-storage-about-indexdb.html</id>
    <published>2018-06-02T04:17:17.000Z</published>
    <updated>2018-06-02T05:31:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>有些安全性不太重要的数据，我不想花大力气搞一台服务器，再安装mysql或者 monogdb，再写点rest接口。这也太麻烦了，浏览器里本来就有很好用的数据库。你为什么不尝试一下呢？</p></blockquote><h1 id="1-客户端存储目前有两个方案比较"><a href="#1-客户端存储目前有两个方案比较" class="headerlink" title="1. 客户端存储目前有两个方案比较"></a>1. 客户端存储目前有两个方案比较</h1><table><thead><tr><th>方案</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>localStorage</td><td>简单易用，同步操作</td><td>存储容量小，一般不超过10MB</td></tr><tr><td>indexDB</td><td>接口都是异步的，操作不便</td><td>容量比localStorage大</td></tr></tbody></table><p>如果要使用localStorage，那么存储量比较小。如果是用indexDB，那么最好找点开源库，直接封装友好的API, 来方便我们使用indexDB。</p><p>下面介绍一些很好用的的库。</p><h1 id="2-简介"><a href="#2-简介" class="headerlink" title="2. 简介"></a>2. 简介</h1><h2 id="2-1-localForage"><a href="#2-1-localForage" class="headerlink" title="2.1. localForage"></a>2.1. localForage</h2><ul><li><code>离线存储， 提供强大的API封装IndexedDB,WebSQL,localStorage</code></li><li>12073 star</li><li><a href="https://github.com/localForage/localForage" target="_blank" rel="noopener">https://github.com/localForage/localForage</a></li></ul><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">localforage.setItem(<span class="string">'key'</span>, <span class="string">'value'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(err)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// if err is non-null, we got an error</span></span><br><span class="line">  localforage.getItem(<span class="string">'key'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(err, value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// if err is non-null, we got an error. otherwise, value is the value</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="2-2-Dexie-js"><a href="#2-2-Dexie-js" class="headerlink" title="2.2. Dexie.js"></a>2.2. Dexie.js</h2><ul><li><code>专业封装 IndexedDB</code></li><li>3040 star</li><li><a href="https://github.com/dfahlander/Dexie.js" target="_blank" rel="noopener">https://github.com/dfahlander/Dexie.js</a></li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> db = <span class="keyword">new</span> Dexie(<span class="string">'MyDatabase'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Declare tables, IDs and indexes</span></span><br><span class="line">db.version(<span class="number">1</span>).stores(&#123;</span><br><span class="line">friends: <span class="string">'++id, name, age'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"> <span class="comment">// Find some old friends</span></span><br><span class="line"><span class="keyword">await</span> db.friends</span><br><span class="line">.<span class="keyword">where</span>(<span class="string">'age'</span>)</span><br><span class="line">.above(<span class="number">75</span>)</span><br><span class="line">.toArray();</span><br><span class="line"></span><br><span class="line"><span class="comment">// or make a new one</span></span><br><span class="line"><span class="keyword">await</span> db.friends.<span class="keyword">add</span>(&#123;</span><br><span class="line">name: <span class="string">'Camilla'</span>,</span><br><span class="line">age: <span class="number">25</span>,</span><br><span class="line">street: <span class="string">'East 13:th Street'</span>,</span><br><span class="line">picture: <span class="keyword">await</span> getBlob(<span class="string">'camilla.png'</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="2-3-zangodb"><a href="#2-3-zangodb" class="headerlink" title="2.3. zangodb"></a>2.3. zangodb</h2><ul><li><code>给HTML5 IndexedDB 封装类似mongodb类似接口, 如果你熟悉mongodb, 那一定会用zangodb</code></li><li>688 star</li><li><a href="https://github.com/erikolson186/zangodb" target="_blank" rel="noopener">https://github.com/erikolson186/zangodb</a></li></ul><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> db = new zango.Db(<span class="string">'mydb'</span>, &#123; people: [<span class="string">'age'</span>] &#125;);</span><br><span class="line"><span class="keyword">let</span> people = db.collection(<span class="string">'people'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> docs = [</span><br><span class="line">    &#123; name: <span class="string">'Frank'</span>, age: <span class="number">20</span> &#125;,</span><br><span class="line">    &#123; name: <span class="string">'Thomas'</span>, age: <span class="number">33</span> &#125;,</span><br><span class="line">    &#123; name: <span class="string">'Todd'</span>, age: <span class="number">33</span> &#125;,</span><br><span class="line">    &#123; name: <span class="string">'John'</span>, age: <span class="number">28</span> &#125;,</span><br><span class="line">    &#123; name: <span class="string">'Peter'</span>, age: <span class="number">33</span> &#125;,</span><br><span class="line">    &#123; name: <span class="string">'George'</span>, age: <span class="number">28</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">people.<span class="keyword">insert</span>(docs).<span class="keyword">then</span>(() =&gt; &#123;</span><br><span class="line">    return people.find(&#123;</span><br><span class="line">        name: &#123; $ne: <span class="string">'John'</span> &#125;,</span><br><span class="line">        age: &#123; $gt: <span class="number">20</span> &#125;</span><br><span class="line">    &#125;).group(&#123;</span><br><span class="line">        _id: &#123; age: <span class="string">'$age'</span> &#125;,</span><br><span class="line">        count: &#123; $sum: <span class="number">1</span> &#125;</span><br><span class="line">    &#125;).project(&#123;</span><br><span class="line">        _id: <span class="number">0</span>,</span><br><span class="line">        age: <span class="string">'$_id.age'</span></span><br><span class="line">    &#125;).sort(&#123;</span><br><span class="line">        age: -<span class="number">1</span></span><br><span class="line">    &#125;).forEach(doc =&gt; console.log(<span class="string">'doc:'</span>, doc));</span><br><span class="line">&#125;).<span class="keyword">catch</span>(error =&gt; console.error(error));</span><br></pre></td></tr></table></figure><h2 id="2-4-JsStore"><a href="#2-4-JsStore" class="headerlink" title="2.4. JsStore"></a>2.4. JsStore</h2><ul><li><code>使用类似 sql的接口操作 indexDB</code></li><li>74 star</li><li><a href="https://github.com/ujjwalguptaofficial/JsStore" target="_blank" rel="noopener">https://github.com/ujjwalguptaofficial/JsStore</a></li></ul><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">var <span class="keyword">value</span> = &#123;</span><br><span class="line">    column<span class="number">1</span>: <span class="keyword">value</span><span class="number">1</span>,</span><br><span class="line">    column<span class="number">2</span>: <span class="keyword">value</span><span class="number">2</span>,</span><br><span class="line">    column<span class="number">3</span>: <span class="keyword">value</span><span class="number">3</span>,</span><br><span class="line">    ...</span><br><span class="line">    columnN: valueN</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">connection.insert(&#123;</span><br><span class="line">    into: <span class="string">"TABLE_NAME"</span>,</span><br><span class="line">    values: [Value], <span class="comment">//you can insert multiple values at a time</span></span><br><span class="line"></span><br><span class="line">&#125;).<span class="keyword">then</span>(<span class="keyword">function</span>(rowsAffected) &#123;</span><br><span class="line">    <span class="keyword">if</span> (rowsAffected &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        alert(<span class="string">'Successfully Added'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).<span class="keyword">catch</span>(<span class="keyword">function</span>(error) &#123;</span><br><span class="line">    alert(error.message);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="2-5-minimongo"><a href="#2-5-minimongo" class="headerlink" title="2.5. minimongo"></a>2.5. minimongo</h2><ul><li><code>基于localstorage的浏览器端mongodb数据库</code></li><li>697 star</li><li><a href="https://github.com/mWater/minimongo" target="_blank" rel="noopener">https://github.com/mWater/minimongo</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Require minimongo</span></span><br><span class="line"><span class="keyword">var</span> minimongo = <span class="built_in">require</span>(<span class="string">"minimongo"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> LocalDb = minimongo.MemoryDb;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create local db (in memory database with no backing)</span></span><br><span class="line">db = <span class="keyword">new</span> LocalDb();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add a collection to the database</span></span><br><span class="line">db.addCollection(<span class="string">"animals"</span>);</span><br><span class="line"></span><br><span class="line">doc = &#123; <span class="attr">species</span>: <span class="string">"dog"</span>, <span class="attr">name</span>: <span class="string">"Bingo"</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Always use upsert for both inserts and modifies</span></span><br><span class="line">db.animals.upsert(doc, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// Success:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Query dog (with no query options beyond a selector)</span></span><br><span class="line">db.animals.findOne(&#123; <span class="attr">species</span>:<span class="string">"dog"</span> &#125;, &#123;&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Dog's name is: "</span> + res.name);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="2-6-pouchdb"><a href="#2-6-pouchdb" class="headerlink" title="2.6. pouchdb"></a>2.6. pouchdb</h2><ul><li><code>基于indexDB的CouchDB-style浏览器端数据库</code></li><li>10599 star</li><li><a href="https://github.com/pouchdb/pouchdb" target="_blank" rel="noopener">https://github.com/pouchdb/pouchdb</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> db = <span class="keyword">new</span> PouchDB(<span class="string">'dbname'</span>);</span><br><span class="line"></span><br><span class="line">db.put(&#123;</span><br><span class="line">  _id: <span class="string">'dave@gmail.com'</span>,</span><br><span class="line">  name: <span class="string">'David'</span>,</span><br><span class="line">  age: <span class="number">69</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">db.changes().on(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Ch-Ch-Changes'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">db.replicate.to(<span class="string">'http://example.com/mydb'</span>);</span><br></pre></td></tr></table></figure><h2 id="2-7-lowdb"><a href="#2-7-lowdb" class="headerlink" title="2.7. lowdb"></a>2.7. lowdb</h2><ul><li><code>小型json数据库，浏览器端基于localStorage, lodash风格的接口，让它非常可爱😊</code></li><li>7997 star</li><li><a href="https://github.com/typicode/lowdb" target="_blank" rel="noopener">https://github.com/typicode/lowdb</a></li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> low from <span class="string">'lowdb'</span></span><br><span class="line"><span class="keyword">import</span> LocalStorage from <span class="string">'lowdb/adapters/LocalStorage'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> adapter = <span class="keyword">new</span> LocalStorage(<span class="string">'db'</span>)</span><br><span class="line"><span class="keyword">const</span> db = low(adapter)</span><br><span class="line"></span><br><span class="line">db.defaults(&#123; posts: [] &#125;)</span><br><span class="line">  .<span class="built_in">write</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Data is automatically saved to localStorage</span></span><br><span class="line">db.<span class="built_in">get</span>(<span class="string">'posts'</span>)</span><br><span class="line">  .push(&#123; title: <span class="string">'lowdb'</span> &#125;)</span><br><span class="line">  .<span class="built_in">write</span>()</span><br></pre></td></tr></table></figure><h1 id="3-参考"><a href="#3-参考" class="headerlink" title="3. 参考"></a>3. 参考</h1><ul><li><a href="https://www.sitepoint.com/html5-local-storage-revisited/" target="_blank" rel="noopener">html5-local-storage-revisited</a></li><li><a href="https://stackoverflow.com/questions/5692820/maximum-item-size-in-indexeddb" target="_blank" rel="noopener">maximum-item-size-in-indexeddb</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;有些安全性不太重要的数据，我不想花大力气搞一台服务器，再安装mysql或者 monogdb，再写点rest接口。这也太麻烦了，浏览器里本来就有很好用的数据库。你为什么不尝试一下呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-客户端存储
      
    
    </summary>
    
    
      <category term="indexDB" scheme="https://wdd.js.org/tags/indexDB/"/>
    
  </entry>
  
  <entry>
    <title>你应该尽早使用Vuex</title>
    <link href="https://wdd.js.org/you-should-use-vuex-early.html"/>
    <id>https://wdd.js.org/you-should-use-vuex-early.html</id>
    <published>2018-05-30T13:13:46.000Z</published>
    <updated>2018-05-30T13:39:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前做的一个项目，使用了Vuex。最近又做了一个项目，也打算用Vuex。只是某些Vuex的概念比较模糊了。所以打算写篇文章记录一下。</p><p>我记得以前看过一篇文章，核心思想就是<code>你应该尽早使用Vuex</code>，但是在网上也搜不到了。</p><p>无论谁来讲Vuex, 其实都没有官网讲的好，参见官网<a href="https://vuex.vuejs.org/zh/" target="_blank" rel="noopener">Vuex 是什么？</a>, 如果你对Vuex有任何概念不清晰，官网都是最好的老师。</p><p>官网最后说：</p><blockquote><p>如果您不打算开发大型单页应用，使用 Vuex 可能是繁琐冗余的。确实是如此——如果您的应用够简单，您最好不要使用 Vuex。一个简单的 global event bus 就足够您所需了。参考<a href="https://alligator.io/vuejs/global-event-bus/" target="_blank" rel="noopener">Creating a Global Event Bus with Vue.js</a></p></blockquote><p>但是，杀鸡用牛刀也未尝不可。</p><p>程序员往往喜欢：Talk is cheap, show me the code。废话少说，放码过来。我也是，有时候想弄清楚一个问题，往往喜欢去直接看代码。但是对整体的设计原理概念不甚了解。</p><p>但是，当我看到官网这张图，我盯着看了几分钟后，理解了这张图，也完全理解了Vuex。</p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180530213345_GW7iQ8_Jietu20180530-213253.jpeg" alt=""></p><p>那么为什么要尽早使用Vuex呢？</p><ol><li>Vuex其实很简单，没你想象的那么复杂</li><li>越早Vuex使用越熟练，也能提高自己的知识储备</li><li>你迟早需要状态管理的，与其将来痛苦重构，不如尽早享受Vuex带来的畅爽感觉</li></ol><p>至于怎么使用Vuex，我就不多说了。网上优秀的教程蛮多的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前做的一个项目，使用了Vuex。最近又做了一个项目，也打算用Vuex。只是某些Vuex的概念比较模糊了。所以打算写篇文章记录一下。&lt;/p&gt;
&lt;p&gt;我记得以前看过一篇文章，核心思想就是&lt;code&gt;你应该尽早使用Vuex&lt;/code&gt;，但是在网上也搜不到了。&lt;/p&gt;
&lt;p&gt;无
      
    
    </summary>
    
    
      <category term="Vue" scheme="https://wdd.js.org/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>IE浏览器不支持location.origin</title>
    <link href="https://wdd.js.org/ie-not-support-location-origin.html"/>
    <id>https://wdd.js.org/ie-not-support-location-origin.html</id>
    <published>2018-05-24T06:50:49.000Z</published>
    <updated>2018-05-24T06:54:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>某些IE浏览器location.origin属性是undefined，所以如果你要使用该属性，那么要注意做个能力检测。</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="built_in">window</span>.location.origin) &#123;</span><br><span class="line">  <span class="built_in">window</span>.location.origin = <span class="built_in">window</span>.location.protocol + <span class="string">"//"</span> + <span class="built_in">window</span>.location.hostname + (<span class="built_in">window</span>.location.port ? <span class="string">':'</span> + <span class="built_in">window</span>.location.port: <span class="string">''</span>);</span><br><span class="line">&#125;i</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;某些IE浏览器location.origin属性是undefined，所以如果你要使用该属性，那么要注意做个能力检测。&lt;/p&gt;
&lt;figure class=&quot;highlight coffeescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre
      
    
    </summary>
    
    
      <category term="ie" scheme="https://wdd.js.org/tags/ie/"/>
    
  </entry>
  
  <entry>
    <title>端到端测试哪家强？不容错过的Cypress</title>
    <link href="https://wdd.js.org/e2e-testing-hacker-news-with-cypress.html"/>
    <id>https://wdd.js.org/e2e-testing-hacker-news-with-cypress.html</id>
    <published>2018-05-14T02:43:02.000Z</published>
    <updated>2018-05-17T09:34:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-目前E2E测试工具有哪些？"><a href="#1-目前E2E测试工具有哪些？" class="headerlink" title="1. 目前E2E测试工具有哪些？"></a>1. 目前E2E测试工具有哪些？</h1><table><thead><tr><th>项目</th><th>Web</th><th>Star</th></tr></thead><tbody><tr><td><a href="https://github.com/GoogleChrome/puppeteer" target="_blank" rel="noopener">puppeteer</a></td><td>Chromium (~170Mb Mac, ~282Mb Linux, ~280Mb Win)</td><td>31906</td></tr><tr><td><a href="https://github.com/segmentio/nightmare" target="_blank" rel="noopener">nightmare</a></td><td>Electron</td><td>15502</td></tr><tr><td><a href="https://github.com/nightwatchjs/nightwatch" target="_blank" rel="noopener">nightwatch</a></td><td>WebDriver</td><td>8135</td></tr><tr><td><a href="https://github.com/angular/protractor" target="_blank" rel="noopener">protractor</a></td><td>selenium</td><td>7532</td></tr><tr><td><a href="https://github.com/casperjs/casperjs" target="_blank" rel="noopener">casperjs</a></td><td>PhantomJS</td><td>7180</td></tr><tr><td><a href="https://github.com/cypress-io/cypress" target="_blank" rel="noopener">cypress</a></td><td>Electron</td><td>5303</td></tr><tr><td><a href="https://github.com/assaf/zombie" target="_blank" rel="noopener">Zombie</a></td><td>不需要</td><td>4880</td></tr><tr><td><a href="https://github.com/DevExpress/testcafe" target="_blank" rel="noopener">testcafe</a></td><td>不需要</td><td>4645</td></tr><tr><td><a href="https://github.com/Codeception/CodeceptJS" target="_blank" rel="noopener">CodeceptJS</a></td><td>webdriverio</td><td>1665</td></tr></tbody></table><p>端到端测试一般都需要一个Web容器，来运行前端应用。例如Chromium, Electron, PhantomJS, WebDriver等等。</p><p>从体积角度考虑，这些Web容器<code>体积一般都很大</code>。</p><p>从速度的角度考虑：<code>PhantomJS, WebDriver &lt; Electon, Chromium</code>。</p><p>而且每个工具的侧重点也不同，建议按照需要去选择。</p><h1 id="2-优秀的端到端测试工具应该有哪些特点？"><a href="#2-优秀的端到端测试工具应该有哪些特点？" class="headerlink" title="2. 优秀的端到端测试工具应该有哪些特点？"></a>2. 优秀的端到端测试工具应该有哪些特点？</h1><ul><li>安装简易：我希望它非常容易安装，最好可以一行命令就可以安装完毕</li><li>依赖较少：我只想做个E2E测试，不想安装jdk, python之类的东西</li><li>速度很快：运行测试用例的速度要快</li><li>报错详细：详细的报错</li><li>API完备：鼠标键盘操作接口，DOM查询接口等</li><li>Debug方便：出错了可以很方便的调试，而不是去猜</li></ul><h1 id="3-为什么要用Cypress？"><a href="#3-为什么要用Cypress？" class="headerlink" title="3. 为什么要用Cypress？"></a>3. 为什么要用Cypress？</h1><p>Cypress基本上拥有了上面的特点之外，还有以下特点。</p><ul><li><code>时光穿梭</code> 测试运行时，Cypress会自动截图，你可以轻易的查看每个时间的截图</li><li><code>Debug友好</code> 不需要再去猜测为什么测试有失败了，Cypress提供Chrome DevTools, 所以Debug是非常方便的。</li><li><code>实时刷新</code> Cypress检测测试用例改变后，会自动刷新</li><li><code>自动等待</code> 不需要在使用wait类似的方法等待某个DOM出现，Cypress会自动帮你做这些</li><li><code>Spies, stubs, and clocks</code> Verify and control the behavior of functions, server responses, or timers. The same functionality you love from unit testing is right at your fingertips.</li><li><code>网络流量控制</code> 在不涉及服务器的情况下轻松控制，存根和测试边缘案例。无论你喜欢，你都可以存储网络流量。</li><li><code>一致的结果</code> 我们的架构不使用Selenium或WebDriver。向快速，一致和可靠的无剥落测试问好。</li><li><code>截图和视频</code> 查看失败时自动截取的截图，或无条件运行时整个测试套件的视频。</li></ul><h1 id="4-安装cypress"><a href="#4-安装cypress" class="headerlink" title="4. 安装cypress"></a>4. 安装cypress</h1><h2 id="4-1-使用npm方法安装"><a href="#4-1-使用npm方法安装" class="headerlink" title="4.1. 使用npm方法安装"></a>4.1. 使用npm方法安装</h2><p>注意这个方法需要下载压缩过Electron, 所以可能会花费几分钟时间，请耐心等待。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="selector-tag">i</span> cypress -D</span><br></pre></td></tr></table></figure><h2 id="4-2-直接下载Cypress客户端"><a href="#4-2-直接下载Cypress客户端" class="headerlink" title="4.2. 直接下载Cypress客户端"></a>4.2. 直接下载Cypress客户端</h2><p>你可以把Cypress想想成一个浏览器，可以单独把它下载下来，安装到电脑上，当做一个客户端软件来用。</p><p>打开之后就是这个样子，可以手动去打开项目，运行测试用例。</p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180516092612_wiNNiZ_Jietu20180516-092604.jpeg" alt=""></p><h1 id="5-初始化Cypress"><a href="#5-初始化Cypress" class="headerlink" title="5. 初始化Cypress"></a>5. 初始化Cypress</h1><p>Cypress初始化，会在项目根目录自动生成cypress文件夹，并且里面有些测试用例模板，可以很方便的学习。</p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180516092918_zwtp3h_Jietu20180516-092911.jpeg" alt=""></p><p>初始化的方法有两种。</p><ol><li><p>如果你下载的客户端，那么你用客户端打开项目时，它会检测项目目录下有没有Cypress目录，如果没有，就自动帮你生成模板。</p></li><li><p>如果你使用npm安装的Cypress，可以使用命令<code>node_modules/.bin/cypress open</code>去初始化</p></li></ol><h1 id="6-编写测试用例"><a href="#6-编写测试用例" class="headerlink" title="6. 编写测试用例"></a>6. 编写测试用例</h1><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hacker-news.js</span></span><br><span class="line"><span class="selector-tag">describe</span>(<span class="string">'Hacker News登录测试'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="selector-tag">it</span>(<span class="string">'登录页面'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="selector-tag">cy</span><span class="selector-class">.visit</span>(<span class="string">'https://news.ycombinator.com/login?goto=news'</span>)</span><br><span class="line">    <span class="selector-tag">cy</span><span class="selector-class">.get</span>(<span class="string">'input[name="acct"]'</span>)<span class="selector-class">.eq</span>(<span class="number">0</span>)<span class="selector-class">.type</span>(<span class="string">'test'</span>)</span><br><span class="line">    <span class="selector-tag">cy</span><span class="selector-class">.get</span>(<span class="string">'input[name="pw"]'</span>)<span class="selector-class">.eq</span>(<span class="number">0</span>)<span class="selector-class">.type</span>(<span class="string">'123456'</span>)</span><br><span class="line">    <span class="selector-tag">cy</span><span class="selector-class">.get</span>(<span class="string">'input[value="login"]'</span>)<span class="selector-class">.click</span>()</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">cy</span><span class="selector-class">.contains</span>(<span class="string">'Bad login'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="7-查看结果"><a href="#7-查看结果" class="headerlink" title="7. 查看结果"></a>7. 查看结果</h1><p>打开Cypress客户端，选择要测试项目的根目录，点击hacker-news.js后，测试用例就会自动运行</p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180517162959_83xejF_Jietu20180517-162945.jpeg" alt=""></p><p>运行结束后，左侧栏目鼠标移动上去，右侧栏都会显示出该步骤的截图，所以叫做时光穿梭功能。</p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180517164346_Lipgu6_Jietu20180517-163217.jpeg" alt=""></p><p>从截图也可以看出来，Cypress的步骤描述很详细。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-目前E2E测试工具有哪些？&quot;&gt;&lt;a href=&quot;#1-目前E2E测试工具有哪些？&quot; class=&quot;headerlink&quot; title=&quot;1. 目前E2E测试工具有哪些？&quot;&gt;&lt;/a&gt;1. 目前E2E测试工具有哪些？&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr
      
    
    </summary>
    
    
      <category term="端到端测试" scheme="https://wdd.js.org/tags/%E7%AB%AF%E5%88%B0%E7%AB%AF%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>BAM(Bug Analysis Method) Bug分析方法 之 TPAF</title>
    <link href="https://wdd.js.org/BAU.html"/>
    <id>https://wdd.js.org/BAU.html</id>
    <published>2018-04-27T12:11:44.000Z</published>
    <updated>2018-04-27T13:28:51.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>行为分析小组 (Behavioral Analysis Unit，BAU)是美国联邦调查局国家暴力犯罪分析中心(NCAVC)下设的一个部门。该部门旨在运用行为科学分析来协助犯罪调查。国家暴力犯罪分析中心和行为分析小组的主要任务是提供行为基础调查和/或通过将案例经验、调查和训练应用到时效性的罪案中以提供作战保障，特别是涉及到有暴力倾向的案件。</p></blockquote><p>之所以提到BAU, 我认为Bug分析和行为分析有类似的方法。</p><p><code>TPQF</code>是指我总结的Bug分析的方法，分别是：<code>Time</code>(时间), <code>Probability</code>(概率), <code>Area</code>(面积), <code>Feature</code>(特征)</p><h1 id="1-BAM-目标"><a href="#1-BAM-目标" class="headerlink" title="1. BAM 目标"></a>1. BAM 目标</h1><p>Bug分析的最终目标并不仅仅是解决Bug，而是在解决Bug的基础上记录问题日志，找到问题的触发器，建立对应的问题处理模型。</p><ul><li><code>记录</code>: 记录一切可以记录的内容，包括且不限于截图，日志，视频，连天记录。记录这些内容的，可以让你不再每次都需要去重现问题，记录日志。</li><li><code>触发器</code>: 找到Bug的触发器往往最重要的一个环</li><li><code>模型</code>: 建立Bug模型，为以后的问题提供更快的解决思路</li></ul><h1 id="2-Time-时间"><a href="#2-Time-时间" class="headerlink" title="2. Time(时间)"></a>2. Time(时间)</h1><p>问题的时间点有三个，是务必确定要记录的。</p><ol><li><code>Bug发生的时间点</code>: 很多日志依赖于这个时间点去查询</li><li><code>往前正常的时间点</code>: 例如今天出现bug, 那昨天正常吗？ 今天12点出现的Bug, 那今天10点正常吗？ 确定这两个点，那么这两点之间发生的事情，很可能就是引发Bug的原因。例如昨天正常的服务，今天出现了Bug，如果昨天和今天之间，某些服务更新了，那么很可能是因为某个服务更新而引起的Bug。</li></ol><p>时间除了要确定问题出现的区间之外，最重要的时间的<code>紧迫性</code>。线上生产环境突发的严重问题，是在解决不了的话，要尽快重启服务，以<code>降低客户的损失为首要目的</code>，而不是把时间花在分析Bug上。</p><h1 id="3-Probability-概率"><a href="#3-Probability-概率" class="headerlink" title="3. Probability(概率)"></a>3. Probability(概率)</h1><p>问题的概率是针对于单个客户端而言的。概率是指单个客户端出现问题的概率。有以下两个主要可能性。</p><ol><li><code>偶然事件</code> 偶然事件是一种小概率事件，很难找到Bug的触发器，也无法重现，只能通过查询相关日志获取才有可能发现一点蛛丝马迹</li><li><code>必现事件</code> 必然事件是100%出现的事件，找到概率的可能性比较大</li></ol><h1 id="4-Area-面积"><a href="#4-Area-面积" class="headerlink" title="4. Area(面积)"></a>4. Area(面积)</h1><p>Bug影响的面积有三种模型</p><ul><li><code>单点</code>: 现在服务的架构一般都是CS结构，单个客户端出现问题，往往是客户端的问题</li><li><code>部分</code>: 部分客户端的问题，如果该部分是同一区域的，那么很可能是该区域网络的问题。如果该区域使用同一个服务端，那么可能是单个服务节点出现问题</li><li><code>全部</code>: 全部都出现问题，基本上都是服务端出现了问题</li></ul><h1 id="5-Feature-特征"><a href="#5-Feature-特征" class="headerlink" title="5. Feature(特征)"></a>5. Feature(特征)</h1><ul><li><code>线性特征</code>: 随时间缓慢增长。可能是内存泄露</li><li><code>指数特征</code>: 还没想到</li><li><code>对数特征</code>: 快速打到一定程度后，不再增长。可能是连接池溢出</li><li><code>时间特征</code>: 某个时间端内快速增长，过了该时刻快速下降。例如每天8到9点是用户激增的时间范围</li></ul><h1 id="6-更远的未来"><a href="#6-更远的未来" class="headerlink" title="6. 更远的未来"></a>6. 更远的未来</h1><p>目前我们的编程都是这样的：定义规律，给出输入，拿到输出</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义规律</span></span><br><span class="line"><span class="built_in">f</span></span><br><span class="line"><span class="comment">// 喂入输入</span></span><br><span class="line">x</span><br><span class="line"><span class="comment">// 计算出输出</span></span><br><span class="line"><span class="built_in">y</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 给出输入</span></span><br><span class="line">y = <span class="built_in">f</span>(x)</span><br></pre></td></tr></table></figure><p>大数据与人工智能时代：给出输入和输出，训练出规律</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 喂入 输入x 或 输出 y</span></span><br><span class="line">x or <span class="built_in">y</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 训练出</span></span><br><span class="line"><span class="built_in">f</span></span><br></pre></td></tr></table></figure><p>或许有一天，直接给出Bug相关信息，计算机会告诉我们，Bug在哪里，如何修复。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;行为分析小组 (Behavioral Analysis Unit，BAU)是美国联邦调查局国家暴力犯罪分析中心(NCAVC)下设的一个部门。该部门旨在运用行为科学分析来协助犯罪调查。国家暴力犯罪分析中心和行为分析小组的主要任务是提供行为基础调查和/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>抛弃时间的人，时间也抛弃他，时间记录工具分享</title>
    <link href="https://wdd.js.org/time-tracking-tools-overview.html"/>
    <id>https://wdd.js.org/time-tracking-tools-overview.html</id>
    <published>2018-04-27T05:28:07.000Z</published>
    <updated>2018-04-27T05:57:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-WakaTime-自动化时间记录工具"><a href="#1-WakaTime-自动化时间记录工具" class="headerlink" title="1. WakaTime 自动化时间记录工具"></a>1. WakaTime 自动化时间记录工具</h1><p><a href="https://wakatime.com/" target="_blank" rel="noopener">WakaTime</a>致力为程序员提供于自动化时间记录功能，它提供很多的IDE插件，可以通过这些插件清晰的告诉你一些可视化的信息。</p><p>WakeTime功能列表</p><ul><li>每个项目你所花费的时间</li><li>每种编程语言你所花费的时间</li><li>一天的平均编码信息</li><li>编辑器使用记录</li><li>可以生成日报，周报，月报，以邮件的形式发送给你</li><li>可以生成嵌入式的代码，以图片形式展现</li><li>…</li></ul><h2 id="1-1-WakeTime-Dashboard-欣赏"><a href="#1-1-WakeTime-Dashboard-欣赏" class="headerlink" title="1.1. WakeTime Dashboard 欣赏"></a>1.1. WakeTime Dashboard 欣赏</h2><p><img src="http://p3alsaatj.bkt.clouddn.com/20180427133630_gtKsV3_Jietu20180427-133547.jpeg" alt=""></p><h2 id="1-2-WakaTime插件-支持哪些IDE"><a href="#1-2-WakaTime插件-支持哪些IDE" class="headerlink" title="1.2. WakaTime插件 支持哪些IDE?"></a>1.2. WakaTime插件 支持哪些IDE?</h2><p><img src="http://p3alsaatj.bkt.clouddn.com/20180427133734_MIGsDY_Jietu20180427-133726.jpeg" alt=""></p><h2 id="1-3-WakaTime-生成嵌入式图片代码"><a href="#1-3-WakaTime-生成嵌入式图片代码" class="headerlink" title="1.3. WakaTime 生成嵌入式图片代码"></a>1.3. WakaTime 生成嵌入式图片代码</h2><p>在线预览地址：<a href="https://wdd.js.org/about/">https://wdd.js.org/about/</a></p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180427133853_hFgMtz_Jietu20180427-133847.jpeg" alt=""></p><h1 id="2-RescueTime-拯救你的时间"><a href="#2-RescueTime-拯救你的时间" class="headerlink" title="2. RescueTime 拯救你的时间"></a>2. RescueTime 拯救你的时间</h1><p><a href="https://www.rescuetime.com/" target="_blank" rel="noopener">RescueTime</a>， RescueTime也是一款时间分析软件，支持多个平台。包括Mac, Windows, Linux, Android, Chrome插件，FireFox插件</p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180427134336_lsj1oz_Jietu20180427-134326.jpeg" alt=""></p><p>相比于WakaTime, RescueTime并不局限于IDE中，它可以记录更多维度的时间花费，包括如下。</p><ul><li>在每个应用上花费的时间</li><li>在每个网站花费的时间</li><li>按照天，周，月生成报表</li><li>可视化分析时间花费</li></ul><h2 id="2-1-RescueTime-Dashboard-欣赏"><a href="#2-1-RescueTime-Dashboard-欣赏" class="headerlink" title="2.1. RescueTime Dashboard 欣赏"></a>2.1. RescueTime Dashboard 欣赏</h2><p><img src="http://p3alsaatj.bkt.clouddn.com/20180427134857_2Bh7SO_Jietu20180427-134848.jpeg" alt=""></p><h1 id="3-分析与对比"><a href="#3-分析与对比" class="headerlink" title="3. 分析与对比"></a>3. 分析与对比</h1><p>WakaTime比较适合IDE的时间记录，RescueTime记录的维度更广。两款软件都有免费版和收费版，其实免费版的功能都已经够用了。</p><h1 id="4-关于时间"><a href="#4-关于时间" class="headerlink" title="4. 关于时间"></a>4. 关于时间</h1><ul><li>抛弃时间的人，时间也抛弃他。——莎士比亚</li><li>一个人越知道时间的价值，越倍觉失时的痛苦！——但丁</li><li>平庸的人关心怎样耗费时间，有才能的人竭力利用时间。——叔本华</li><li>逝者如斯夫，不舍昼夜。——孔子</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-WakaTime-自动化时间记录工具&quot;&gt;&lt;a href=&quot;#1-WakaTime-自动化时间记录工具&quot; class=&quot;headerlink&quot; title=&quot;1. WakaTime 自动化时间记录工具&quot;&gt;&lt;/a&gt;1. WakaTime 自动化时间记录工具&lt;/h1
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>掌握谷歌搜索高级指令</title>
    <link href="https://wdd.js.org/master-google-search-command.html"/>
    <id>https://wdd.js.org/master-google-search-command.html</id>
    <published>2018-04-26T08:56:01.000Z</published>
    <updated>2018-04-27T01:05:49.000Z</updated>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#1-谷歌搜索指令">1. 谷歌搜索指令</a></li><li><a href="#2-基本命令">2. 基本命令</a></li><li><a href="#3-关键词使用">3. 关键词使用</a></li><li><a href="#4-特殊工具">4. 特殊工具</a><ul><li><a href="#41-define-快速返回关键词定义">4.1. define 快速返回关键词定义</a></li><li><a href="#42-计算器">4.2. 计算器</a></li><li><a href="#43-单位转换">4.3. 单位转换</a></li><li><a href="#44-时区查询">4.4. 时区查询</a></li><li><a href="#45-地区查询">4.5. 地区查询</a></li><li><a href="#46-天气查询">4.6. 天气查询</a></li></ul></li><li><a href="#5-参考">5. 参考</a></li></ul><!-- /TOC --><h1 id="1-谷歌搜索指令"><a href="#1-谷歌搜索指令" class="headerlink" title="1. 谷歌搜索指令"></a>1. 谷歌搜索指令</h1><h1 id="2-基本命令"><a href="#2-基本命令" class="headerlink" title="2. 基本命令"></a>2. 基本命令</h1><table><thead><tr><th>符号</th><th>简介</th><th>语法</th><th>注意点</th><th>示例</th></tr></thead><tbody><tr><td>+</td><td>包含A且必须包含B</td><td>A +B</td><td>A和+之间有空格</td><td>Maxwell +wills</td></tr><tr><td>-</td><td>包含A且不包含B</td><td>A -B</td><td>A和+之间有空格</td><td>Maxwell -Absolom</td></tr><tr><td>“ “</td><td>完整匹配AB</td><td>“AB”</td><td></td><td>“Thomas Jefferson”</td></tr><tr><td>OR</td><td>包含A或者B</td><td><code>A OR B</code> 或者 `A</td><td>B`</td><td></td><td>nodejs OR webpack</td></tr><tr><td>+-“OR</td><td>指令可以组合，完成更复杂的查询</td><td></td><td></td><td>beach -sandy +albert +nathaniel</td></tr><tr><td>~</td><td>包含A, 并且包含B的近义词</td><td>A ~B</td><td></td><td>github ~js</td></tr><tr><td>..</td><td>区间查询 AB之间</td><td>A..B</td><td></td><td>china 1888..2000</td></tr><tr><td>*</td><td>匹配任意字符</td><td></td><td></td><td>node* java</td></tr><tr><td>site:</td><td>站内搜索</td><td>A site:B</td><td></td><td></td><td>DLL site:webpack.js.org</td></tr><tr><td>filetype:</td><td>按照文件类型搜索</td><td>A filetype:B</td><td></td><td>csta filetype:pdf</td></tr></tbody></table><h1 id="3-关键词使用"><a href="#3-关键词使用" class="headerlink" title="3. 关键词使用"></a>3. 关键词使用</h1><table><thead><tr><th>方法</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>列举关键词</td><td>列举所有和搜索相关的关键词，并且尽量把重要的关键词排在前面。<code>不同的关键词顺序会导致不同的返回不同的结果</code></td><td>书法 毛笔 绘画</td></tr><tr><td>不要使用某些词</td><td>如代词介词语气词，如i, the, of, it, 我，吗</td><td>搜索引擎一般会直接忽略这些信息含量少的词</td></tr><tr><td>大小写不敏感</td><td>大写字符和小写字符在搜索引擎看没有区别，尽量使用小写的就可以</td><td></td></tr></tbody></table><h1 id="4-特殊工具"><a href="#4-特殊工具" class="headerlink" title="4. 特殊工具"></a>4. 特殊工具</h1><h2 id="4-1-define-快速返回关键词定义"><a href="#4-1-define-快速返回关键词定义" class="headerlink" title="4.1. define 快速返回关键词定义"></a>4.1. define 快速返回关键词定义</h2><p><img src="http://p3alsaatj.bkt.clouddn.com/20180426175550_4QI50S_Jietu20180426-175542.jpeg" alt=""></p><h2 id="4-2-计算器"><a href="#4-2-计算器" class="headerlink" title="4.2. 计算器"></a>4.2. 计算器</h2><p><img src="http://p3alsaatj.bkt.clouddn.com/20180426175645_exHEvl_Jietu20180426-175638.jpeg" alt=""></p><h2 id="4-3-单位转换"><a href="#4-3-单位转换" class="headerlink" title="4.3. 单位转换"></a>4.3. 单位转换</h2><p><img src="http://p3alsaatj.bkt.clouddn.com/20180426175515_2t1Vps_Jietu20180426-175503.jpeg" alt=""></p><h2 id="4-4-时区查询"><a href="#4-4-时区查询" class="headerlink" title="4.4. 时区查询"></a>4.4. 时区查询</h2><p><img src="http://p3alsaatj.bkt.clouddn.com/20180426175804_vszyoQ_Jietu20180426-175746.jpeg" alt=""></p><h2 id="4-5-地区查询"><a href="#4-5-地区查询" class="headerlink" title="4.5. 地区查询"></a>4.5. 地区查询</h2><p><img src="http://p3alsaatj.bkt.clouddn.com/20180426175935_39RATW_Jietu20180426-175916.jpeg" alt=""></p><h2 id="4-6-天气查询"><a href="#4-6-天气查询" class="headerlink" title="4.6. 天气查询"></a>4.6. 天气查询</h2><p><img src="http://p3alsaatj.bkt.clouddn.com/20180426180104_3qesjV_Jietu20180426-180042.jpeg" alt=""></p><h1 id="5-参考"><a href="#5-参考" class="headerlink" title="5. 参考"></a>5. 参考</h1><ul><li><a href="https://www.lifewire.com/advanced-google-search-3482174" target="_blank" rel="noopener">Advanced Google Search Commands</a></li><li><a href="https://uvtagg.org/classes/smaxwell/Google_rules_for_searching.pdf" target="_blank" rel="noopener">Google_rules_for_searching.pdf</a></li><li><a href="http://www.searchcommands.com/" target="_blank" rel="noopener">An introduction to search commands</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- TOC --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-谷歌搜索指令&quot;&gt;1. 谷歌搜索指令&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-基本命令&quot;&gt;2. 基本命令&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-关键词使用&quot;&gt;3. 关键词使用&lt;/a&gt;&lt;/li&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>金钱游戏 - 银行造钱的秘密</title>
    <link href="https://wdd.js.org/the-secret-of-bank-create-money.html"/>
    <id>https://wdd.js.org/the-secret-of-bank-create-money.html</id>
    <published>2018-04-25T05:33:52.000Z</published>
    <updated>2018-04-25T06:09:03.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-角色划分"><a href="#1-角色划分" class="headerlink" title="1. 角色划分"></a>1. 角色划分</h1><table><thead><tr><th>名称</th><th>角色</th><th>账户</th></tr></thead><tbody><tr><td>A</td><td>银行家</td><td>0 </td></tr><tr><td>B</td><td>建筑商</td><td>100万 </td></tr><tr><td>C</td><td>商人</td><td>0</td></tr></tbody></table><h1 id="2-建筑商向银行存储100万"><a href="#2-建筑商向银行存储100万" class="headerlink" title="2. 建筑商向银行存储100万"></a>2. 建筑商向银行存储100万</h1><table><thead><tr><th>名称</th><th>角色</th><th>账户 </th></tr></thead><tbody><tr><td>A</td><td>银行家</td><td>100万 现金</td></tr><tr><td>B</td><td>建筑商</td><td>100万 支票</td></tr><tr><td>C</td><td>商人</td><td>0  </td></tr></tbody></table><h1 id="2-商人向银行贷款100万"><a href="#2-商人向银行贷款100万" class="headerlink" title="2. 商人向银行贷款100万"></a>2. 商人向银行贷款100万</h1><p>此时银行的账户存款已经是0了，但是B还在银行存了100万。那银行究竟是还有100万呢, 还是一毛都没有了呢。</p><p>此时建筑商如果要取现金，那么银行马上就要破产。</p><table><thead><tr><th>名称</th><th>角色</th><th>账户</th></tr></thead><tbody><tr><td>A</td><td>银行家</td><td>100现金</td></tr><tr><td>B</td><td>建筑商</td><td>100万 支票</td></tr><tr><td>C</td><td>商人</td><td>100万 支票</td></tr></tbody></table><h1 id="3-商人需要建筑商来建造房子"><a href="#3-商人需要建筑商来建造房子" class="headerlink" title="3. 商人需要建筑商来建造房子"></a>3. 商人需要建筑商来建造房子</h1><p>商人需要建筑商来建筑房子，费用是100万，付给建筑商，建筑商又把100支票存到银行</p><table><thead><tr><th>名称</th><th>角色</th><th>账户</th></tr></thead><tbody><tr><td>A</td><td>银行家</td><td>100万现金</td></tr><tr><td>B</td><td>建筑商</td><td>200万 支票</td></tr><tr><td>C</td><td>商人</td><td>0</td></tr></tbody></table><p>商人又从银行借钱100万，来付给建筑商建房子，建筑商把钱存到银行</p><table><thead><tr><th>名称</th><th>角色</th><th>账户</th></tr></thead><tbody><tr><td>A</td><td>银行家</td><td>100万现金</td></tr><tr><td>B</td><td>建筑商</td><td>300万 支票</td></tr><tr><td>C</td><td>商人</td><td>0</td></tr></tbody></table><p>只要这个循环还在继续，你会发现，建筑商的账面上的支票越来越多，但是银行始终都是100万现金存在那里，从来都没动过。</p><p><code>💰就这样魔术般的产生</code>， 如果银行那一天缺钱了，银行就拿一张纸出来，上面写着<code>1000万</code>。看！银行造钱就是那么容易。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-角色划分&quot;&gt;&lt;a href=&quot;#1-角色划分&quot; class=&quot;headerlink&quot; title=&quot;1. 角色划分&quot;&gt;&lt;/a&gt;1. 角色划分&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;角色&lt;/th&gt;
&lt;th&gt;账户&lt;/th
      
    
    </summary>
    
    
      <category term="财商" scheme="https://wdd.js.org/tags/%E8%B4%A2%E5%95%86/"/>
    
      <category term="财富" scheme="https://wdd.js.org/tags/%E8%B4%A2%E5%AF%8C/"/>
    
  </entry>
  
  <entry>
    <title>从美剧犯罪心理学习解决Bug的思路</title>
    <link href="https://wdd.js.org/criminal-mind-and-bug-fix.html"/>
    <id>https://wdd.js.org/criminal-mind-and-bug-fix.html</id>
    <published>2018-04-24T13:05:16.000Z</published>
    <updated>2018-04-25T05:32:01.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p3alsaatj.bkt.clouddn.com/20180424210625_plfStH_1925476-30f31d37becb81f7.jpeg" alt=""></p><h1 id="死亡时间-vs-问题时间"><a href="#死亡时间-vs-问题时间" class="headerlink" title="死亡时间 vs 问题时间"></a>死亡时间 vs 问题时间</h1><h1 id="现场恢复-vs-上下文"><a href="#现场恢复-vs-上下文" class="headerlink" title="现场恢复 vs 上下文"></a>现场恢复 vs 上下文</h1><h1 id="Trigger-vs-如何触发"><a href="#Trigger-vs-如何触发" class="headerlink" title="Trigger vs 如何触发"></a>Trigger vs 如何触发</h1><h1 id="概率-vs"><a href="#概率-vs" class="headerlink" title="概率 vs"></a>概率 vs</h1><p>最后，Aaron大写的帅啊！</p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180424211055_ikM8Ez_a4b3dea5a85c012ca065abb86ec668d3_hd.jpeg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://p3alsaatj.bkt.clouddn.com/20180424210625_plfStH_1925476-30f31d37becb81f7.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;死亡时间-vs-问题时间&quot;&gt;&lt;a href
      
    
    </summary>
    
    
      <category term="未完成" scheme="https://wdd.js.org/tags/%E6%9C%AA%E5%AE%8C%E6%88%90/"/>
    
      <category term="犯罪心理" scheme="https://wdd.js.org/tags/%E7%8A%AF%E7%BD%AA%E5%BF%83%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>GitUp, 你不可错过的秀外慧中的git工具</title>
    <link href="https://wdd.js.org/gitup-the-git-gui-you-will-like.html"/>
    <id>https://wdd.js.org/gitup-the-git-gui-you-will-like.html</id>
    <published>2018-04-24T10:03:44.000Z</published>
    <updated>2018-04-24T12:59:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>大部分时间，我都是使用git命令行来完成各种git操作。</p><p>然而有时候，想可视化的查看各个分支之间的关系时，还是觉得有个GUI工具比较完美。</p><p>众里寻他千百度，默然回首，她在github上。</p><p><code>GitUp, The Git interface you&#39;ve been missing all your life has finally arrived</code> <a href="http://gitup.co/" target="_blank" rel="noopener">http://gitup.co/</a></p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180424180658_8xeyJO_Screenshot.jpeg" alt=""></p><h1 id="1-功能介绍"><a href="#1-功能介绍" class="headerlink" title="1. 功能介绍"></a>1. 功能介绍</h1><h2 id="1-1-可视化、实时绘图、快速查看"><a href="#1-1-可视化、实时绘图、快速查看" class="headerlink" title="1.1. 可视化、实时绘图、快速查看"></a>1.1. 可视化、实时绘图、快速查看</h2><p><img src="../images/map.gif" alt=""></p><ul><li><code>仓库可视化</code>: GitUp让你清晰明了的看到你的整个分支的迷宫</li><li><code>实时绘图</code>: 你做的任何改变，都会立刻反应到GitUp的图形上，不用刷新，不用等待</li><li><code>快速查看</code>: 高亮选中的commit，并且按空格键会查看到commit的详情</li></ul><h2 id="1-2-远离脏乱、快速撤销、时光穿梭"><a href="#1-2-远离脏乱、快速撤销、时光穿梭" class="headerlink" title="1.2. 远离脏乱、快速撤销、时光穿梭"></a>1.2. 远离脏乱、快速撤销、时光穿梭</h2><p><img src="../images/snapshots.gif" alt=""></p><ul><li><code>远离脏乱</code>: GitUp给你完整的，透明的控制本地仓库的能力，非常方便去取消你不想要的改变</li><li><code>快速撤销</code>: 你只需要按 command + z就可以快速取消</li><li><code>快照穿梭</code>: GitUp的快照功能提供一种时光穿梭的功能，你可以访问任何时间点的文件</li></ul><h2 id="1-3-全功能、快捷键、改变！"><a href="#1-3-全功能、快捷键、改变！" class="headerlink" title="1.3. 全功能、快捷键、改变！"></a>1.3. 全功能、快捷键、改变！</h2><p><img src="../images/editing.gif" alt=""></p><ul><li><code>全功能</code>: Rewrite, split, delete, and re-order commits, fixup and squash, cherry-pick, merge, rebase全都有, 而且非常快</li><li><code>快捷键</code>: GitUp提供很多的快捷键</li><li><code>放弃原来的方法吧</code>: 你只需要专心写代码，剩下的事情都交给GitUp来处理吧</li></ul><h2 id="1-4-速度非常快"><a href="#1-4-速度非常快" class="headerlink" title="1.4. 速度非常快"></a>1.4. 速度非常快</h2><p><img src="http://p3alsaatj.bkt.clouddn.com/20180424203917_Wl9aRw_Screenshot.jpeg" alt=""></p><ul><li><code>速度非常快</code>: GitUp 加载和渲染超40000个commit的git仓库，只需要1秒之内。GitUp之所以这么快的原因是，GitUp绕过git的接口，直接与git本地数据库交互。所以，有些时候，GitUp要比git的原生命令要快的多。</li></ul><h2 id="1-5-实时搜索"><a href="#1-5-实时搜索" class="headerlink" title="1.5. 实时搜索"></a>1.5. 实时搜索</h2><p><img src="http://p3alsaatj.bkt.clouddn.com/20180424204319_6aEPUe_Screenshot.jpeg" alt=""></p><ul><li><code>实时搜索</code>: 你可以按照分支，tag, commmit消息，作者，甚至diff的内容进行搜索，GitUp会马上把结果提供给你。</li></ul><h2 id="1-6-命令行工具"><a href="#1-6-命令行工具" class="headerlink" title="1.6. 命令行工具"></a>1.6. 命令行工具</h2><p>GitUp也提供命令行工具，可以在命令行中打开GitUp图形界面。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">➜  gitup <span class="keyword">help</span></span><br><span class="line"><span class="keyword">Usage</span>: gitup [command]</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line"></span><br><span class="line"><span class="keyword">help</span></span><br><span class="line">  <span class="keyword">Show</span> this help.</span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> (<span class="keyword">default</span>)</span><br><span class="line">  <span class="keyword">Open</span> the <span class="keyword">current</span> Git repository <span class="keyword">in</span> GitUp.</span><br><span class="line"></span><br><span class="line"><span class="keyword">map</span></span><br><span class="line">  <span class="keyword">Open</span> the <span class="keyword">current</span> Git repository <span class="keyword">in</span> GitUp <span class="keyword">in</span> <span class="keyword">Map</span> view.</span><br><span class="line"></span><br><span class="line"><span class="keyword">commit</span></span><br><span class="line">  <span class="keyword">Open</span> the <span class="keyword">current</span> Git repository <span class="keyword">in</span> GitUp <span class="keyword">in</span> <span class="keyword">Commit</span> view.</span><br><span class="line"></span><br><span class="line">stash</span><br><span class="line">  <span class="keyword">Open</span> the <span class="keyword">current</span> Git repository <span class="keyword">in</span> GitUp <span class="keyword">in</span> Stashes view.</span><br></pre></td></tr></table></figure><h1 id="2-好消息与坏消息"><a href="#2-好消息与坏消息" class="headerlink" title="2. 好消息与坏消息"></a>2. 好消息与坏消息</h1><ul><li>好消息: GitUp免费开源</li><li>坏消息: GitUp仅支持macOS平台</li></ul><h1 id="3-别被GitUp忽悠了"><a href="#3-别被GitUp忽悠了" class="headerlink" title="3. 别被GitUp忽悠了"></a>3. 别被GitUp忽悠了</h1><p>事实上，无论Git相关的gui工具牛吹得有多大，git的常用命令，也是非常建议你学会使用的。</p><p>作为一个程序员，一个讲究效率的程序员，命令行才是最好的工具。不要因为一点点难学，就放弃学习。</p><p>就像玛丽莲梦露所说的：<code>你无法接受我差的一面，就不配拥有我最好的一面</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;大部分时间，我都是使用git命令行来完成各种git操作。&lt;/p&gt;
&lt;p&gt;然而有时候，想可视化的查看各个分支之间的关系时，还是觉得有个GUI工具比较完美。&lt;/p&gt;
&lt;p&gt;众里寻他千百度，默然回首，她在github上。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;GitUp, The Git i
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>当我们谈论工作经验时，我们在谈论什么</title>
    <link href="https://wdd.js.org/what-is-work-experience.html"/>
    <id>https://wdd.js.org/what-is-work-experience.html</id>
    <published>2018-04-19T10:53:54.000Z</published>
    <updated>2018-04-22T12:19:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何衡量工作经验"><a href="#如何衡量工作经验" class="headerlink" title="如何衡量工作经验"></a>如何衡量工作经验</h1><p>衡量工作经验的并不是一个数字, 比如说你工作<code>2</code>年了，他工作<code>4</code>年了。4的确是大于2的，但是这又能说明什么呢？我们需要的干货！硬货！而不是一个数字。</p><p>那么，什么是<code>干货</code>, <code>硬货</code></p><ul><li>个人技术博客</li><li>技术文章</li><li>github项目</li><li>个人项目star数量</li><li>个人微信公众号的粉丝数量</li><li>一些解决问题的方法</li><li>向开源项目提交bug或者PR</li></ul><p>这些东西才是HR真正想要看的东西，这些东西可以算作是资产。即使是你换工作了，这些资产都会始终跟着你自己。</p><p>所谓工作经验，就是那些<code>可以直接证明你的价值的东西</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;如何衡量工作经验&quot;&gt;&lt;a href=&quot;#如何衡量工作经验&quot; class=&quot;headerlink&quot; title=&quot;如何衡量工作经验&quot;&gt;&lt;/a&gt;如何衡量工作经验&lt;/h1&gt;&lt;p&gt;衡量工作经验的并不是一个数字, 比如说你工作&lt;code&gt;2&lt;/code&gt;年了，他工作&lt;cod
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Express静态文件浏览器缓存设置与缓存清除</title>
    <link href="https://wdd.js.org/express-static-file-cache-setting-and-cleaning.html"/>
    <id>https://wdd.js.org/express-static-file-cache-setting-and-cleaning.html</id>
    <published>2018-04-08T01:00:48.000Z</published>
    <updated>2018-04-08T01:28:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Express设置缓存"><a href="#1-Express设置缓存" class="headerlink" title="1. Express设置缓存"></a>1. Express设置缓存</h1><p>Express设置静态文件的方法很简单，一行代码搞定。<code>app.use(express.static(path.join(__dirname, &#39;public&#39;), {maxAge: MAX_AGE}))</code>,<br>注意MAX_AGE的单位是毫秒。这句代码的含义是让pulic目录下的所有文件都可以在浏览器中缓存，过期时长为MAX_AGE毫秒。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(express.<span class="keyword">static</span>(path.join(__dirname, <span class="string">'public'</span>), &#123;maxAge: <span class="built_in">config</span>.<span class="built_in">get</span>(<span class="string">'maxAge'</span>)&#125;))</span><br></pre></td></tr></table></figure><h1 id="2-Express让浏览器清除缓存"><a href="#2-Express让浏览器清除缓存" class="headerlink" title="2. Express让浏览器清除缓存"></a>2. Express让浏览器清除缓存</h1><p>缓存的好处是可以更快的访问服务，但是缓存也有坏处。例如设置缓存为10天，第二天的时候服务更新了。如果客户端不强制刷新页面的话，浏览器会一致使用更新前的静态文件，这样会导致一些BUG。你总当每次出问题时，客户打电话给你后，你让他强制刷新浏览器吧？</p><p>所以，最好在服务重启后，重新让浏览器获取最新的静态文件。</p><p>设置的方式是给每一个静态文件设置一个时间戳。</p><p>例如：<code>vendor/loadjs/load.js?_=123898923423&quot;&gt;&lt;/script&gt;</code></p><h2 id="2-1-Express-路由"><a href="#2-1-Express-路由" class="headerlink" title="2.1. Express 路由"></a>2.1. Express 路由</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// /routes/<span class="built_in">index</span>.js</span><br><span class="line">router.<span class="built_in">get</span>(<span class="string">'/home'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(req, res, next)</span> &#123;</span></span><br><span class="line">  <span class="keyword">res</span>.render(<span class="string">'home'</span>, &#123;confi<span class="variable">g:</span> config, serverStartTimestamp: <span class="keyword">new</span> Date().getTime()&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="2-2-视图文件"><a href="#2-2-视图文件" class="headerlink" title="2.2. 视图文件"></a>2.2. 视图文件</h2><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">// views/home.html</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"vendor/loadjs/load.js?_=&lt;%=</span></span></span><span class="ruby"> serverStartTimestamp </span><span class="xml"><span class="tag"><span class="string">%&gt;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>设置之后，每次服务更新或者重启，浏览器都会使用最新的时间戳serverStartTimestamp，去获取静态文件。</p><h2 id="2-3-动态加载JS文件"><a href="#2-3-动态加载JS文件" class="headerlink" title="2.3. 动态加载JS文件"></a>2.3. 动态加载JS文件</h2><p>有时候js文件并不是直接在HTML中引入，可能是使用了一些js文件加载库，例如requirejs, LABjs等。这些情况下，可以在全局设置环境变量SERVER_START_TIMESTAMP，用来表示服务启动的时间戳，在获取js的时候，将该时间戳拼接在路径上。</p><p>注意：<code>环境变量SERVER_START_TIMESTAMP，一定要在其他脚本使用前定义。</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// views/home.html</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> SERVER_START_TIMESTAMP = <span class="xml"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">serverStartTimestamp</span> %&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// load.js</span></span><br><span class="line"><span class="string">'vendor/contact-center/skill.js?_='</span> + SERVER_START_TIMESTAMP</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-Express设置缓存&quot;&gt;&lt;a href=&quot;#1-Express设置缓存&quot; class=&quot;headerlink&quot; title=&quot;1. Express设置缓存&quot;&gt;&lt;/a&gt;1. Express设置缓存&lt;/h1&gt;&lt;p&gt;Express设置静态文件的方法很简单，一行代码
      
    
    </summary>
    
    
      <category term="Express" scheme="https://wdd.js.org/tags/Express/"/>
    
      <category term="静态文件" scheme="https://wdd.js.org/tags/%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6/"/>
    
      <category term="浏览器缓存" scheme="https://wdd.js.org/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>绝对不要容忍拼写错误</title>
    <link href="https://wdd.js.org/do-not-tolerate-spelling-mistake.html"/>
    <id>https://wdd.js.org/do-not-tolerate-spelling-mistake.html</id>
    <published>2018-04-03T08:37:40.000Z</published>
    <updated>2018-04-03T13:01:20.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>最难找又最好找的bug是拼写错误。</code>如果你意识到问题的原因可能是拼写错误，那么检查起来是很容易的。否则，则可能花费几天事件去找问题的原因。</p><p>你要相信计算机，计算机告诉你的问题，99%一定是开发者自身的问题，而不是计算机的问题。</p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180403205759_9VJNcG_.jpeg" alt=""></p><p>找bug其实是一个很有意思的事情，有点像躲猫猫，计算机告诉你一些表象原因。有些时候，你可以从这些表象原因中立马发现问题所在，有时候又会让你抓耳挠腮，废寝忘食，辗转反侧，求之不得。</p><p>越难解决的问题，解决过后，幸福感和快乐感也随之增加。</p><blockquote><p>初极狭，才通人。复行数十步，豁然开朗。土地平旷，屋舍俨然，有良田美池桑竹之属。阡陌交通，鸡犬相闻。其中往来种作，男女衣着，悉如外人。黄发垂髫，并怡然自乐。– 《桃花源记》</p></blockquote><p><img src="http://p3alsaatj.bkt.clouddn.com/20180403205900_TGZuPo_.jpeg" alt=""></p><h1 id="1-为什么会产生拼写错误？"><a href="#1-为什么会产生拼写错误？" class="headerlink" title="1. 为什么会产生拼写错误？"></a>1. 为什么会产生拼写错误？</h1><ul><li>马虎</li><li>懒</li></ul><h1 id="2-拼写错误可能引起哪些问题？"><a href="#2-拼写错误可能引起哪些问题？" class="headerlink" title="2. 拼写错误可能引起哪些问题？"></a>2. 拼写错误可能引起哪些问题？</h1><ul><li>无法引用到变量，报一些引用的错误</li><li>HTTP 404, 如果路径拼写错误，那么是会导致请求404的</li></ul><h1 id="3-拼写错误的长远影响？"><a href="#3-拼写错误的长远影响？" class="headerlink" title="3. 拼写错误的长远影响？"></a>3. 拼写错误的长远影响？</h1><ul><li>有个成语叫<code>遗臭万年</code></li></ul><h1 id="4-如何减少拼写错误？"><a href="#4-如何减少拼写错误？" class="headerlink" title="4. 如何减少拼写错误？"></a>4. 如何减少拼写错误？</h1><ul><li>查字典 有道字典</li><li>代码拼写检查工具： 如vscode上的拼写检查插件<a href="https://github.com/Jason-Rev/vscode-spell-checker" target="_blank" rel="noopener">vscode-spell-checker</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;最难找又最好找的bug是拼写错误。&lt;/code&gt;如果你意识到问题的原因可能是拼写错误，那么检查起来是很容易的。否则，则可能花费几天事件去找问题的原因。&lt;/p&gt;
&lt;p&gt;你要相信计算机，计算机告诉你的问题，99%一定是开发者自身的问题，而不是计算机的问题。&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Small is Powerful Vue mixins</title>
    <link href="https://wdd.js.org/small-is-powerful-vue-mixins.html"/>
    <id>https://wdd.js.org/small-is-powerful-vue-mixins.html</id>
    <published>2018-03-30T07:33:58.000Z</published>
    <updated>2018-03-30T07:43:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="small-is-beautiful"><a href="#small-is-beautiful" class="headerlink" title="small is beautiful"></a>small is beautiful</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    hello: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'hello'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.hello()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="big-is-ugly"><a href="#big-is-ugly" class="headerlink" title="big is ugly"></a>big is ugly</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    hello: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'hello'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    hello1: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'hello1'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    hello2: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'hello2'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    hello3: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'hello3'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// a lot of function be added, this is ugly</span></span><br><span class="line">    helloN: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'helloN'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  created: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.hello()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="mixins-is-powerful"><a href="#mixins-is-powerful" class="headerlink" title="mixins is powerful"></a>mixins is powerful</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mix  = &#123;</span><br><span class="line">  created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'i am mixins'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    helloX: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'helloX'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  mixins: [mix],</span><br><span class="line">  methods: &#123;</span><br><span class="line">    hello: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'hello'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    hello1: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'hello1'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    hello2: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'hello2'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    hello3: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'hello3'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.hello()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="reading-more"><a href="#reading-more" class="headerlink" title="reading more"></a>reading more</h1><ul><li><a href="https://cn.vuejs.org/v2/guide/mixins.html" target="_blank" rel="noopener">guide-mixins</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;small-is-beautiful&quot;&gt;&lt;a href=&quot;#small-is-beautiful&quot; class=&quot;headerlink&quot; title=&quot;small is beautiful&quot;&gt;&lt;/a&gt;small is beautiful&lt;/h1&gt;&lt;figure c
      
    
    </summary>
    
    
      <category term="Vue" scheme="https://wdd.js.org/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>WebSocket断开原因分析</title>
    <link href="https://wdd.js.org/websocket-close-reasons.html"/>
    <id>https://wdd.js.org/websocket-close-reasons.html</id>
    <published>2018-03-29T12:35:38.000Z</published>
    <updated>2018-04-25T03:22:39.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-把错误打印出来"><a href="#1-把错误打印出来" class="headerlink" title="1. 把错误打印出来"></a>1. 把错误打印出来</h1><p>WebSocket断开的原因有很多，最好在WebSocket断开时，将错误打印出来。</p><p>在线demo地址：<a href="https://wdd.js.org/websocket-demos/">https://wdd.js.org/websocket-demos/</a></p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180425112232_cxPVAD_Jietu20180425-112142.jpeg" alt=""></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ws.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'WebSocket发生错误: '</span> + e.code)</span><br><span class="line">  <span class="built_in">console</span>.log(e)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果你想自己玩玩WebSocket, 但是你又不想自己部署一个WebSocket服务器，你可以使用<code>ws = new WebSocket(&#39;wss://echo.websocket.org/&#39;)</code>, 你向echo.websocket.org发送消息，它会回复你同样的消息。</p></blockquote><h1 id="2-重要信息错误状态码"><a href="#2-重要信息错误状态码" class="headerlink" title="2. 重要信息错误状态码"></a>2. 重要信息错误状态码</h1><p>WebSocket断开时，会触发<code>CloseEvent</code>, CloseEvent会在连接关闭时发送给使用 WebSockets 的客户端. 它在 WebSocket 对象的 onclose 事件监听器中使用。CloseEvent的code字段表示了WebSocket断开的原因。可以从该字段中分析断开的原因。</p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180329204553_TjCFdu_Jietu20180329-204536.jpeg" alt=""></p><h1 id="3-关闭状态码表"><a href="#3-关闭状态码表" class="headerlink" title="3. 关闭状态码表"></a>3. 关闭状态码表</h1><p>一般来说<code>1006</code>的错误码出现的情况比较常见，该错误码一般出现在断网时。</p><table><thead><tr><th>状态码</th><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>0–999</td><td></td><td>保留段, 未使用.</td></tr><tr><td>1000</td><td>CLOSE_NORMAL</td><td>正常关闭; 无论为何目的而创建, 该链接都已成功完成任务.</td></tr><tr><td>1001</td><td>CLOSE_GOING_AWAY</td><td>终端离开, 可能因为服务端错误, 也可能因为浏览器正从打开连接的页面跳转离开.</td></tr><tr><td>1002</td><td>CLOSE_PROTOCOL_ERROR</td><td>由于协议错误而中断连接.</td></tr><tr><td>1003</td><td>CLOSE_UNSUPPORTED</td><td>由于接收到不允许的数据类型而断开连接 (如仅接收文本数据的终端接收到了二进制数据).</td></tr><tr><td>1004</td><td></td><td><code>保留</code>. 其意义可能会在未来定义.</td></tr><tr><td>1005</td><td>CLOSE_NO_STATUS</td><td><code>保留</code>.  表示没有收到预期的状态码.</td></tr><tr><td><code>1006</code></td><td>CLOSE_ABNORMAL</td><td><code>保留</code>. 用于期望收到状态码时连接非正常关闭 (也就是说, 没有发送关闭帧).</td></tr><tr><td>1007</td><td>Unsupported Data</td><td>由于收到了格式不符的数据而断开连接 (如文本消息中包含了非 UTF-8 数据).</td></tr><tr><td>1008</td><td>Policy Violation</td><td>由于收到不符合约定的数据而断开连接. 这是一个通用状态码, 用于不适合使用 1003 和 1009 状态码的场景.</td></tr><tr><td>1009</td><td>CLOSE_TOO_LARGE</td><td>由于收到过大的数据帧而断开连接.</td></tr><tr><td>1010</td><td>Missing Extension</td><td>客户端期望服务器商定一个或多个拓展, 但服务器没有处理, 因此客户端断开连接.</td></tr><tr><td>1011</td><td>Internal Error</td><td>客户端由于遇到没有预料的情况阻止其完成请求, 因此服务端断开连接.</td></tr><tr><td>1012</td><td>Service Restart</td><td>服务器由于重启而断开连接. </td></tr><tr><td>1013</td><td>Try Again Later</td><td>服务器由于临时原因断开连接, 如服务器过载因此断开一部分客户端连接. </td></tr><tr><td>1014</td><td></td><td>由 WebSocket标准保留以便未来使用.</td></tr><tr><td>1015</td><td>TLS Handshake</td><td>保留. 表示连接由于无法完成 TLS 握手而关闭 (例如无法验证服务器证书).</td></tr><tr><td>1016–1999</td><td></td><td>由 WebSocket标准保留以便未来使用.</td></tr><tr><td>2000–2999</td><td></td><td>由 WebSocket拓展保留使用.</td></tr><tr><td>3000–3999</td><td></td><td>可以由库或框架使用.? 不应由应用使用. 可以在 IANA 注册, 先到先得.</td></tr><tr><td>4000–4999</td><td></td><td>可以由应用使用.</td></tr></tbody></table><h1 id="4-其他注意事项"><a href="#4-其他注意事项" class="headerlink" title="4. 其他注意事项"></a>4. 其他注意事项</h1><p>如果你的服务所在的域是HTTPS的，那么使用的WebSocket协议也必须是<code>wss</code>, 而不能是<code>ws</code></p><h1 id="5-如何在老IE上使用原生WebSocket？"><a href="#5-如何在老IE上使用原生WebSocket？" class="headerlink" title="5. 如何在老IE上使用原生WebSocket？"></a>5. 如何在老IE上使用原生WebSocket？</h1><p><a href="https://github.com/gimite/web-socket-js" target="_blank" rel="noopener">web-socket-js</a>是基于flash的技术，只需要引入两个js文件和一个swf文件，就可以让浏览器用于几乎原生的WebSocket接口。另外，web-socket-js还是需要在ws服务端843端口做一个flash安全策略文件的服务。</p><p>我自己曾经基于stompjs和web-socket-js，做WebSocket兼容到IE5, 当然了stompjs在低版本的IE上有兼容性问题, 而且stompjs已经不再维护了，你可以使用我fork的一个版本，地址是：<a href="https://github.com/wangduanduan/stomp-websocket/blob/master/lib/stomp.js" target="_blank" rel="noopener">https://github.com/wangduanduan/stomp-websocket/blob/master/lib/stomp.js</a></p><p>主要是老版本IE在正则表达式行为方面有点异常。</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// fix ie8, ie9, RegExp not normal problem</span></span><br><span class="line"><span class="comment">// in chrome the frames length will be 2, but in ie8, ie9, it well be 1</span></span><br><span class="line"><span class="comment">// by wdd 20180321</span></span><br><span class="line"><span class="keyword">if</span> <span class="comment">(frames.length === 1)</span> &#123;</span><br><span class="line">  frames.push<span class="comment">('')</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-参考"><a href="#6-参考" class="headerlink" title="6. 参考"></a>6. 参考</h1><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CloseEvent" target="_blank" rel="noopener">CloseEvent</a></li><li><a href="https://stackoverflow.com/questions/19304157/getting-the-reason-why-websockets-closed-with-close-code-1006" target="_blank" rel="noopener">getting the reason why websockets closed with close code 1006</a></li><li><a href="https://tools.ietf.org/html/rfc6455#section-7.4.1" target="_blank" rel="noopener">Defined Status Codes</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-把错误打印出来&quot;&gt;&lt;a href=&quot;#1-把错误打印出来&quot; class=&quot;headerlink&quot; title=&quot;1. 把错误打印出来&quot;&gt;&lt;/a&gt;1. 把错误打印出来&lt;/h1&gt;&lt;p&gt;WebSocket断开的原因有很多，最好在WebSocket断开时，将错误打印出
      
    
    </summary>
    
    
      <category term="WebSocket" scheme="https://wdd.js.org/tags/WebSocket/"/>
    
  </entry>
  
  <entry>
    <title>拜领域内最顶尖人物为师</title>
    <link href="https://wdd.js.org/learn-from-the-top-master.html"/>
    <id>https://wdd.js.org/learn-from-the-top-master.html</id>
    <published>2018-03-28T00:44:06.000Z</published>
    <updated>2018-03-28T01:08:46.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p3alsaatj.bkt.clouddn.com/20180328085107_sqWkoq_110S46131-0.jpeg" alt=""></p><p>我很讨厌teacher, 我几乎所有做的噩梦都和上课，考试，老师有关。但是我渴望master, 特别是行业顶尖的master。我渴望从master哪里获取知识，但是master们往往都是很忙的，哪有时间教你。但是作为master, 几乎每个人都有基本领域公认的巨著。</p><p>例如学经济学，亚当斯密的国富论是必读的书；学心理学，弗洛伊德的《梦的解析》，古斯塔夫•勒庞的《乌合之众》也是必读的书。学前端，泽卡斯的《JavaScript高级程序设计》，弗兰纳根的《JavaScript权威指南》，这两本书如果你没读过，那么你几乎是一个不合格的前端。</p><p>但是，作为一个普通人，你无法接触到真的的大师，那么就把他们的巨著当做大师，从读书中汲取大师的知识，这未尝不是一件有意义的事情。</p><h1 id="读书真的那么难吗？-如何坚持下去？"><a href="#读书真的那么难吗？-如何坚持下去？" class="headerlink" title="读书真的那么难吗？ 如何坚持下去？"></a>读书真的那么难吗？ 如何坚持下去？</h1><h1 id="读哪些书？如何挑选"><a href="#读哪些书？如何挑选" class="headerlink" title="读哪些书？如何挑选"></a>读哪些书？如何挑选</h1><p><code>挑书实际上是挑人，你</code></p><h1 id="理论知识的重要性"><a href="#理论知识的重要性" class="headerlink" title="理论知识的重要性"></a>理论知识的重要性</h1><h1 id="书评与积累"><a href="#书评与积累" class="headerlink" title="书评与积累"></a>书评与积累</h1><h1 id="只取一瓢"><a href="#只取一瓢" class="headerlink" title="只取一瓢"></a>只取一瓢</h1><h1 id="不求甚解"><a href="#不求甚解" class="headerlink" title="不求甚解"></a>不求甚解</h1><h1 id="速读"><a href="#速读" class="headerlink" title="速读"></a>速读</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://p3alsaatj.bkt.clouddn.com/20180328085107_sqWkoq_110S46131-0.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;我很讨厌teacher, 我几乎所有做的噩梦都和上课，考试，老师有关。但是我渴
      
    
    </summary>
    
    
      <category term="读书" scheme="https://wdd.js.org/tags/%E8%AF%BB%E4%B9%A6/"/>
    
      <category term="未完成" scheme="https://wdd.js.org/tags/%E6%9C%AA%E5%AE%8C%E6%88%90/"/>
    
  </entry>
  
  <entry>
    <title>js中的真值和假值</title>
    <link href="https://wdd.js.org/js-true-and-false-value.html"/>
    <id>https://wdd.js.org/js-true-and-false-value.html</id>
    <published>2018-03-27T06:31:01.000Z</published>
    <updated>2018-03-27T06:45:18.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>无论什么语言，都需要逻辑，而逻辑中，能否判断出真假，是最基本也是最重要技能之一</code>。</p><h1 id="JS中的假值有6个"><a href="#JS中的假值有6个" class="headerlink" title="JS中的假值有6个"></a>JS中的假值有6个</h1><ol><li>false</li><li>‘’</li><li>undefinded</li><li>null</li><li>0, +0, -0</li><li>NaN</li></ol><h1 id="有点类似假值的真值有两个"><a href="#有点类似假值的真值有两个" class="headerlink" title="有点类似假值的真值有两个"></a>有点类似假值的真值有两个</h1><ol><li>{}</li><li>[]</li></ol><p>空对象和空数组，很多初学者都很用把这两个当做假值。但是实际上他们是真值，你只需要记住，除了null之外的所有对象类型的数据，都是真值。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span> <span class="comment">// 'object'</span></span><br></pre></td></tr></table></figure><p>据说：<code>typeof null返回对象这是一个js语言中的bug。</code>实际上typeof null应该返回null才比较准确，但是这个bug已经存来好久了。几乎所有的代码里都这样去判断。如果把typeof null给改成返回null, 那么这必定会导致JS世界末日。</p><p>我们承认<code>JS并不完美</code>，她有很多小缺点，但是这并不妨碍她吸引万千开发者拜倒在她的石榴裙下。</p><p>就像一首歌唱的：<code>有些人说不清哪里好 但就是谁都替代不了</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;无论什么语言，都需要逻辑，而逻辑中，能否判断出真假，是最基本也是最重要技能之一&lt;/code&gt;。&lt;/p&gt;
&lt;h1 id=&quot;JS中的假值有6个&quot;&gt;&lt;a href=&quot;#JS中的假值有6个&quot; class=&quot;headerlink&quot; title=&quot;JS中的假值有6个&quot;&gt;&lt;/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端之路 树根 树干 树叶</title>
    <link href="https://wdd.js.org/frontend-tree-root-trunk-leaf.html"/>
    <id>https://wdd.js.org/frontend-tree-root-trunk-leaf.html</id>
    <published>2018-03-26T10:09:44.000Z</published>
    <updated>2018-03-26T10:11:51.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="树根-向下扎实基本功"><a href="#树根-向下扎实基本功" class="headerlink" title="树根 向下扎实基本功"></a>树根 向下扎实基本功</h1><h1 id="树干-积累让身躯更坚实"><a href="#树干-积累让身躯更坚实" class="headerlink" title="树干 积累让身躯更坚实"></a>树干 积累让身躯更坚实</h1><h1 id="树叶-随风而去的好奇心"><a href="#树叶-随风而去的好奇心" class="headerlink" title="树叶 随风而去的好奇心"></a>树叶 随风而去的好奇心</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;树根-向下扎实基本功&quot;&gt;&lt;a href=&quot;#树根-向下扎实基本功&quot; class=&quot;headerlink&quot; title=&quot;树根 向下扎实基本功&quot;&gt;&lt;/a&gt;树根 向下扎实基本功&lt;/h1&gt;&lt;h1 id=&quot;树干-积累让身躯更坚实&quot;&gt;&lt;a href=&quot;#树干-积累让身躯更坚
      
    
    </summary>
    
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>洞香春</title>
  
  <subtitle>洞香春以名士荟萃、谈论国事、交流思想而著称于当时列国 --《大秦帝国》</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wdd.js.org/"/>
  <updated>2018-02-08T14:07:33.000Z</updated>
  <id>https://wdd.js.org/</id>
  
  <author>
    <name>王端端</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>tcp-high-recv-q-or-send-q-reasons</title>
    <link href="https://wdd.js.org/tcp-high-recv-q-or-send-q-reasons.html"/>
    <id>https://wdd.js.org/tcp-high-recv-q-or-send-q-reasons.html</id>
    <published>2018-02-08T13:58:31.000Z</published>
    <updated>2018-02-08T14:07:33.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul><li><a href="https://stackoverflow.com/questions/34108513/what-is-the-reason-for-a-high-recv-q-of-a-tcp-connection" target="_blank" rel="noopener">What is the reason for a high Recv-Q of a TCP connection?</a></li><li><a href="https://unix.stackexchange.com/questions/100913/tcp-buffers-keep-filling-up-recv-q-full-named-unresponsive" target="_blank" rel="noopener">TCP buffers keep filling up (Recv-Q full): named unresponsive</a></li><li><a href="http://blog.51cto.com/191274/1592101" target="_blank" rel="noopener">linux探秘:netstat中Recv-Q 深究</a></li><li><a href="http://blog.51cto.com/191274/1592101" target="_blank" rel="noopener">深入剖析 Socket——TCP 通信中由于底层队列填满而造成的死锁问题</a></li><li><a href="http://blog.csdn.net/sjin_1314/article/details/9853163" target="_blank" rel="noopener">netstat Recv-Q和Send-Q</a></li><li><a href="http://wiki.jikexueyuan.com/project/java-socket/socket-advanced.html" target="_blank" rel="noopener">深入剖析 Socket——数据传输的底层实现</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;&gt;&lt;/a&gt;参考文献&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/34108513/wh
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>一些关于Hexo的疑问</title>
    <link href="https://wdd.js.org/something-you-may-dont-konw-about-hexo.html"/>
    <id>https://wdd.js.org/something-you-may-dont-konw-about-hexo.html</id>
    <published>2018-02-08T13:29:18.000Z</published>
    <updated>2018-02-08T13:38:08.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p3alsaatj.bkt.clouddn.com/20180208213207_ah8hTV_Jietu20180208-213152.jpeg" alt=""></p><a id="more"></a><h1 id="文件名重复了怎么办？"><a href="#文件名重复了怎么办？" class="headerlink" title="文件名重复了怎么办？"></a>文件名重复了怎么办？</h1><p>使用<code>hexo new filename</code>命令用来新建一个文章，但是如果你创建文章时，已经存在了同样的一个文件名，那么Hexo会怎样处理？</p><ol><li>报错</li><li>覆盖之前的文章</li><li>在文件名后面加个序号</li></ol><p>实际上Hexo使用第三个方式来处理，例如</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 执行下面命令两次，会产生两个文件 filename.md, filename-1.md</span></span><br><span class="line">hexo <span class="keyword">new</span> <span class="type">filename</span></span><br><span class="line"><span class="type">hexo</span> <span class="keyword">new</span> <span class="type">filename</span></span><br></pre></td></tr></table></figure><p>所以，在创建文章时，你根本不需要考虑文章重名的事情，Hexo会自动帮你加上序号后处理。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p3alsaatj.bkt.clouddn.com/20180208213207_ah8hTV_Jietu20180208-213152.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="https://wdd.js.org/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo NexT主题设置封面的方法</title>
    <link href="https://wdd.js.org/hexo-next-theme-set-cover.html"/>
    <id>https://wdd.js.org/hexo-next-theme-set-cover.html</id>
    <published>2018-02-08T13:09:50.000Z</published>
    <updated>2018-02-08T13:26:22.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p3alsaatj.bkt.clouddn.com/20180208212257_BZZjA5_1200px-The_Great_Wave_off_Kanagawa.jpeg" alt=""></p><p>默认情况下NexT主题的首页，每篇文章几乎都会全部渲染出来。这是这样来看，首页就会变得非常长，不利于快速浏览。</p><p>而我希望首页可以尽量缩短，每个文章只需要稍微一点介绍，如果有图片，就设置一张封面就好了。</p><p>下面是具体的设置步骤</p><a id="more"></a><h1 id="Next主题设置摘要"><a href="#Next主题设置摘要" class="headerlink" title="Next主题设置摘要"></a>Next主题设置摘要</h1><p>filename: themes/next/_config.yml，将auto_excerpt.enable设置成true，length属性表示摘要的字数限制。<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">auto_excerpt:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  length:</span> <span class="number">150</span></span><br></pre></td></tr></table></figure></p><h1 id="文章具体设置"><a href="#文章具体设置" class="headerlink" title="文章具体设置"></a>文章具体设置</h1><p>在 <code>&lt;!-- more --&gt;</code>上面放一张图片就可以了</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hexo</span> <span class="string">NexT主题设置封面的方法</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018</span><span class="bullet">-02</span><span class="bullet">-08</span> <span class="number">21</span><span class="string">:09:50</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="string">![](http://p3alsaatj.bkt.clouddn.com/20180208212257_BZZjA5_1200px-The_Great_Wave_off_Kanagawa.jpeg)</span></span><br><span class="line"></span><br><span class="line"><span class="string">文章摘要</span></span><br><span class="line"></span><br><span class="line"><span class="string">&lt;!--</span> <span class="string">more</span> <span class="bullet">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="string">文章正文</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p3alsaatj.bkt.clouddn.com/20180208212257_BZZjA5_1200px-The_Great_Wave_off_Kanagawa.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;默认情况下NexT主题的首页，每篇文章几乎都会全部渲染出来。这是这样来看，首页就会变得非常长，不利于快速浏览。&lt;/p&gt;
&lt;p&gt;而我希望首页可以尽量缩短，每个文章只需要稍微一点介绍，如果有图片，就设置一张封面就好了。&lt;/p&gt;
&lt;p&gt;下面是具体的设置步骤&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="https://wdd.js.org/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>寻一片净土 书写我自己的芳华</title>
    <link href="https://wdd.js.org/write-blog-belong-myself.html"/>
    <id>https://wdd.js.org/write-blog-belong-myself.html</id>
    <published>2018-02-08T12:18:42.000Z</published>
    <updated>2018-02-08T13:07:58.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p3alsaatj.bkt.clouddn.com/20180208202159_i9HYlT_1-1G024112343148.jpeg" alt=""></p><a id="more"></a><p>我曾经在csdn上写过博客</p><p>后来因为csdn的广告太多，我就不再csdn上写了</p><p>我也曾在博客园上写过博客</p><p>后来因为博客园上对markdown支持不够好，所以我也放弃了</p><p>我也曾在segmentfault上写过博客</p><p>它上面的markdown编辑器也还好用</p><p>但是有时候不知道是什么原因</p><p>它的markdown编辑器有时候太卡了，而且经常会出现上传图片失败</p><p>最让我不能容忍的是</p><p>你在SegmentFault删除自己的博客，那其实是逻辑删除</p><p>别人还是可以通过连接去访问的</p><p>而且SegmentFault上的广告也开始慢慢变多了</p><p>而且SegmentFault上对文章的限制也是比较多的</p><p>大树底下好乘凉，但是你的流量也是需要给大树的</p><p>互联网时代，看似任何服务都是免费的</p><p>其实免费的才是最贵的</p><p>你用了别人的服务，无论如何，你总要提供给别人价值</p><p>无论怎样，你总要做出你的回报</p><p>但是，无论如何，我总是需要一个更加独立的领地</p><p>她可以完全属于我</p><p>无论是野草还是野花</p><p>无论是杨柳依依还是雨雪霏霏</p><p>我都可以放肆潇洒</p><p>我需要一片净土</p><p>来书写我自己的芳华</p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180208203548_bMcwuP_平凡之路.jpeg" alt=""></p><blockquote><p>所以，最近一直在把SegmentFault上的文章搬迁到github pages上</p><p>另外图片全部存在七牛云上</p><p>使用hexo next主题，做一个完全自主的静态博客</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p3alsaatj.bkt.clouddn.com/20180208202159_i9HYlT_1-1G024112343148.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="思想者" scheme="https://wdd.js.org/tags/%E6%80%9D%E6%83%B3%E8%80%85/"/>
    
  </entry>
  
  <entry>
    <title>定时器学习：利用定时器分解耗时任务案例</title>
    <link href="https://wdd.js.org/settimeout-to-splice-big-work.html"/>
    <id>https://wdd.js.org/settimeout-to-splice-big-work.html</id>
    <published>2018-02-08T06:09:54.000Z</published>
    <updated>2018-02-08T06:11:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>对于执行时间过长的脚本，有的浏览器会弹出警告，说页面无响应。有的浏览器会直接终止脚本。总而言之，浏览器不希望某一个代码块长时间处于运行状态，因为js是单线程的。一个代码块长时间运行，将会导致其他任何任务都必须等待。从用户体验上来说，很有可能发生页面渲染卡顿或者点击事件无响应的状态。</p><blockquote><p>如果一段脚本的运行时间超过5秒，有些浏览器（比如Firefox和Opera）将弹出一个对话框警告用户该脚本“无法响应”。而其他浏览器，比如iPhone上的浏览器，将默认终止运行时间超过5秒钟的脚本。–《JavaScript忍者秘籍》</p></blockquote><p>JavaScript忍者秘籍里有个很好的比喻：页面上发生的各种事情就好像一群人在讨论事情，如果有个人一直在说个不停，其他人肯定不乐意。我们希望有个裁判，定时的切换其他人来说话。</p><p>Js利用定时器来分解任务，关键点有两个。</p><ol><li><p>按什么维度去分解任务</p></li><li><p>任务的现场保存与现场恢复</p></li></ol><h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><p>要求：动态创建一个表格，一共10000行，每行10个单元格</p><h2 id="一次性创建"><a href="#一次性创建" class="headerlink" title="一次性创建"></a>一次性创建</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> tbody = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'tbody'</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> allLines = <span class="number">10000</span>;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 每次渲染的行数</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.time(<span class="string">'wd'</span>);</span></span><br><span class="line"><span class="actionscript"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;allLines; i++)&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> tr = <span class="built_in">document</span>.createElement(<span class="string">'tr'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>; j&lt;<span class="number">10</span>; j++)&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> td = <span class="built_in">document</span>.createElement(<span class="string">'td'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">td.appendChild(<span class="built_in">document</span>.createTextNode(i+<span class="string">','</span>+j));</span></span><br><span class="line"><span class="undefined">tr.appendChild(td);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">tbody.appendChild(tr);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.timeEnd(<span class="string">'wd'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>总共耗时180ms, 浏览器已经给出警告！[Violation] &#39;setTimeout&#39; handler took 53ms</code>。</p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180208141029_DSFYi3_Screenshot.jpeg" alt=""></p><h2 id="分批次动态创建"><a href="#分批次动态创建" class="headerlink" title="分批次动态创建"></a>分批次动态创建</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> tbody = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'tbody'</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> allLines = <span class="number">10000</span>;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 每次渲染的行数</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> everyTimeCreateLines = <span class="number">80</span>;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 当前行</span></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> currentLine = <span class="number">0</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">renderTable</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.time(<span class="string">'wd'</span>);</span></span><br><span class="line"><span class="actionscript"><span class="keyword">for</span>(<span class="keyword">var</span> i=currentLine; i&lt;currentLine+everyTimeCreateLines &amp;&amp; i&lt;allLines; i++)&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> tr = <span class="built_in">document</span>.createElement(<span class="string">'tr'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>; j&lt;<span class="number">10</span>; j++)&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> td = <span class="built_in">document</span>.createElement(<span class="string">'td'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">td.appendChild(<span class="built_in">document</span>.createTextNode(i+<span class="string">','</span>+j));</span></span><br><span class="line"><span class="undefined">tr.appendChild(td);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">tbody.appendChild(tr);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.timeEnd(<span class="string">'wd'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">currentLine = i;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">if</span>(currentLine &lt; allLines)&#123;</span></span><br><span class="line"><span class="undefined">setTimeout(renderTable,0);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;,0);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>这次异步按批次创建，没有耗时的警告。因为控制了每次代码在50ms内运行。实际上每80行耗时约10ms左右。这就不会引起页面卡顿等问题。</code></p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180208141052_DlS2x4_Screenshot.jpeg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对于执行时间过长的脚本，有的浏览器会弹出警告，说页面无响应。有的浏览器会直接终止脚本。总而言之，浏览器不希望某一个代码块长时间处于运行状态，因为js是单线程的。一个代码块长时间运行，将会导致其他任何任务都必须等待。从用户体验上来说，很有可能发生页面渲染卡顿或者点击事件无响应
      
    
    </summary>
    
    
      <category term="setTimeout" scheme="https://wdd.js.org/tags/setTimeout/"/>
    
  </entry>
  
  <entry>
    <title>关于JavaScropt函数式编程，我多么希望能早点看到这本书</title>
    <link href="https://wdd.js.org/js-functional-programming.html"/>
    <id>https://wdd.js.org/js-functional-programming.html</id>
    <published>2018-02-08T06:06:22.000Z</published>
    <updated>2018-02-08T06:08:05.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我父亲以前跟我说过，有些事物在你得到之前是无足轻重的，得到之后就不可或缺了。微波炉是这样，智能手机是这样，互联网也是这样——老人们在没有互联网的时候过得也很充实。对我来说，函数的柯里化（curry）也是这样。</p></blockquote><p><img src="http://p3alsaatj.bkt.clouddn.com/20180208140707_POIKmq_Screenshot.jpeg" alt=""><br><img src="http://p3alsaatj.bkt.clouddn.com/20180208140717_25soGz_Screenshot.jpeg" alt=""></p><p>然后我继续看了这本书的中文版。有些醍醐灌顶的感觉。 随之在github搜了一下。<br><img src="http://p3alsaatj.bkt.clouddn.com/20180208140730_aTXsaN_Screenshot.jpeg" alt=""></p><p>我想，即使付费，我也愿意看。</p><p>中文版地址：<a href="https://www.gitbook.com/book/llh911001/mostly-adequate-guide-chinese/details" target="_blank" rel="noopener">https://www.gitbook.com/book/llh911001/mostly-adequate-guide-chinese/details</a><br>github原文地址：<a href="https://github.com/MostlyAdequate/mostly-adequate-guide" target="_blank" rel="noopener">https://github.com/MostlyAdequate/mostly-adequate-guide</a></p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180208140744_5kvV4A_Screenshot.jpeg" alt=""></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>其实我是想学点函数柯里化的东西，然后用谷歌搜索了一下。第一个结果就是这本书。<code>非常感谢谷歌搜索，如果我用百度，可能就没有缘分遇到这本书了。</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;我父亲以前跟我说过，有些事物在你得到之前是无足轻重的，得到之后就不可或缺了。微波炉是这样，智能手机是这样，互联网也是这样——老人们在没有互联网的时候过得也很充实。对我来说，函数的柯里化（curry）也是这样。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;
      
    
    </summary>
    
    
      <category term="函数式编程" scheme="https://wdd.js.org/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>积水成渊：用github gist收藏你的代码片段</title>
    <link href="https://wdd.js.org/gist-collect-code-snippets.html"/>
    <id>https://wdd.js.org/gist-collect-code-snippets.html</id>
    <published>2018-02-08T06:02:40.000Z</published>
    <updated>2018-02-08T06:04:55.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Github-Gis服务"><a href="#Github-Gis服务" class="headerlink" title="Github Gis服务"></a>Github Gis服务</h1><ul><li>出生名门github</li><li>用于记录代码片段</li><li>匿名张贴</li><li>能像wiki一样记录历史如果您修改了已经发布了的Gist的话，之前的所有版本都将被保存。</li><li>支持markdown</li><li>…</li></ul><p>更多介绍请看：<a href="https://www.zhihu.com/question/21343711" target="_blank" rel="noopener">如何看待 Github Gist这个服务，怎样更好的利用？</a></p><h1 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h1><h2 id="gistbox-谷歌浏览器插件，用来编写gist"><a href="#gistbox-谷歌浏览器插件，用来编写gist" class="headerlink" title="gistbox: 谷歌浏览器插件，用来编写gist"></a>gistbox: 谷歌浏览器插件，用来编写gist</h2><p><img src="http://p3alsaatj.bkt.clouddn.com/20180208140404_EDRTAX_Screenshot.jpeg" alt=""></p><h2 id="lepton-支持windows-max-linux"><a href="#lepton-支持windows-max-linux" class="headerlink" title="lepton: 支持windows, max,linux"></a>lepton: 支持windows, max,linux</h2><p>我自己用的就是这个，感觉还不错<br>github: <a href="https://github.com/hackjutsu/Lepton" target="_blank" rel="noopener">https://github.com/hackjutsu/Lepton</a></p><ul><li>支持markdown</li><li>支持搜索</li><li>支持打标签</li><li>…</li></ul><p><img src="http://p3alsaatj.bkt.clouddn.com/20180208140426_ZPBCpF_Screenshot.jpeg" alt=""></p><p>看看官方的一些截图。</p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180208140435_fH3oRd_Screenshot.jpeg" alt=""><br><img src="http://p3alsaatj.bkt.clouddn.com/20180208140446_IQ7NtM_Screenshot.jpeg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Github-Gis服务&quot;&gt;&lt;a href=&quot;#Github-Gis服务&quot; class=&quot;headerlink&quot; title=&quot;Github Gis服务&quot;&gt;&lt;/a&gt;Github Gis服务&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;出生名门github&lt;/li&gt;
&lt;li&gt;用于记录
      
    
    </summary>
    
    
      <category term="gist" scheme="https://wdd.js.org/tags/gist/"/>
    
  </entry>
  
  <entry>
    <title>终于找到你！如何将前端console.log的日志保存成文件?</title>
    <link href="https://wdd.js.org/save-console-log-as-file.html"/>
    <id>https://wdd.js.org/save-console-log-as-file.html</id>
    <published>2018-02-08T05:56:40.000Z</published>
    <updated>2018-02-08T05:57:44.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本篇文章来自一个需求，前端websocket会收到各种消息，但是调试的时候，我希望把websoekt推送过来的消息都保存到一个文件里，如果出问题的时候，我可以把这些消息的日志文件提交给后端开发区分析错误。但是在浏览器里，js一般是不能写文件的。鼠标另存为的方法也是不太好，因为会保存所有的console.log的输出。于是，终于找到这个debugout.js。</p></blockquote><p><code>debugout.js的原理是将所有日志序列化后，保存到一个变量里。当然这个变量不会无限大，因为默认的最大日志限制是2500行，这个是可配置的。另外，debugout.js也支持在localStorage里存储日志的。</code></p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180208135709_Z3SQQV_Screenshot.jpeg" alt=""></p><h1 id="debugout-js"><a href="#debugout-js" class="headerlink" title="debugout.js"></a><a href="https://github.com/inorganik/debugout.js" target="_blank" rel="noopener">debugout.js</a></h1><blockquote><p>一般来说，可以使用打开console面板，然后右键save，是可以将console.log输出的信息另存为log文件的。但是这就把所有的日志都包含进来了，如何只保存我想要的日志呢？</p></blockquote><p>（调试输出）从您的日志中生成可以搜索，时间戳，下载等的文本文件。 参见下面的一些例子。</p><p>Debugout的log（）接受任何类型的对象，包括函数。 Debugout不是一个猴子补丁，而是一个单独的记录类，你使用而不是控制台。</p><p>调试的一些亮点：</p><ul><li>在运行时或任何时间获取整个日志或尾部</li><li>搜索并切片日志</li><li>更好地了解可选时间戳的使用模式</li><li>在一个地方切换实时日志记录（console.log）</li><li>可选地将输出存储在window.localStorage中，并在每个会话中持续添加到同一个日志</li><li>可选地，将日志上限为X个最新行以限制内存消耗</li></ul><p>下图是使用downloadLog方法下载的日志文件。</p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180208135722_EwunDY_Screenshot.jpeg" alt=""></p><p>官方提供的demo示例，欢迎试玩。<a href="http://inorganik.github.io/debugout.js/" target="_blank" rel="noopener">http://inorganik.github.io/debugout.js/</a></p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180208135732_Ltowzp_Screenshot.jpeg" alt=""></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>在脚本顶部的全局命名空间中创建一个新的调试对象，并使用debugout的日志方法替换所有控制台日志方法：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var</span> bugout = <span class="built_in">new</span> debugout();</span><br><span class="line"></span><br><span class="line">// instead of console.<span class="built_in">log</span>('<span class="built_in">some</span> object <span class="keyword">or</span> <span class="built_in">string</span>')</span><br><span class="line">bugout.<span class="built_in">log</span>('<span class="built_in">some</span> object <span class="keyword">or</span> <span class="built_in">string</span>');</span><br></pre></td></tr></table></figure><h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><ul><li>log() -像console.log(), 但是会自动存储</li><li>getLog() - 返回所有日志</li><li>tail(numLines) - 返回尾部执行行日志，默认100行</li><li>search(string) - 搜索日志</li><li>getSlice(start, numLines) - 日志切割</li><li>downloadLog() - 下载日志</li><li>clear() - 清空日志</li><li>determineType() - 一个更细粒度的typeof为您提供方便</li></ul><h1 id="可选配置"><a href="#可选配置" class="headerlink" title="可选配置"></a>可选配置</h1><p>···<br>// log in real time (forwards to console.log)<br>self.realTimeLoggingOn = true;<br>// insert a timestamp in front of each log<br>self.useTimestamps = false;<br>// store the output using window.localStorage() and continuously add to the same log each session<br>self.useLocalStorage = false;<br>// set to false after you’re done debugging to avoid the log eating up memory<br>self.recordLogs = true;<br>// to avoid the log eating up potentially endless memory<br>self.autoTrim = true;<br>// if autoTrim is true, this many most recent lines are saved<br>self.maxLines = 2500;<br>// how many lines tail() will retrieve<br>self.tailNumLines = 100;<br>// filename of log downloaded with downloadLog()<br>self.logFilename = ‘log.txt’;<br>// max recursion depth for logged objects<br>self.maxDepth = 25;<br>···</p><h1 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h1><p><a href="https://github.com/inorganik/debugout.js" target="_blank" rel="noopener">https://github.com/inorganik/debugout.js</a></p><h1 id="另外"><a href="#另外" class="headerlink" title="另外"></a>另外</h1><p>我自己也模仿debugout.js写了一个日志保存的项目，该项目可以在ie10及以上下载日志。<br>debugout.js在ie浏览器上下载日志的方式是有问题的。<br>项目地址：<a href="https://github.com/wangduanduan/log4b.git" target="_blank" rel="noopener">https://github.com/wangduanduan/log4b.git</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本篇文章来自一个需求，前端websocket会收到各种消息，但是调试的时候，我希望把websoekt推送过来的消息都保存到一个文件里，如果出问题的时候，我可以把这些消息的日志文件提交给后端开发区分析错误。但是在浏览器里，js一般是不能写文件的。鼠标
      
    
    </summary>
    
    
      <category term="console" scheme="https://wdd.js.org/tags/console/"/>
    
  </entry>
  
  <entry>
    <title>如何浏览器里调试iframe里层的代码？</title>
    <link href="https://wdd.js.org/debug-code-in-iframe.html"/>
    <id>https://wdd.js.org/debug-code-in-iframe.html</id>
    <published>2018-02-08T05:53:48.000Z</published>
    <updated>2018-02-08T05:55:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前一直非常痛苦，在iframe外层根本获取不了里面的信息，后来使用了postMessage用传递消息来实现，但是用起来还是非常不方便。</p><p>其实浏览器本身是可以选择不同的iframe的执行环境的。例如有个变量是在iframe里面定义的，你只需要切换到这个iframe的执行环境，你就可以随意操作这个环境的任何变量了。</p><p><code>这个小技巧，对于调试非常有用，但是我直到今天才发现。</code></p><h1 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h1><p>这个小箭头可以让你选择不同的iframe的执行环境，可以切换到你的iframe环境里。</p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180208135509_koFmKH_Screenshot.jpeg" alt=""></p><h1 id="IE"><a href="#IE" class="headerlink" title="IE"></a>IE</h1><p>如图所示是ie11的dev tool点击下来箭头，也可以选择不同的iframe执行环境。</p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180208135527_niIzO1_Screenshot.jpeg" alt=""></p><h1 id="其他浏览器"><a href="#其他浏览器" class="headerlink" title="其他浏览器"></a>其他浏览器</h1><p>其他浏览器可以自行摸索一下。。。（G_H）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前一直非常痛苦，在iframe外层根本获取不了里面的信息，后来使用了postMessage用传递消息来实现，但是用起来还是非常不方便。&lt;/p&gt;
&lt;p&gt;其实浏览器本身是可以选择不同的iframe的执行环境的。例如有个变量是在iframe里面定义的，你只需要切换到这个ifra
      
    
    </summary>
    
    
      <category term="debug" scheme="https://wdd.js.org/tags/debug/"/>
    
  </entry>
  
  <entry>
    <title>8行代码的模板字符串替换函数</title>
    <link href="https://wdd.js.org/a-very-simple-template-function.html"/>
    <id>https://wdd.js.org/a-very-simple-template-function.html</id>
    <published>2018-02-08T05:51:13.000Z</published>
    <updated>2018-02-08T05:52:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><ul><li>无依赖</li><li>无检查</li><li>无错误处理</li><li>无逻辑</li><li>无配置</li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span><span class="params">(tpl, data)</span></span>&#123;</span><br><span class="line">    var re = /&#123;&#123;([^&#125;]+)?&#125;&#125;/;</span><br><span class="line">    var <span class="built_in">match</span> = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">match</span> = re.exec(tpl))&#123;</span><br><span class="line">        tpl = tpl.replace(<span class="built_in">match</span>[<span class="number">0</span>],data[<span class="built_in">match</span>[<span class="number">1</span>]]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tpl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tpl = <span class="string">'/cube_xinbao_dial_result/&#123;&#123;action&#125;&#125;/&#123;&#123;report_type&#125;&#125;/&#123;&#123;query&#125;&#125;/?userId=&#123;&#123;userId&#125;&#125;'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data = &#123;<span class="attr">report_type</span>:<span class="number">1</span>, <span class="attr">query</span>: <span class="string">'2323'</span>, <span class="attr">action</span>: <span class="string">'todolist'</span>,<span class="attr">userId</span>: <span class="string">'23234234'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">tpl, data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> re = <span class="regexp">/&#123;&#123;([^&#125;]+)?&#125;&#125;/</span>;</span><br><span class="line">    <span class="keyword">var</span> match = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">while</span>(match = re.exec(tpl))&#123;</span><br><span class="line">        tpl = tpl.replace(match[<span class="number">0</span>],data[match[<span class="number">1</span>]]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tpl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(render(tpl,data));</span><br><span class="line"></span><br><span class="line">&gt; <span class="regexp">/cube_xinbao_dial_result/</span>todolist/<span class="number">1</span>/<span class="number">2323</span>/?userId=<span class="number">23234234</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;特点&quot;&gt;&lt;a href=&quot;#特点&quot; class=&quot;headerlink&quot; title=&quot;特点&quot;&gt;&lt;/a&gt;特点&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;无依赖&lt;/li&gt;
&lt;li&gt;无检查&lt;/li&gt;
&lt;li&gt;无错误处理&lt;/li&gt;
&lt;li&gt;无逻辑&lt;/li&gt;
&lt;li&gt;无配置&lt;/li&gt;
&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>git常用配置与操作整理</title>
    <link href="https://wdd.js.org/my-git-common-config.html"/>
    <id>https://wdd.js.org/my-git-common-config.html</id>
    <published>2018-02-08T05:49:29.000Z</published>
    <updated>2018-02-08T05:51:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h1><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--global user.name <span class="string">"wddd"</span>   </span><br><span class="line">git<span class="built_in"> config </span>--global user.email <span class="string">"rwerewrsdfds"</span> </span><br><span class="line">  </span><br><span class="line">git<span class="built_in"> config </span>--global color.ui <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">git<span class="built_in"> config </span>--global alias.co checkout</span><br><span class="line">git<span class="built_in"> config </span>--global alias.ci commit</span><br><span class="line">git<span class="built_in"> config </span>--global alias.st status</span><br><span class="line">git<span class="built_in"> config </span>--global alias.br branch</span><br><span class="line">git<span class="built_in"> config </span>--global alias.mg merge</span><br><span class="line">git<span class="built_in"> config </span>--global alias.cp cherry-pick</span><br><span class="line">git<span class="built_in"> config </span>--global push.default current</span><br><span class="line"></span><br><span class="line">git<span class="built_in"> config </span>--global core.editor <span class="string">"mate -w"</span>    # 设置Editor使用textmate</span><br><span class="line">git<span class="built_in"> config </span>-l  # 列举所有配置</span><br></pre></td></tr></table></figure><h1 id="提交与查看状态"><a href="#提交与查看状态" class="headerlink" title="提交与查看状态"></a>提交与查看状态</h1><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 提交</span></span><br><span class="line">git <span class="keyword">ci</span> -am <span class="string">"fix a bug"</span></span><br><span class="line">git push</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看状态</span></span><br><span class="line">git <span class="keyword">st</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 切换到某个分支</span></span><br><span class="line">git <span class="keyword">st</span> <span class="comment">// 先看看当前分支有没有没有提交的代码，如果有，要先提交，然后再切换到其他分支</span></span><br><span class="line">git co <span class="keyword">test</span><span class="comment">// 切换到test分支</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看当前一共有多少分支</span></span><br><span class="line">git <span class="keyword">br</span> -a</span><br><span class="line"></span><br><span class="line"><span class="comment">// pull远程分支代码到本地分支</span></span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><h1 id="分支推送与拉取"><a href="#分支推送与拉取" class="headerlink" title="分支推送与拉取"></a>分支推送与拉取</h1><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基于本地maste分支，新建一个dev分支</span></span><br><span class="line">git chheckout master <span class="comment">// 切换到master分支</span></span><br><span class="line">git checkout -b <span class="built_in">dev</span> <span class="comment">// 基于master,新建dev分支, 并切换到dev分支</span></span><br><span class="line">git push origin <span class="built_in">dev</span> <span class="comment">// 将dev分支，推送到远程仓库</span></span><br><span class="line"></span><br><span class="line">git fetch origin test <span class="comment">// 拉去远程test分支到本地</span></span><br></pre></td></tr></table></figure><h1 id="git-仅仅合并某次提交"><a href="#git-仅仅合并某次提交" class="headerlink" title="git 仅仅合并某次提交"></a>git 仅仅合并某次提交</h1><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout <span class="literal">master</span></span><br><span class="line">git cherry-pick commit-id1 commit-id2  // 把指定commit合并到当前分支</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;常用配置&quot;&gt;&lt;a href=&quot;#常用配置&quot; class=&quot;headerlink&quot; title=&quot;常用配置&quot;&gt;&lt;/a&gt;常用配置&lt;/h1&gt;&lt;figure class=&quot;highlight routeros&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;
      
    
    </summary>
    
    
      <category term="git" scheme="https://wdd.js.org/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>谷歌浏览器 audio如何隐藏下载按钮</title>
    <link href="https://wdd.js.org/audio-hide-download-icon.html"/>
    <id>https://wdd.js.org/audio-hide-download-icon.html</id>
    <published>2018-02-08T05:46:45.000Z</published>
    <updated>2018-02-08T05:51:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>当我们使用原生的audio标签时，可以看到如下的效果。</p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180208134739_FKSyw4_Screenshot.jpeg" alt=""></p><p><code>那么如何让下载按钮隐藏掉呢？</code></p><h1 id="controlsList-”nodownload”"><a href="#controlsList-”nodownload”" class="headerlink" title="controlsList=”nodownload”"></a>controlsList=”nodownload”</h1><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个方法只支持 Chrome 58+， 低于该版本的是没有无法隐藏的</span></span><br><span class="line">&lt;<span class="selector-tag">audio</span> src=<span class="string">"/i/horse.ogg"</span> controls=<span class="string">"controls"</span> controlsList=<span class="string">"nodownload"</span>&gt;</span><br><span class="line">    Your browser does not support the <span class="selector-tag">audio</span> element.</span><br><span class="line">&lt;/audio&gt;</span><br></pre></td></tr></table></figure><p>controlsList属性只兼容Chrome 58+以上，具体可以参考<a href="https://github.com/googlechrome/samples/blob/gh-pages/media/controlslist.html" target="_blank" rel="noopener">controlslist.html</a> ，<a href="https://googlechrome.github.io/samples/media/controlslist.html" target="_blank" rel="noopener">controlsList在线例子</a></p><ul><li>nodownload: 不要下载</li><li>nofullscreen: 不要全屏</li><li>noremoteplayback: 不要远程回放</li></ul><h1 id="css方式来隐藏"><a href="#css方式来隐藏" class="headerlink" title="css方式来隐藏"></a>css方式来隐藏</h1><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个方式兼容所有版本的谷歌浏览器</span></span><br><span class="line"><span class="selector-tag">audio</span>::-webkit-media-controls &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden !important</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">audio</span>::-webkit-media-controls-enclosure &#123;</span><br><span class="line">    <span class="attribute">width</span>: calc(<span class="number">100%</span> + <span class="number">32px</span>);</span><br><span class="line">    <span class="attribute">margin-left</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="即使让下载按钮隐藏了，如何禁止右键下载？"><a href="#即使让下载按钮隐藏了，如何禁止右键下载？" class="headerlink" title="即使让下载按钮隐藏了，如何禁止右键下载？"></a>即使让下载按钮隐藏了，如何禁止右键下载？</h1><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给audio标签禁止右键，来禁止下载</span></span><br><span class="line">&lt;<span class="selector-tag">audio</span> src=<span class="string">"/i/horse.ogg"</span> controls=<span class="string">"controls"</span> controlsList=<span class="string">"nodownload"</span> oncontextmenu=<span class="string">"return false"</span>&gt;</span><br><span class="line">    Your browser does not support the <span class="selector-tag">audio</span> element.</span><br><span class="line">&lt;/audio&gt;</span><br></pre></td></tr></table></figure><h1 id="第三方插件-audiojs"><a href="#第三方插件-audiojs" class="headerlink" title="第三方插件: audiojs"></a>第三方插件: audiojs</h1><p>项目地址: <a href="https://github.com/kolber/audiojs" target="_blank" rel="noopener">https://github.com/kolber/audiojs</a><br>优点： 简单，无依赖<br>缺点：异步插入的audio标签，每次还是需要重新调用audiojs.createAll()方法来重新实例化</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 1.</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/audiojs/audio.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 2.</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">   audiojs.events.ready(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">     <span class="keyword">var</span> <span class="keyword">as</span> = audiojs.createAll();</span></span><br><span class="line"><span class="undefined">   &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果图：<br><img src="http://p3alsaatj.bkt.clouddn.com/20180208134755_pPAs8b_Screenshot.jpeg" alt=""></p><h1 id="audio相关问题以及解决方案"><a href="#audio相关问题以及解决方案" class="headerlink" title="audio相关问题以及解决方案"></a>audio相关问题以及解决方案</h1><ul><li><a href="https://wenjs.me/p/about-mp3progress-on-audio" target="_blank" rel="noopener">关于动态生成的mp3在audio标签无法拖动的问题: (audio断点续传)</a></li></ul><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul><li><a href="https://stackoverflow.com/questions/41115801/in-chrome-55-prevent-showing-download-button-for-html-5-video" target="_blank" rel="noopener">https://stackoverflow.com/questions/41115801/in-chrome-55-prevent-showing-download-button-for-html-5-video</a></li><li><a href="https://stackoverflow.com/questions/39602852/disable-download-button-for-google-chrome/40975859#40975859" target="_blank" rel="noopener">https://stackoverflow.com/questions/39602852/disable-download-button-for-google-chrome/40975859#40975859</a></li><li><a href="https://googlechrome.github.io/samples/media/controlslist.html" target="_blank" rel="noopener">https://googlechrome.github.io/samples/media/controlslist.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;当我们使用原生的audio标签时，可以看到如下的效果。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p3alsaatj.bkt.clouddn.com/20180208134739_FKSyw4_Screenshot.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Audio 如果你愿意一层一层剥开我的心</title>
    <link href="https://wdd.js.org/audio-heart-detail.html"/>
    <id>https://wdd.js.org/audio-heart-detail.html</id>
    <published>2018-02-08T01:44:01.000Z</published>
    <updated>2018-02-08T01:48:05.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我觉得DOM就好像是元素周期表里的元素，JS就好像是实验器材，通过各种化学反应，产生各种魔术。</p></blockquote><p><img src="http://p3alsaatj.bkt.clouddn.com/20180208094439_zGRL80_Screenshot.jpeg" alt=""></p><h1 id="Audio"><a href="#Audio" class="headerlink" title="Audio"></a>Audio</h1><p>通过打开谷歌浏览器的dev tools -&gt; Settings -&gt; Elements -&gt; Show user agent shadow DOM, 你可以看到其实Audio标签也是由常用的 input标签和div等标签合成的。</p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180208094451_tBBQUM_Screenshot.jpeg" alt=""></p><h1 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h1><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> &lt;<span class="selector-tag">audio</span> src=<span class="string">"http://65.ierge.cn/12/186/372266.mp3"</span>&gt;</span><br><span class="line">Your browser does not support the <span class="selector-tag">audio</span> element.</span><br><span class="line">&lt;/audio&gt;</span><br><span class="line"></span><br><span class="line">&lt;br&gt;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span> &lt;<span class="selector-tag">audio</span> src=<span class="string">"http://65.ierge.cn/12/186/372266.mp3"</span> controls=<span class="string">"controls"</span>&gt;</span><br><span class="line">Your browser does not support the <span class="selector-tag">audio</span> element.</span><br><span class="line">&lt;/audio&gt;</span><br><span class="line"></span><br><span class="line">&lt;br&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// controlsList属性目前只支持 chrome 58+</span></span><br><span class="line"><span class="number">3</span> &lt;<span class="selector-tag">audio</span> src=<span class="string">"http://65.ierge.cn/12/186/372266.mp3"</span> controls=<span class="string">"controls"</span> controlsList=<span class="string">"nodownload"</span>&gt; </span><br><span class="line">Your browser does not support the <span class="selector-tag">audio</span> element.</span><br><span class="line">&lt;/audio&gt;</span><br><span class="line"></span><br><span class="line">&lt;br&gt;</span><br><span class="line"></span><br><span class="line"><span class="number">4</span> &lt;<span class="selector-tag">audio</span> controls=<span class="string">"controls"</span>&gt;</span><br><span class="line">&lt;source src=<span class="string">"http://65.ierge.cn/12/186/372266.mp3"</span> type=<span class="string">'audio/mp3'</span> /&gt;</span><br><span class="line">&lt;/audio&gt;</span><br></pre></td></tr></table></figure><p>你可以看出他们在Chrome里表现的差异</p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180208094513_MO2e9z_Screenshot.jpeg" alt=""></p><p>关于audio标签支持的音频类型，可以参考<a href="https://en.wikipedia.org/wiki/HTML5_Audio#Supported_audio_coding_formats" target="_blank" rel="noopener">Audio#Supported_audio_coding_formats</a></p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180208094523_k82xlG_Screenshot.jpeg" alt=""></p><h1 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h1><ul><li>autoplay: 音频流文件就绪后是否自动播放</li><li><p>preload: “none” | “metadata” | “auto” | “” </p><ul><li>“none”: 无需预加载</li><li>“metadata”: 只需要加载元数据，例如音频时长，文件大小等。</li><li>“auto”: 自动优化下载整个流文件</li></ul></li><li><p>controls： “controls” | “” 是否需要显示控件</p></li><li>loop： “loop” or “” 是否循环播放</li><li>mediagroup： string 多个视频或者音频流是否合并</li><li>src： 音频地址</li></ul><h1 id="API-重点"><a href="#API-重点" class="headerlink" title="API(重点)"></a>API(重点)</h1><ul><li>load(): 加载资源</li><li>play(): 播放</li><li>pause(): 暂停</li><li>canPlayType()： 询问浏览器以确定是否可以播放给定的MIME类型</li><li>buffered()：指定文件的缓冲部分的开始和结束时间</li></ul><h1 id="常用事件：Media-Events-重点"><a href="#常用事件：Media-Events-重点" class="headerlink" title="常用事件：Media Events(重点)"></a>常用事件：Media Events(重点)</h1><table><thead><tr><th>事件名</th><th>何时触发</th></tr></thead><tbody><tr><td>loadstart</td><td>开始加载</td></tr><tr><td>progress</td><td>正在加载</td></tr><tr><td>suspend</td><td>用户代理有意无法获取媒体数据，无法获取整个文件</td></tr><tr><td>abort</td><td>主动终端下载资源并不是由于发生错误</td></tr><tr><td>error</td><td>获取资源时发生错误</td></tr><tr><td>play</td><td>开始播放</td></tr><tr><td>pause</td><td>播放暂停</td></tr><tr><td>loadedmetadata</td><td>刚获取完元数据</td></tr><tr><td>loadeddata</td><td>第一次渲染元数据</td></tr><tr><td>waiting</td><td>等待中</td></tr><tr><td>playing</td><td>正在播放</td></tr><tr><td>canplay</td><td>用户代理可以恢复播放媒体数据，但是估计如果现在开始播放，则媒体资源不能以当前播放速率直到其结束呈现，而不必停止进一步缓冲内容。</td></tr><tr><td>canplaythrough</td><td>用户代理估计，如果现在开始播放，则媒体资源可以以当前播放速率一直呈现到其结束，而不必停止进一步的缓冲。</td></tr><tr><td>timeupdate</td><td>当前播放位置作为正常播放的一部分而改变，或者以特别有趣的方式，例如不连续地改变。</td></tr><tr><td>ended</td><td>播放结束</td></tr><tr><td>ratechange</td><td>媒体播放速度改变</td></tr><tr><td>durationchange</td><td>媒体时长改变</td></tr><tr><td>volumechange</td><td>媒体声音大小改变</td></tr></tbody></table><h1 id="Audio-DOM-属性-重点"><a href="#Audio-DOM-属性-重点" class="headerlink" title="Audio DOM 属性(重点)"></a>Audio DOM 属性(重点)</h1><h2 id="只读属性"><a href="#只读属性" class="headerlink" title="只读属性"></a>只读属性</h2><ul><li><code>duration</code>： 媒体时长，数值， 单位s</li><li><code>ended</code>: 是否完成播放，布尔值</li><li><code>paused</code>: 是否播放暂停，布尔值</li></ul><h2 id="其他可读写属性-重点"><a href="#其他可读写属性-重点" class="headerlink" title="其他可读写属性(重点)"></a>其他可读写属性(重点)</h2><ul><li><code>playbackRate</code>： 播放速度，大多数浏览器支持0.5-4， 1表示正常速度，设置该属性可以修改播放速度</li><li><code>volume</code>：0.0-1.0之间，设置该属性可以修改声音大小</li><li><code>muted</code>: 是否静音， 设置该属性可以静音</li><li><code>currentTime</code>：指定播放位置的秒数</li></ul><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 你可以使用元素的属性seekable来决定媒体目前能查找的范围。它返回一个你可以查找的TimeRanges 时间对象。</span></span><br><span class="line"><span class="keyword">var</span> mediaElement = document.getElementById(<span class="string">'mediaElementID'</span>);</span><br><span class="line">mediaElement.seekable.start();  <span class="comment">// 返回开始时间 (in seconds)</span></span><br><span class="line">mediaElement.seekable.<span class="keyword">end</span>();    <span class="comment">// 返回结束时间 (in seconds)</span></span><br><span class="line">mediaElement.currentTime = <span class="number">122</span>; <span class="comment">// 设定在 122 seconds</span></span><br><span class="line">mediaElement.played.<span class="keyword">end</span>();      <span class="comment">// 返回浏览器播放的秒数</span></span><br></pre></td></tr></table></figure><p>以下方法可以使音频以2倍速度播放。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">id</span>=<span class="string">"wdd"</span> <span class="attr">src</span>=<span class="string">"http://65.ierge.cn/12/186/372266.mp3"</span> <span class="attr">controls</span>=<span class="string">"controls"</span>&gt;</span></span><br><span class="line">Your browser does not support the audio element.</span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> myAudio = <span class="built_in">document</span>.getElementById(<span class="string">'wdd'</span>);</span></span><br><span class="line"><span class="undefined">    myAudio.playbackRate = 2;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="常见问题及解决方法"><a href="#常见问题及解决方法" class="headerlink" title="常见问题及解决方法"></a>常见问题及解决方法</h1><ul><li><code>录音无法拖动，播放一端就自动停止</code>： <a href="https://wenjs.me/p/about-mp3progress-on-audio" target="_blank" rel="noopener">https://wenjs.me/p/about-mp3progress-on-audio</a></li><li><code>如何隐藏Audio的下载按钮</code>：<a href="https://segmentfault.com/a/1190000009737051" target="_blank" rel="noopener">https://segmentfault.com/a/1190000009737051</a></li><li><code>想找一个简单的录音播放插件</code>： <a href="https://github.com/kolber/audiojs" target="_blank" rel="noopener">https://github.com/kolber/audiojs</a></li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://www.w3.org/TR/html5/embedded-content-0.html#the-audio-element" target="_blank" rel="noopener">W3C: the-audio-element</a></li><li><a href="https://en.wikipedia.org/wiki/HTML5_Audio#Supported_audio_coding_formats" target="_blank" rel="noopener">wikipedia: HTML5 Audio</a></li><li><a href="https://www.w3.org/wiki/HTML/Elements/audio#Media_Events" target="_blank" rel="noopener">W3C: HTML/Elements/audio</a></li><li><a href="http://html5doctor.com/native-audio-in-the-browser/" target="_blank" rel="noopener">Native Audio in the browser</a></li><li><a href="https://developer.mozilla.org/en-US/Apps/Fundamentals/Audio_and_video_delivery/WebAudio_playbackRate_explained" target="_blank" rel="noopener">HTMLMediaElement.playbackRate</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/HTML/Using_HTML5_audio_and_video" target="_blank" rel="noopener">使用 HTML5 音频和视频</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;我觉得DOM就好像是元素周期表里的元素，JS就好像是实验器材，通过各种化学反应，产生各种魔术。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://p3alsaatj.bkt.clouddn.com/201802080944
      
    
    </summary>
    
    
      <category term="audio" scheme="https://wdd.js.org/tags/audio/"/>
    
  </entry>
  
  <entry>
    <title>github上的那些前端神器</title>
    <link href="https://wdd.js.org/github-powerful-tools-recommend.html"/>
    <id>https://wdd.js.org/github-powerful-tools-recommend.html</id>
    <published>2018-02-08T01:38:32.000Z</published>
    <updated>2018-02-08T01:41:41.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="serve-在任意目录开启静态文件服务器"><a href="#serve-在任意目录开启静态文件服务器" class="headerlink" title="serve: 在任意目录开启静态文件服务器"></a>serve: 在任意目录开启静态文件服务器</h1><ul><li><a href="https://github.com/zeit/serve" target="_blank" rel="noopener">https://github.com/zeit/serve</a></li></ul><p><img src="http://p3alsaatj.bkt.clouddn.com/20180208093930_pRnErF_Screenshot.jpeg" alt=""></p><h1 id="lambda-view：优雅的看js源码"><a href="#lambda-view：优雅的看js源码" class="headerlink" title="lambda-view：优雅的看js源码"></a>lambda-view：优雅的看js源码</h1><ul><li><a href="https://github.com/Jianru-Lin/lambda-view" target="_blank" rel="noopener">https://github.com/Jianru-Lin/lambda-view</a></li></ul><p><img src="http://p3alsaatj.bkt.clouddn.com/20180208093942_n2HZ5Z_Screenshot.jpeg" alt=""></p><h1 id="ConEmu：windows命令行从未如此迷人"><a href="#ConEmu：windows命令行从未如此迷人" class="headerlink" title="ConEmu：windows命令行从未如此迷人"></a>ConEmu：windows命令行从未如此迷人</h1><ul><li><a href="https://github.com/Maximus5/ConEmu" target="_blank" rel="noopener">https://github.com/Maximus5/ConEmu</a></li></ul><p><img src="http://p3alsaatj.bkt.clouddn.com/20180208093958_rE9cvM_Screenshot.jpeg" alt=""></p><h1 id="Wox：天下武功，唯快不破"><a href="#Wox：天下武功，唯快不破" class="headerlink" title="Wox：天下武功，唯快不破"></a>Wox：天下武功，唯快不破</h1><ul><li><a href="https://github.com/Wox-launcher/Wox" target="_blank" rel="noopener">https://github.com/Wox-launcher/Wox</a></li></ul><p><img src="http://p3alsaatj.bkt.clouddn.com/20180208094014_SJzmnb_Screenshot.jpeg" alt=""></p><h1 id="gow：谁说windows不能用linux命令"><a href="#gow：谁说windows不能用linux命令" class="headerlink" title="gow：谁说windows不能用linux命令"></a>gow：谁说windows不能用linux命令</h1><ul><li><a href="https://github.com/bmatzelle/gow" target="_blank" rel="noopener">https://github.com/bmatzelle/gow</a></li></ul><p><img src="http://p3alsaatj.bkt.clouddn.com/20180208094028_KBQKT0_Screenshot.jpeg" alt=""></p><h1 id="vimium：像用vim一样用chrome浏览器"><a href="#vimium：像用vim一样用chrome浏览器" class="headerlink" title="vimium：像用vim一样用chrome浏览器"></a>vimium：像用vim一样用chrome浏览器</h1><ul><li><a href="https://github.com/philc/vimium" target="_blank" rel="noopener">https://github.com/philc/vimium</a></li></ul><p><img src="http://p3alsaatj.bkt.clouddn.com/20180208094044_xVRMWm_Screenshot.jpeg" alt=""></p><h1 id="localtunnel：将内网地址转化成公网地址"><a href="#localtunnel：将内网地址转化成公网地址" class="headerlink" title="localtunnel：将内网地址转化成公网地址"></a>localtunnel：将内网地址转化成公网地址</h1><ul><li><a href="https://github.com/localtunnel/localtunnel" target="_blank" rel="noopener">https://github.com/localtunnel/localtunnel</a></li></ul><p><img src="http://p3alsaatj.bkt.clouddn.com/20180208094058_E8pr8Z_Screenshot.jpeg" alt=""></p><h1 id="8-Browsersync：省时省力的浏览器同步测试工具"><a href="#8-Browsersync：省时省力的浏览器同步测试工具" class="headerlink" title="8 Browsersync：省时省力的浏览器同步测试工具"></a>8 Browsersync：省时省力的浏览器同步测试工具</h1><p>地址：<a href="http://www.browsersync.cn/" target="_blank" rel="noopener">http://www.browsersync.cn/</a></p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180208094111_5udBpr_Screenshot.jpeg" alt=""></p><h1 id="9-PM2-集负载均衡、热更新、监控等功能于一身的Node-js应用程序的生产流程管理器"><a href="#9-PM2-集负载均衡、热更新、监控等功能于一身的Node-js应用程序的生产流程管理器" class="headerlink" title="9 PM2: 集负载均衡、热更新、监控等功能于一身的Node.js应用程序的生产流程管理器"></a>9 PM2: 集负载均衡、热更新、监控等功能于一身的Node.js应用程序的生产流程管理器</h1><p>地址：<a href="https://github.com/Unitech/pm2" target="_blank" rel="noopener">https://github.com/Unitech/pm2</a></p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180208094127_Wj5s2J_Screenshot.jpeg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;serve-在任意目录开启静态文件服务器&quot;&gt;&lt;a href=&quot;#serve-在任意目录开启静态文件服务器&quot; class=&quot;headerlink&quot; title=&quot;serve: 在任意目录开启静态文件服务器&quot;&gt;&lt;/a&gt;serve: 在任意目录开启静态文件服务器&lt;/h1
      
    
    </summary>
    
    
      <category term="github" scheme="https://wdd.js.org/tags/github/"/>
    
      <category term="工具" scheme="https://wdd.js.org/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>gitbook 前端好书推荐</title>
    <link href="https://wdd.js.org/gitbook-good-book-recommend.html"/>
    <id>https://wdd.js.org/gitbook-good-book-recommend.html</id>
    <published>2018-02-08T01:35:03.000Z</published>
    <updated>2018-02-08T01:37:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Front-End-Developer-Handbook-2017"><a href="#Front-End-Developer-Handbook-2017" class="headerlink" title="Front-End Developer Handbook 2017"></a>Front-End Developer Handbook 2017</h1><ul><li>地址：<a href="https://frontendmasters.com/books/front-end-handbook/2017/" target="_blank" rel="noopener">https://frontendmasters.com/books/front-end-handbook/2017/</a></li></ul><p>这是任何人都可以用来了解前端开发实践的指南。它大致概述并讨论了前端工程的实践：如何学习它，以及在2017年实践时使用什么工具。</p><p>这是专门为潜在的和目前实践的前端开发人员提供专业资源，以配备学习材料和开发工具。其次，管理者，首席技术官，导师和猎头人士可以使用它来了解前端开发的实践。</p><p>手册的内容有利于网络技术（HTML，CSS，DOM和JavaScript）以及直接构建在这些开放技术之上的解决方案。本书中引用和讨论的材料是课堂上最好的或目前提出的问题。</p><p>该书不应被视为对前端开发人员可用的所有资源的全面概述。这本书的价值被简单，集中和及时地组织起来，仅仅是足够的绝对信息，以免任何人在任何一个特定的主题上压倒一切。</p><p>目的是每年发布一次内容更新。</p><p>手册分为三部分。</p><p>第一部分。前端实践</p><p>第一部分广泛描述了前端工程的实践。</p><p>第二部分：学习前端发展</p><p>第二部分指出了自主导向和直接的资源，用于学习成为前端开发人员。</p><p>第三部分：前端开发工具</p><p>第三部分简要解释和识别交易工具。</p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180208093612_dpum1B_Screenshot.jpeg" alt=""></p><h1 id="JS函数式编程指南"><a href="#JS函数式编程指南" class="headerlink" title="JS函数式编程指南"></a>JS函数式编程指南</h1><p>英文版地址：<br>中文版地址：<a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/" target="_blank" rel="noopener">https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/</a></p><blockquote><p>这本书的主题是函数范式（functional paradigm），我们将使用 JavaScript 这个世界上最流行的函数式编程语言来讲述这一主题。有人可能会觉得选择 JavaScript 并不明智，因为当前的主流观点认为它是一门命令式（imperative）的语言，并不适合用来讲函数式。但我认为，这是学习函数式编程的最好方式，因为：</p></blockquote><p><code>你很有可能在日常工作中使用它</code></p><p>这让你有机会在实际的编程过程中学以致用，而不是在空闲时间用一门深奥的函数式编程语言做一些玩具性质的项目。</p><p><code>你不必从头学起就能开始编写程序</code></p><p>在纯函数式编程语言中，你必须使用 monad 才能打印变量或者读取 DOM 节点。JavaScript 则简单得多，可以作弊走捷径，因为毕竟我们的目的是学写纯函数式代码。JavaScript 也更容易入门，因为它是一门混合范式的语言，你随时可以在感觉吃力的时候回退到原有的编程习惯上去。</p><p><code>这门语言完全有能力书写高级的函数式代码</code></p><p>只需借助一到两个微型类库，JavaScript 就能模拟 Scala 或 Haskell 这类语言的全部特性。虽然面向对象编程（Object-oriented programing）主导着业界，但很明显这种范式在 JavaScript 里非常笨拙，用起来就像在高速公路上露营或者穿着橡胶套鞋跳踢踏舞一样。我们不得不到处使用 bind 以免 this 不知不觉地变了，语言里没有类可以用（目前还没有），我们还发明了各种变通方法来应对忘记调用 new 关键字后的怪异行为，私有成员只能通过闭包（closure）才能实现，等等。对大多数人来说，函数式编程看起来更加自然。+</p><p>以上说明，强类型的函数式语言毫无疑问将会成为本书所示范式的最佳试验场。JavaScript 是我们学习这种范式的一种手段，将它应用于什么地方则完全取决于你自己。幸运的是，所有的接口都是数学的，因而也是普适的。最终你会发现你习惯了 swiftz、scalaz、haskell 和 purescript，以及其他各种数学偏向的语言。</p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180208093626_sxuAr3_Screenshot.jpeg" alt=""></p><h1 id="前端开发笔记本"><a href="#前端开发笔记本" class="headerlink" title="前端开发笔记本"></a>前端开发笔记本</h1><p>地址：<a href="http://chanshuyi.github.io/frontend_notebook/" target="_blank" rel="noopener">http://chanshuyi.github.io/frontend_notebook/</a></p><p>前端开发笔记本涵括了大部分前端开发所需的知识点，主要包括5大部分：《页面制作》、《JavaScript程序设计》、《DOM编程》、《页面架构》、《前端产品架构》。</p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180208093640_prGtzY_Screenshot.jpeg" alt=""><br><img src="http://p3alsaatj.bkt.clouddn.com/20180208093648_jJXSIc_Screenshot.jpeg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Front-End-Developer-Handbook-2017&quot;&gt;&lt;a href=&quot;#Front-End-Developer-Handbook-2017&quot; class=&quot;headerlink&quot; title=&quot;Front-End Developer Handbo
      
    
    </summary>
    
    
      <category term="books" scheme="https://wdd.js.org/tags/books/"/>
    
      <category term="gitbook" scheme="https://wdd.js.org/tags/gitbook/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs Express dockerfile最佳实践</title>
    <link href="https://wdd.js.org/nodejs-best-dockerfile.html"/>
    <id>https://wdd.js.org/nodejs-best-dockerfile.html</id>
    <published>2018-02-08T01:28:04.000Z</published>
    <updated>2018-02-08T01:30:29.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="少啰嗦，先看代码"><a href="#少啰嗦，先看代码" class="headerlink" title="少啰嗦，先看代码"></a>少啰嗦，先看代码</h1><h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"xxx"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.0.0"</span>,</span><br><span class="line">  <span class="attr">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"node ./bin/www"</span>,</span><br><span class="line">    <span class="attr">"forever"</span>: <span class="string">"node_modules/forever/bin/forever bin/www"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"async"</span>: <span class="string">"0.9.0"</span>,</span><br><span class="line">    <span class="attr">"body-parser"</span>: <span class="string">"1.13.2"</span>,</span><br><span class="line">    <span class="attr">"compression"</span>: <span class="string">"1.6.2"</span>,</span><br><span class="line">    <span class="attr">"config"</span>: <span class="string">"1.12.0"</span>,</span><br><span class="line">    <span class="attr">"connect-multiparty"</span>: <span class="string">"2.0.0"</span>,</span><br><span class="line">    <span class="attr">"cookie-parser"</span>: <span class="string">"1.3.5"</span>,</span><br><span class="line">    <span class="attr">"debug"</span>: <span class="string">"2.2.0"</span>,</span><br><span class="line">    <span class="attr">"ejs"</span>: <span class="string">"2.3.3"</span>,</span><br><span class="line">    <span class="attr">"express"</span>: <span class="string">"4.13.1"</span>,</span><br><span class="line">    <span class="attr">"forever"</span>: <span class="string">"0.15.3"</span>,</span><br><span class="line">    <span class="attr">"http-proxy-middleware"</span>: <span class="string">"0.17.3"</span>,</span><br><span class="line">    <span class="attr">"log4js"</span>: <span class="string">"0.6.24"</span>,</span><br><span class="line">    <span class="attr">"serve-favicon"</span>: <span class="string">"2.3.0"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="dockerfile"><a href="#dockerfile" class="headerlink" title="dockerfile"></a>dockerfile</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">9.2</span>.<span class="number">1</span>-alpine</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk update &amp;&amp; apk add bash tzdata \</span></span><br><span class="line"><span class="bash">    &amp;&amp; cp -r -f /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">WORKDIR /app</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">COPY package.json yarn.lock /app/</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">RUN yarn install --production &amp;&amp; yarn cache clean</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">COPY . /app</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">EXPOSE 8088</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">CMD yarn run server</span></span><br></pre></td></tr></table></figure><h1 id="分析原理"><a href="#分析原理" class="headerlink" title="分析原理"></a>分析原理</h1><ul><li>使用alpine的nodejs镜像，显著缩小nodejs镜像大小</li><li>node:9.2.1-alpine自带yarn 和 npm</li><li>copy package到run npm i到copy . /app, 这样的顺序可以充分使用镜像缓存</li></ul><p><code>修改过后，对比之前通过jenkins打包时间从10分钟缩短到7.4秒</code></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://rock-it.pl/how-to-write-excellent-dockerfiles/" target="_blank" rel="noopener">How to write excellent Dockerfiles</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;少啰嗦，先看代码&quot;&gt;&lt;a href=&quot;#少啰嗦，先看代码&quot; class=&quot;headerlink&quot; title=&quot;少啰嗦，先看代码&quot;&gt;&lt;/a&gt;少啰嗦，先看代码&lt;/h1&gt;&lt;h2 id=&quot;package-json&quot;&gt;&lt;a href=&quot;#package-json&quot; cla
      
    
    </summary>
    
    
      <category term="nodejs" scheme="https://wdd.js.org/tags/nodejs/"/>
    
      <category term="docker" scheme="https://wdd.js.org/tags/docker/"/>
    
      <category term="dockerfile" scheme="https://wdd.js.org/tags/dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>表单验证工具 jquery-validation Vs Parsley</title>
    <link href="https://wdd.js.org/jquery-validation-vs-parsley.html"/>
    <id>https://wdd.js.org/jquery-validation-vs-parsley.html</id>
    <published>2018-02-08T01:26:00.000Z</published>
    <updated>2018-02-08T01:26:55.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本对比"><a href="#基本对比" class="headerlink" title="基本对比"></a>基本对比</h1><table><thead><tr><th>名称</th><th>gitbub地址</th><th>stars</th><th>文档地址</th></tr></thead><tbody><tr><td>jquery-validation</td><td><a href="https://github.com/jquery-validation/jquery-validation" target="_blank" rel="noopener">这里</a></td><td>7859(截止7/21)</td><td><a href="http://www.runoob.com/jquery/jquery-plugin-validate.html" target="_blank" rel="noopener">这里</a></td></tr><tr><td>Parsley.js</td><td><a href="https://github.com/guillaumepotier/Parsley.js" target="_blank" rel="noopener">这里</a></td><td>7979(截止7/21)</td><td><a href="http://parsleyjs.org/" target="_blank" rel="noopener">这里</a></td></tr></tbody></table><h1 id="强烈推荐Parsley"><a href="#强烈推荐Parsley" class="headerlink" title="强烈推荐Parsley"></a>强烈推荐Parsley</h1><p>这两个表格验证插件我都用过，最早用的是jqueryValidataion, 现在用Parsley。<br>这两个插件都<code>依赖jQuery</code>。但是如果说那个跟好用的话，真心推荐Parsley。Parsley<code>号称不用写一行代码就能验证表单</code>。另外从star的数量上也可以看出来Parsley更流行。而且Parsley支持在html中就将错误信息定义在里面。</p><p>Parsley优势</p><ul><li><code>直观的DOM API</code>: 像没有其他表单验证库一样，只需用HTML格式写入您的要求，Parsley将会做剩下的所有事情！不需要编写一行代码来验证表单。</li><li><code>动态表单验证</code>： parsley现在更聪明，它会自动检测您的表单的修改并相应地调整其验证。简单地添加，删除或编辑字段，parsley将会自动验证。</li><li>还有好多… </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line"> &lt;input type=<span class="string">"text"</span> required=<span class="string">""</span> </span><br><span class="line"> data-parsley-checkphonenum </span><br><span class="line"> data-parsley-checkphonenum-message=<span class="string">"手机号码格式有误"</span> </span><br><span class="line"> name=<span class="string">"phoneNum"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-control"</span> </span><br><span class="line"> placeholder=<span class="string">"请填写手机号"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/验证表单</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 注意 checkphonenum是我自定义的验证规则，添加到parsley里面的</span></span><br><span class="line"><span class="regexp">$('from').parsley().validate();</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基本对比&quot;&gt;&lt;a href=&quot;#基本对比&quot; class=&quot;headerlink&quot; title=&quot;基本对比&quot;&gt;&lt;/a&gt;基本对比&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;gitbub地址&lt;/th&gt;
&lt;th&gt;stars&lt;/th&gt;
      
    
    </summary>
    
    
      <category term="jQuery" scheme="https://wdd.js.org/tags/jQuery/"/>
    
      <category term="Parsley" scheme="https://wdd.js.org/tags/Parsley/"/>
    
  </entry>
  
  <entry>
    <title>前端小白的python实战 报纸分词排序</title>
    <link href="https://wdd.js.org/python-paper-word-split.html"/>
    <id>https://wdd.js.org/python-paper-word-split.html</id>
    <published>2018-02-08T01:23:37.000Z</published>
    <updated>2018-02-08T01:32:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>先看效果：</p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180208092429_56loaY_Screenshot.jpeg" alt=""></p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul><li>win7 64位</li><li>python 3.5</li></ul><h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><p>抓取一篇报纸，并提取出关键字，然后按照出现次数排序，用echarts在页面上显示出来。</p><h1 id="工具选择"><a href="#工具选择" class="headerlink" title="工具选择"></a>工具选择</h1><p>因为之前对nodejs的相关工具比较熟悉，在用python的时候，也想有类似的工具。所以就做了一个对比的表格。</p><table><thead><tr><th>功能</th><th>nodejs版</th><th>python版</th></tr></thead><tbody><tr><td>http工具</td><td><a href="https://github.com/request/request" target="_blank" rel="noopener">request</a></td><td><a href="https://github.com/requests/requests" target="_blank" rel="noopener">requests</a></td></tr><tr><td>中文分词工具</td><td><a href="https://github.com/leizongmin/node-segment" target="_blank" rel="noopener">node-segment</a>, <a href="https://github.com/yanyiwu/nodejieba" target="_blank" rel="noopener">nodejieba</a>(一直没有安装成功过)</td><td><a href="https://github.com/fxsjy/jieba" target="_blank" rel="noopener">jieba</a>(分词准确度比node-segment好)</td></tr><tr><td>DOM解析工具</td><td><a href="https://github.com/cheeriojs/cheerio" target="_blank" rel="noopener">cheeio</a></td><td><a href="https://github.com/gawel/pyquery" target="_blank" rel="noopener">pyquery</a>(这两个工具都是有类似jQuery那种选择DOM的接口，很方便)</td></tr><tr><td>函数编程工具</td><td><a href="https://github.com/jashkenas/underscore" target="_blank" rel="noopener">underscore.js</a></td><td><a href="https://github.com/serkanyersen/underscore.py" target="_blank" rel="noopener">underscore.py</a>(underscore来处理集合比较方便)</td></tr><tr><td>服务器</td><td><a href="https://github.com/expressjs/express" target="_blank" rel="noopener">express</a></td><td><a href="https://github.com/pallets/flask" target="_blank" rel="noopener">flask</a></td></tr></tbody></table><h1 id="开始的噩梦：中文乱码"><a href="#开始的噩梦：中文乱码" class="headerlink" title="开始的噩梦：中文乱码"></a>开始的噩梦：中文乱码</h1><p>感觉每个学python的人都遇到过中文乱码的问题。我也不例外。</p><p>首先要抓取网页，但是网页在控制台输出的时候，中文总是乱码。搞了好久，搞得我差点要放弃python。最终找到解决方法。<a href="http://blog.csdn.net/jim7424994/article/details/22675759" target="_blank" rel="noopener"> 解决python3 UnicodeEncodeError: ‘gbk’ codec can’t encode character ‘\xXX’ in position XX</a></p><p>过程很艰辛，但是从中也学到很多知识。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import io</span><br><span class="line">import sys</span><br><span class="line">sys<span class="selector-class">.stdout</span> = io.TextIOWrapper(sys<span class="selector-class">.stoodout</span><span class="selector-class">.buffer</span>,encoding=<span class="string">'gb18030'</span>)</span><br></pre></td></tr></table></figure><h1 id="函数式编程：-顺享丝滑"><a href="#函数式编程：-顺享丝滑" class="headerlink" title="函数式编程： 顺享丝滑"></a>函数式编程： 顺享丝滑</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#filename word_rank.py</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> jieba <span class="keyword">as</span> _jieba <span class="comment"># 中文分词比较优秀的一个库</span></span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq <span class="comment">#类似于jquery、cheerio的库</span></span><br><span class="line"><span class="keyword">from</span> underscore <span class="keyword">import</span> _ <span class="comment"># underscore.js python版本</span></span><br><span class="line">sys.stdout = io.TextIOWrapper(sys.stdout.buffer,encoding=<span class="string">'gb18030'</span>) <span class="comment"># 解决控制台中文乱码</span></span><br><span class="line"></span><br><span class="line">USELESSWORDS = [<span class="string">'的'</span>,<span class="string">'要'</span>,<span class="string">'了'</span>,<span class="string">'在'</span>,<span class="string">'和'</span>,<span class="string">'是'</span>,<span class="string">'把'</span>,<span class="string">'向'</span>,<span class="string">'上'</span>,<span class="string">'为'</span>,<span class="string">'等'</span>,<span class="string">'个'</span>] <span class="comment"># 标记一些无用的单词</span></span><br><span class="line">TOP = <span class="number">30</span> <span class="comment"># 只要前面的30个就可以了</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_remove_punctuation</span><span class="params">(line)</span>:</span> <span class="comment"># 移除非中文字符</span></span><br><span class="line">    <span class="comment"># rule = re.compile("[^a-zA-Z0-9\u4e00-\u9fa5]")</span></span><br><span class="line">    rule = re.compile(<span class="string">"[^\u4e00-\u9fa5]"</span>)</span><br><span class="line">    line = rule.sub(<span class="string">''</span>,line)</span><br><span class="line">    <span class="keyword">return</span> line</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_calculate_frequency</span><span class="params">(words)</span>:</span> <span class="comment"># 计算分词出现的次数</span></span><br><span class="line">    result = &#123;&#125;</span><br><span class="line">    res = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">        <span class="keyword">if</span> result.get(word, <span class="number">-1</span>) == <span class="number">-1</span>:</span><br><span class="line">            result[word] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result[word] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> result:</span><br><span class="line">        <span class="keyword">if</span> _.contains(USELESSWORDS, word): <span class="comment"># 排除无用的分词</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        res.append(&#123;</span><br><span class="line">                <span class="string">'word'</span>: word,</span><br><span class="line">                <span class="string">'fre'</span>: result[word]</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> _.sortBy(res, <span class="string">'fre'</span>)[::<span class="number">-1</span>][:TOP] <span class="comment"># 降序排列</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_page</span><span class="params">(url)</span>:</span> <span class="comment"># 获取页面</span></span><br><span class="line">    <span class="keyword">return</span> requests.get(url)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_text</span><span class="params">(req)</span>:</span> <span class="comment"># 获取文章部分</span></span><br><span class="line">    <span class="keyword">return</span> pq(req.content)(<span class="string">'#ozoom'</span>).text()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(url)</span>:</span> <span class="comment"># 入口函数，函数组合</span></span><br><span class="line">    <span class="keyword">return</span> _.compose(</span><br><span class="line">        _get_page,</span><br><span class="line">        _get_text,</span><br><span class="line">        _remove_punctuation,</span><br><span class="line">        _jieba.cut,</span><br><span class="line">        _calculate_frequency</span><br><span class="line">        )(url)</span><br></pre></td></tr></table></figure><h1 id="python服务端：Flask浅入浅出"><a href="#python服务端：Flask浅入浅出" class="headerlink" title="python服务端：Flask浅入浅出"></a>python服务端：Flask浅入浅出</h1><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import word_rank</span><br><span class="line">from flask import Flask, request, jsonify, render_template</span><br><span class="line">app = Flask(__name_<span class="number">_</span>)</span><br><span class="line">app.debug = True</span><br><span class="line"></span><br><span class="line">@app.route(<span class="string">'/rank'</span>) <span class="comment"># 从query参数里获取pageUrl，并给分词排序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getRank</span><span class="params">()</span></span><span class="symbol">:</span></span><br><span class="line">    pageUrl = request.args.get(<span class="string">'pageUrl'</span>)</span><br><span class="line">    app.logger.debug(pageUrl)</span><br><span class="line"></span><br><span class="line">    rank = word_rank.main(pageUrl)</span><br><span class="line">    app.logger.debug(rank)</span><br><span class="line">    <span class="keyword">return</span> jsonify(rank)</span><br><span class="line"></span><br><span class="line">@app.route(<span class="string">'/'</span>) <span class="comment"># 主页面</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHome</span><span class="params">()</span></span><span class="symbol">:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'home.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name_<span class="number">_</span> == <span class="string">'__main__'</span><span class="symbol">:</span></span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>据说有个定律：<code>凡是能用JavaScript写出来的，最终都会用JavaScript写出来</code>。 我是很希望这样啦。但是不得不承认，python上有很多非常优秀的库。<br>这些库在npm上并没有找到合适的替代品。</p><p>所以，我就想: <code>如何能用nodejs直接调用python的第三方库</code></p><p>目前的解决方案有两种，第一，只用nodejs的child_processes。这个方案我试过，但是不太好用。</p><p>第二，npm里面有一些包，可以直接调用python的库。例如：<a href="https://github.com/chrisdickinson/node-python" target="_blank" rel="noopener">node-python</a>, <a href="https://github.com/monkeycz/python.js" target="_blank" rel="noopener">python.js</a>, 但是这些包我在win7上安装的时候总是报错。而且解决方法也蛮麻烦的。索性我就直接用python了。</p><p>最后附上项目地址：<a href="https://github.com/wangduanduan/read-newspaper" target="_blank" rel="noopener">https://github.com/wangduanduan/read-newspaper</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;先看效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://p3alsaatj.bkt.clouddn.com/20180208092429_56loaY_Screenshot.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; clas
      
    
    </summary>
    
    
      <category term="Python" scheme="https://wdd.js.org/tags/Python/"/>
    
      <category term="分词" scheme="https://wdd.js.org/tags/%E5%88%86%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>【笔记】 程序员修炼之道 从小工到专家</title>
    <link href="https://wdd.js.org/how-to-be-a-better-programer.html"/>
    <id>https://wdd.js.org/how-to-be-a-better-programer.html</id>
    <published>2018-02-08T01:21:11.000Z</published>
    <updated>2018-02-08T01:22:00.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>1 关心你的技艺</li><li>2 思考你的工作</li><li>3 <code>在所有的弱点中，最大的弱点就是害怕暴露弱点</code></li><li>4 提供各种选择，不要找各种蹩脚的借口</li><li>5 不要容忍破窗户</li><li>6 作变化的催化剂</li><li>7 记住大方向</li><li>8 让质量成为需求问题</li><li>9 知识也会贬值，定期为你的知识投资<ul><li>每年至少学习一种编程语言</li><li>每季度至少读一本技术书籍</li><li>也要阅读非技术书籍</li><li>上课</li><li>上网</li><li>玩玩UNIX</li><li>跟上潮流</li></ul></li><li>10 批判的分析你读到的和听到的</li><li>11 我相信，被打量要被忽略要好</li><li>12 你说什么和<code>你怎样说</code>同样重要</li><li>13 <code>不要重复你自己, 也不要重复别人</code></li><li>14 糟糕的代码才需要许多注释</li><li>15 让复用变得容易</li><li>16 消除无关事物之间的影响 (解耦性，正交性)</li><li>17 编码<ul><li>让你的代码保持解耦</li><li>避免使用全局数据</li><li>避免编写相似的函数</li></ul></li><li>18 <code>如果某个想法是你唯一的想法，再没有什么比这更危险的事情了</code></li><li>19 不存在最终决定</li><li>20 稍后就是永不</li><li>21 用曳光弹找到目标</li><li>22 语言的界限就是一个人世界的界限</li><li>23 靠近问题编程</li><li>24 估算，避免发生意外</li><li>25 用纯文本保存知识</li><li>26 利用命令<code>shells</code>的力量</li><li>27 用好一种编辑器，彻底了解它，确保你的编辑器能在所有平台上使用 (我的最爱是<code>sublime</code>)<ul><li>可配置</li><li>可扩展</li><li>可编辑</li><li>语法高亮</li><li>自动完成</li><li>自动缩进</li><li>跨平台</li><li>启动快</li><li>占用内存小</li><li>漂亮</li></ul></li><li>28 总是使用源码控制</li><li>29 要修正问题，而不是发出职责 (关于调试，bug)</li><li>30 不要恐慌 (我曾经差点因为上线的之前的重大问题产生辞职的想法)</li><li>31 不要假定，要证明</li><li>32 <code>你不可能写出完美的软件</code></li><li>33 如果它不可能发生，用断言确保它不会发生</li><li>34 将异常用于异常的问题</li><li>35 要有始有终</li><li>36 <code>使模块之间的耦合减至最小</code></li><li>37 <code>要配置，不要集成</code> (可配置)</li><li>38 将抽象放进代码，将细节放进元数据</li><li>39 分析工作流，以改善并发性</li><li>40 用服务进行设计</li><li>41 总是为并发进行设计</li><li>42 将视图与模型分离</li><li>43 小心那些替你编写大量代码的工具，除非你了解它在做什么</li><li>44 不要靠巧合编程</li><li>45 估算你算法的阶</li><li>46 早重构，常重构</li><li>47 为测试而设计</li><li>48 不要搜集需求，挖掘他们</li><li>49 与用户一起工作，以像用户一样思考</li><li>50 需求不是架构，需求不是设计，也不是用户界面，而是需求。</li><li>51 <code>抽象比细节活的更长久</code></li><li>52 <code>使用项目词汇表</code> (名不正则言不顺)</li><li>53 昂贵的工具不一定能制作出更好的设计</li><li>54 早测试，常测试，自动测试</li><li>55 要到通过全部测试，编码才算完成</li><li>56 把网收紧，一个bug只抓一次</li><li>57 温和的超出用户的期望</li><li>58 在你的作品上签名</li><li>59 建立自己的藏书库</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;1 关心你的技艺&lt;/li&gt;
&lt;li&gt;2 思考你的工作&lt;/li&gt;
&lt;li&gt;3 &lt;code&gt;在所有的弱点中，最大的弱点就是害怕暴露弱点&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;4 提供各种选择，不要找各种蹩脚的借口&lt;/li&gt;
&lt;li&gt;5 不要容忍破窗户&lt;/li&gt;
&lt;li&gt;6
      
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://wdd.js.org/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>代码整洁之道 - 有意义的命名</title>
    <link href="https://wdd.js.org/clean-code-method.html"/>
    <id>https://wdd.js.org/clean-code-method.html</id>
    <published>2018-02-08T01:17:54.000Z</published>
    <updated>2018-02-08T01:19:56.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在小朱元璋出生一个月后，父母为他取了一个名字（元时惯例）：朱重八，这个名字也可以叫做朱八八。我们这里再介绍一下，朱重八家族的名字，都很有特点。<br>朱重八高祖名字：朱百六；<br>朱重八曾祖名字：朱四九；<br>朱重八祖父名字：朱初一；<br>他的父亲我们介绍过了，叫朱五四。<br>取这样的名字不是因为朱家是搞数学的，而是因为在元朝，老百姓如果不能上学和当官就没有名字，只能以父母年龄相加或者出生的日期命名。（登记户口的人一定会眼花）–《明朝那些事儿》</p></blockquote><p>那么问题来了，朱四九和朱百六是什么关系？ 你可能马上懵逼了。所以说：<code>命名不仅仅是一种科学，更是一种艺术</code>。</p><h1 id="名副其实"><a href="#名副其实" class="headerlink" title="名副其实"></a>名副其实</h1><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> d; <span class="comment">// 分手的时间，以天计算</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> daysAfterBrokeUp; <span class="comment">// 分手以后，以天计算</span></span><br></pre></td></tr></table></figure><h1 id="避免误导"><a href="#避免误导" class="headerlink" title="避免误导"></a>避免误导</h1><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> nameList = <span class="string">'wdd'</span>; <span class="comment">// List一般暗指数据是数组，而不应该赋值给字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> nameList = [<span class="string">'wdd'</span>,<span class="string">'ddw'</span>,<span class="string">'dwd'</span>]; <span class="comment">// </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> ill10o = <span class="number">10</span>; <span class="comment">//千万不要把i,1,l,0,o,O放在一起，傻傻分不清楚</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> illOne = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h1 id="做有意义的区分"><a href="#做有意义的区分" class="headerlink" title="做有意义的区分"></a>做有意义的区分</h1><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> userData, userInfo; <span class="comment">// Data和Info, 有什么区别？？？？, 不要再用data和info这样模糊不清的单词了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> userProfile, userAcount</span><br></pre></td></tr></table></figure><h1 id="使用读得出来的名称"><a href="#使用读得出来的名称" class="headerlink" title="使用读得出来的名称"></a>使用读得出来的名称</h1><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad </span></span><br><span class="line"><span class="keyword">var</span> beeceearrthrtee; <span class="comment">// 你知道怎么读吗？ 鼻涕阿三？？</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> userName;</span><br></pre></td></tr></table></figure><h1 id="使用可搜索的名称"><a href="#使用可搜索的名称" class="headerlink" title="使用可搜索的名称"></a>使用可搜索的名称</h1><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> e = <span class="string">'not found'</span>; <span class="comment">// 想搜e, 就很难搜</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> ERROR_NO_FOUND = <span class="string">'not found'</span>;</span><br></pre></td></tr></table></figure><h1 id="方法名一概是动词短语"><a href="#方法名一概是动词短语" class="headerlink" title="方法名一概是动词短语"></a>方法名一概是动词短语</h1><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createAgent</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">funtion deleteAgent()&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateAgent</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">queryAgent</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><h1 id="尽量不要用单字母名称-除了用于循环"><a href="#尽量不要用单字母名称-除了用于循环" class="headerlink" title="尽量不要用单字母名称, 除了用于循环"></a>尽量不要用单字母名称, 除了用于循环</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// very good</span></span><br><span class="line">userList.<span class="keyword">forEach</span>(<span class="function"><span class="keyword">function</span><span class="params">(user)</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="每个概念对应一个词"><a href="#每个概念对应一个词" class="headerlink" title="每个概念对应一个词"></a>每个概念对应一个词</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">controller和manager, 没什么区别，要用controller都用controller, 要用manager都用manager, 不要混着用</span><br></pre></td></tr></table></figure><h1 id="建立项目词汇表-不要随意创造名称"><a href="#建立项目词汇表-不要随意创造名称" class="headerlink" title="建立项目词汇表, 不要随意创造名称"></a>建立项目词汇表, 不要随意创造名称</h1><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">user</span></span>, agent, org, queue, activity, device...</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li>《代码整洁之道》</li><li>《明朝那些事儿》</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在小朱元璋出生一个月后，父母为他取了一个名字（元时惯例）：朱重八，这个名字也可以叫做朱八八。我们这里再介绍一下，朱重八家族的名字，都很有特点。&lt;br&gt;朱重八高祖名字：朱百六；&lt;br&gt;朱重八曾祖名字：朱四九；&lt;br&gt;朱重八祖父名字：朱初一；&lt;br&gt;他
      
    
    </summary>
    
    
  </entry>
  
</feed>

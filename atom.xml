<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>洞香春</title>
  
  <subtitle>洞香春以名士荟萃、谈论国事、交流思想而著称于当时列国 --《大秦帝国》</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wdd.js.org/"/>
  <updated>2018-02-11T08:16:44.000Z</updated>
  <id>https://wdd.js.org/</id>
  
  <author>
    <name>王端端</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>VI必备常用场景快捷操作</title>
    <link href="https://wdd.js.org/vi-useful-expressions.html"/>
    <id>https://wdd.js.org/vi-useful-expressions.html</id>
    <published>2018-02-11T07:37:33.000Z</published>
    <updated>2018-02-11T08:16:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-【字符串替换】快速修改配置文件版本号"><a href="#1-【字符串替换】快速修改配置文件版本号" class="headerlink" title="1. 【字符串替换】快速修改配置文件版本号"></a>1. 【字符串替换】快速修改配置文件版本号</h1><p>语法：<code>%s/str1/str2/g</code> 将文件中所有的str1字符串替换成str2字符串。</p><p>示例：某个服务从43版本升级到44版本</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span> vi某个配置文件， 进入vi命令模式，输入</span><br><span class="line">:%s<span class="regexp">/43/</span><span class="number">44</span><span class="regexp">/g</span></span><br></pre></td></tr></table></figure><p>这样做的好处是不需要移动光标去查找，然后进入插入模式去修改版本，而是直接替换，这样比较快捷。</p><p>注意：<code>务必确认要被替换的字符串只有一个，否则可能造成误替换。</code></p><p>更多用法：</p><table><thead><tr><th>语法</th><th>功能</th><th>示例</th></tr></thead><tbody><tr><td><code>:s/str1/str2/</code></td><td>替换当前行<code>第一个</code>str1为str2</td><td><code>:s/44/45</code></td></tr><tr><td><code>:s/str1/str2/g</code></td><td>替换当前行<code>所有的</code>str1为str2</td><td><code>:s/44/45/g</code></td></tr><tr><td><code>:%s/str1/str2/</code></td><td>替换每一行<code>第一个</code>str1为str2</td><td><code>:%s/44/45</code></td></tr><tr><td><code>:%s/str1/str2/g</code></td><td>替换每一行<code>所有的</code>str1为str2</td><td><code>:%s/44/45/g</code></td></tr></tbody></table><h1 id="2-光标移动"><a href="#2-光标移动" class="headerlink" title="2. 光标移动"></a>2. 光标移动</h1><p>注意：可配合 <code>:set nu</code>显示行号</p><table><thead><tr><th>语法</th><th>功能</th><th>示例</th></tr></thead><tbody><tr><td>G</td><td>移动到这个档案的最后一行(常用)</td><td></td></tr><tr><td>nG</td><td>n 为数字。移动到这个档案的第 n 行。</td><td>20G 则会移动到这个档案的第20行</td></tr><tr><td>gg</td><td>移动到这个档案的第一行</td><td></td></tr><tr><td><code>n&lt;Enter&gt;</code></td><td>n 为数字 光标向下移动 n 行</td><td><code>3&lt;Enter&gt;</code> 向下移动三行</td></tr></tbody></table><h1 id="3-vi快捷手册"><a href="#3-vi快捷手册" class="headerlink" title="3. vi快捷手册"></a>3. vi快捷手册</h1><p><img src="http://p3alsaatj.bkt.clouddn.com/20180211161542_xzqVSU_vi-vim-cheat-sheet.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-【字符串替换】快速修改配置文件版本号&quot;&gt;&lt;a href=&quot;#1-【字符串替换】快速修改配置文件版本号&quot; class=&quot;headerlink&quot; title=&quot;1. 【字符串替换】快速修改配置文件版本号&quot;&gt;&lt;/a&gt;1. 【字符串替换】快速修改配置文件版本号&lt;/h1
      
    
    </summary>
    
    
      <category term="vi" scheme="https://wdd.js.org/tags/vi/"/>
    
  </entry>
  
  <entry>
    <title>xmysql 一行命令从任何mysql数据库生成REST API</title>
    <link href="https://wdd.js.org/readme-of-xmysql.html"/>
    <id>https://wdd.js.org/readme-of-xmysql.html</id>
    <published>2018-02-11T06:50:29.000Z</published>
    <updated>2018-02-11T06:51:19.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>github向我推荐这个<a href="https://github.com/o1lab/xmysql" target="_blank" rel="noopener">xmysql</a>时候，我瞟了一眼它的简介<code>One command to generate REST APIs for any MySql Database</code>, 说实话这个介绍让我眼前一亮，想想每次向后端的同学要个接口的时候，他们总是要<code>哼哧哼哧</code>搞个半天给才能我。抱着试试看的心态，我试用了一个疗程，oh不是， 是安装并使用了一下。 说实话，体验是蛮不错的，但是体验一把过后，我想不到这个工具的使用场景，因为<code>你不可能把数据库的所有表都公开出来，让前端随意读写,</code> 但是试试看总是不错的.</p></blockquote><h1 id="1-来吧，冒险一次！"><a href="#1-来吧，冒险一次！" class="headerlink" title="1 来吧，冒险一次！"></a>1 来吧，冒险一次！</h1><p><img src="http://p3alsaatj.bkt.clouddn.com/20180211145108_PKYPlv_Screenshot.jpeg" alt=""></p><p><code>安装与使用</code><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> -g xmysql</span><br><span class="line"></span><br><span class="line">xmysql -h localhost -u mysqlUsername -p mysqlPassword -d databaseName</span><br><span class="line"></span><br><span class="line">浏览器打开：<span class="keyword">http</span>://localhost:<span class="number">3000</span>， 应该可以看到一堆<span class="keyword">json</span></span><br></pre></td></tr></table></figure></p><h1 id="2-特点"><a href="#2-特点" class="headerlink" title="2 特点"></a>2 特点</h1><ul><li>产生REST Api从任何mysql 数据库 🔥🔥</li><li>无论主键，外键，表等的命名规则如何，都提供API 🔥🔥</li><li>支持复合主键 🔥🔥</li><li>REST API通常使用：CRUD，List，FindOne，Count，Exists，Distinct<br>批量插入，批量删除，批量读取 🔥</li><li>关联表</li><li>翻页</li><li>排序</li><li>按字段过滤 🔥</li><li>行过滤 🔥</li><li>综合功能</li><li>Group By, Having (as query params) 🔥🔥</li><li>Group By, Having (as a separate API) 🔥🔥</li><li>Multiple group by in one API 🔥🔥🔥🔥</li><li>Chart API for numeric column 🔥🔥🔥🔥🔥🔥</li><li>Auto Chart API - (a gift for lazy while prototyping) 🔥🔥🔥🔥🔥🔥</li><li>XJOIN - (Supports any number of JOINS) 🔥🔥🔥🔥🔥🔥🔥🔥🔥</li><li>Supports views</li><li>Prototyping (features available when using local MySql server only)</li><li>Run dynamic queries 🔥🔥🔥</li><li>Upload single file</li><li>Upload multiple files</li><li>Download file</li></ul><h1 id="3-API-概览"><a href="#3-API-概览" class="headerlink" title="3 API 概览"></a>3 API 概览</h1><table><thead><tr><th>HTTP Type</th><th>API URL</th><th>Comments</th></tr></thead><tbody><tr><td>GET</td><td>/</td><td>Gets all REST APIs</td></tr><tr><td>GET</td><td>/api/tableName</td><td>Lists rows of table</td></tr><tr><td>POST</td><td>/api/tableName</td><td>Create a new row</td></tr><tr><td>PUT</td><td>/api/tableName</td><td>Replaces existing row with new row</td></tr><tr><td>POST :fire:</td><td>/api/tableName/bulk</td><td>Create multiple rows - send object array in request body</td></tr><tr><td>GET  :fire:</td><td>/api/tableName/bulk</td><td>Lists multiple rows - /api/tableName/bulk?_ids=1,2,3</td></tr><tr><td>DELETE :fire:</td><td>/api/tableName/bulk</td><td>Deletes multiple rows - /api/tableName/bulk?_ids=1,2,3</td></tr><tr><td>GET</td><td>/api/tableName/:id</td><td>Retrieves a row by primary key</td></tr><tr><td>PATCH</td><td>/api/tableName/:id</td><td>Updates row element by primary key</td></tr><tr><td>DELETE</td><td>/api/tableName/:id</td><td>Delete a row by primary key</td></tr><tr><td>GET</td><td>/api/tableName/findOne</td><td>Works as list but gets single record matching criteria</td></tr><tr><td>GET</td><td>/api/tableName/count</td><td>Count number of rows in a table</td></tr><tr><td>GET</td><td>/api/tableName/distinct</td><td>Distinct row(s) in table - /api/tableName/distinct?_fields=col1</td></tr><tr><td>GET</td><td>/api/tableName/:id/exists</td><td>True or false whether a row exists or not</td></tr><tr><td>GET</td><td><a href="#relational-tables">/api/parentTable/:id/childTable</a></td><td>Get list of child table rows with parent table foreign key</td></tr><tr><td>GET :fire:</td><td><a href="#aggregate-functions">/api/tableName/aggregate</a></td><td>Aggregate results of numeric column(s)</td></tr><tr><td>GET :fire:</td><td><a href="#group-by-having-as-api">/api/tableName/groupby</a></td><td>Group by results of column(s)</td></tr><tr><td>GET :fire:</td><td><a href="#union-of-multiple-group-by-statements">/api/tableName/ugroupby</a></td><td>Multiple group by results using one call</td></tr><tr><td>GET :fire:</td><td><a href="#chart">/api/tableName/chart</a></td><td>Numeric column distribution based on (min,max,step) or(step array) or (automagic)</td></tr><tr><td>GET :fire:</td><td><a href="#autochart">/api/tableName/autochart</a></td><td>Same as Chart but identifies which are numeric column automatically - gift for lazy while prototyping</td></tr><tr><td>GET :fire:</td><td><a href="#xjoin">/api/xjoin</a></td><td>handles join</td></tr><tr><td>GET :fire:</td><td><a href="#run-dynamic-queries">/dynamic</a></td><td>execute dynamic mysql statements with params</td></tr><tr><td>GET :fire:</td><td><a href="#upload-single-file">/upload</a></td><td>upload single file</td></tr><tr><td>GET :fire:</td><td><a href="#upload-multiple-files">/uploads</a></td><td>upload multiple files</td></tr><tr><td>GET :fire:</td><td><a href="#download-file">/download</a></td><td>download a file</td></tr><tr><td>GET</td><td>/api/tableName/describe</td><td>describe each table for its columns</td></tr><tr><td>GET</td><td>/api/tables</td><td>get all tables in database</td></tr></tbody></table><h1 id="3-更多资料"><a href="#3-更多资料" class="headerlink" title="3 更多资料"></a>3 更多资料</h1><ul><li>项目地址：<a href="https://github.com/o1lab/xmysql" target="_blank" rel="noopener">https://github.com/o1lab/xmysql</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;github向我推荐这个&lt;a href=&quot;https://github.com/o1lab/xmysql&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;xmysql&lt;/a&gt;时候，我瞟了一眼它的简介&lt;code&gt;One command
      
    
    </summary>
    
    
      <category term="mysql" scheme="https://wdd.js.org/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>如何在vscode中用standard style 风格去验证 vue文件</title>
    <link href="https://wdd.js.org/vscode-lint-vue-file-by-standard-style.html"/>
    <id>https://wdd.js.org/vscode-lint-vue-file-by-standard-style.html</id>
    <published>2018-02-11T06:48:14.000Z</published>
    <updated>2018-02-11T06:49:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-JavaScript-Standard-Style简介"><a href="#1-JavaScript-Standard-Style简介" class="headerlink" title="1 JavaScript Standard Style简介"></a>1 JavaScript Standard Style简介</h1><p>本工具通过以下三种方式为你（及你的团队）节省大量时间：</p><ul><li>无须配置。 史上最便捷的统一代码风格的方式，轻松拥有。</li><li>自动代码格式化。 只需运行 standard –fix 从此和脏乱差的代码说再见。</li><li>提前发现风格及程序问题。 减少代码审查过程中反反复复的修改过程，节约时间。</li><li>无须犹豫。再也不用维护 .eslintrc, .jshintrc, or .jscsrc 。开箱即用。</li></ul><p>安装：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="selector-tag">i</span> standard -g</span><br></pre></td></tr></table></figure></p><p>关于<a href="https://standardjs.com/readme-zhcn.html" target="_blank" rel="noopener">JavaScript 代码规范</a>, 你可以点击链接看一下。</p><h1 id="2-如何在vscode中用JavaScript-Standard-Style风格去验证-vue文件"><a href="#2-如何在vscode中用JavaScript-Standard-Style风格去验证-vue文件" class="headerlink" title="2 如何在vscode中用JavaScript Standard Style风格去验证 vue文件"></a>2 如何在vscode中用JavaScript Standard Style风格去验证 vue文件</h1><p>实际上<a href="https://marketplace.visualstudio.com/items?itemName=chenxsan.vscode-standardjs" target="_blank" rel="noopener">JavaScript Standard Style</a>有一个FAQ, 说明了如何使用。</p><p>但是有一点非常重要的作者没有提到，就是<code>eslint-plugin-html这个插件必须要安装3.x.x版本的</code>, 现在<code>eslint-plugin-html</code>, 已经升级到4.x版本，默认不写版本号安装的就是4.x版本的，所以会出现问题。<a href="https://github.com/BenoitZugmeyer/eslint-plugin-html/issues/60" target="_blank" rel="noopener">参考</a></p><blockquote><p>ESLint v4 is only supported by eslint-plugin-html v3, so you can’t use eslint-plugin-html v1.5.2 with it (I should add a warning about this when trying to use the plugin with an incompatible version on ESLint).</p><p>If you do not use ESLint v4, please provide more information (package.json, a gist to reproduce, …)</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// FAQ</span><br><span class="line">How to lint script tag in vue or html files?</span><br><span class="line"></span><br><span class="line">You can lint them with eslint-plugin-html, just <span class="keyword">install</span> it <span class="keyword">first</span>, <span class="keyword">then</span> <span class="keyword">enable</span> linting <span class="keyword">for</span> those <span class="keyword">file</span> types <span class="keyword">in</span> settings.json <span class="keyword">with</span>:</span><br><span class="line"></span><br><span class="line"> <span class="string">"standard.validate"</span>: [</span><br><span class="line">     <span class="string">"javascript"</span>,</span><br><span class="line">     <span class="string">"javascriptreact"</span>,</span><br><span class="line">     <span class="string">"html"</span></span><br><span class="line"> ],</span><br><span class="line"> <span class="string">"standard.options"</span>: &#123;</span><br><span class="line">     <span class="string">"plugins"</span>: [<span class="string">"html"</span>]</span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="string">"files.associations"</span>: &#123;</span><br><span class="line">     <span class="string">"*.vue"</span>: <span class="string">"html"</span></span><br><span class="line"> &#125;,</span><br><span class="line"><span class="keyword">If</span> you want <span class="keyword">to</span> <span class="keyword">enable</span> autoFix <span class="keyword">for</span> the <span class="keyword">new</span> languages, you should <span class="keyword">enable</span> it yourself:</span><br><span class="line"></span><br><span class="line"> <span class="string">"standard.validate"</span>: [</span><br><span class="line">     <span class="string">"javascript"</span>,</span><br><span class="line">     <span class="string">"javascriptreact"</span>,</span><br><span class="line">     &#123; <span class="string">"language"</span>: <span class="string">"html"</span>, <span class="string">"autoFix"</span>: <span class="literal">true</span> &#125;</span><br><span class="line"> ],</span><br><span class="line"> <span class="string">"standard.options"</span>: &#123;</span><br><span class="line">     <span class="string">"plugins"</span>: [<span class="string">"html"</span>]</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h1 id="3-综上，-整理一下安装思路"><a href="#3-综上，-整理一下安装思路" class="headerlink" title="3 综上， 整理一下安装思路"></a>3 综上， 整理一下安装思路</h1><h2 id="3-1-需要安装哪些包？"><a href="#3-1-需要安装哪些包？" class="headerlink" title="3.1 需要安装哪些包？"></a>3.1 需要安装哪些包？</h2><ul><li><code>npm i -g standard</code></li><li><code>npm i -g eslint-plugin-html@3.2.2</code> 必须是3x版本</li><li><code>npm i -g eslint</code><br>以上三个包都是全局安装的，如果你想看看全局安装了哪些包可以用<code>npm list -g --depth=0</code>查看</li></ul><h2 id="3-2-vscode-config-如何写？"><a href="#3-2-vscode-config-如何写？" class="headerlink" title="3.2 vscode config 如何写？"></a>3.2 vscode config 如何写？</h2><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"standard.validate"</span>: [</span><br><span class="line">  <span class="string">"javascript"</span>,</span><br><span class="line">  <span class="string">"javascriptreact"</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"language"</span>: <span class="string">"html"</span>,</span><br><span class="line">    <span class="string">"autoFix"</span>: true</span><br><span class="line">  &#125;</span><br><span class="line">],</span><br><span class="line"><span class="string">"standard.options"</span>: &#123;</span><br><span class="line">  <span class="string">"plugin"</span>: [<span class="string">"html"</span>]</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"files.associations"</span>: &#123;</span><br><span class="line">  <span class="string">"*.vue"</span>: <span class="string">"html"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="3-3-如何在保存文件时，自动使用standard格式化vue文件"><a href="#3-3-如何在保存文件时，自动使用standard格式化vue文件" class="headerlink" title="3.3 如何在保存文件时，自动使用standard格式化vue文件"></a>3.3 如何在保存文件时，自动使用standard格式化vue文件</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"standard.autoFixOnSave"</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="4-如果还不行怎么办？"><a href="#4-如果还不行怎么办？" class="headerlink" title="4. 如果还不行怎么办？"></a>4. 如果还不行怎么办？</h2><ol><li>重启一下vscode</li><li>重启一下电脑</li><li>在此文后追加评论</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-JavaScript-Standard-Style简介&quot;&gt;&lt;a href=&quot;#1-JavaScript-Standard-Style简介&quot; class=&quot;headerlink&quot; title=&quot;1 JavaScript Standard Style简介&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="vscode" scheme="https://wdd.js.org/tags/vscode/"/>
    
      <category term="vue" scheme="https://wdd.js.org/tags/vue/"/>
    
      <category term="standard style" scheme="https://wdd.js.org/tags/standard-style/"/>
    
  </entry>
  
  <entry>
    <title>基于 WebRTC 构建 Web SIP Phone</title>
    <link href="https://wdd.js.org/webrtc-web-sip-phone.html"/>
    <id>https://wdd.js.org/webrtc-web-sip-phone.html</id>
    <published>2018-02-11T06:44:58.000Z</published>
    <updated>2018-02-11T06:46:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-阅前须知"><a href="#0-阅前须知" class="headerlink" title="0 阅前须知"></a>0 阅前须知</h1><ul><li>本文并不是教程，只是实现方案</li><li>我只是从WEB端考虑这个问题，实际还需要后端sip服务器的配合</li><li>jsSIP有个非常不错的在线demo, 可以去哪里玩耍，很好玩呢 <a href="https://tryit.jssip.net/" target="_blank" rel="noopener">try jssip </a></li></ul><p><img src="http://p3alsaatj.bkt.clouddn.com/20180211144554_nUwjgc_Screenshot.jpeg" alt=""></p><h1 id="1-技术简介"><a href="#1-技术简介" class="headerlink" title="1. 技术简介"></a>1. 技术简介</h1><blockquote><ul><li><p><code>WebRTC</code>: WebRTC，名称源自<code>网页即时通信</code>（英语：Web Real-Time Communication）的缩写，是一个支持网页浏览器进行实时语音对话或视频对话的API。它于2011年6月1日开源并在Google、Mozilla、Opera支持下被纳入万维网联盟的W3C推荐标准</p></li><li><p><code>SIP</code>: <code>会话发起协议</code>（Session Initiation Protocol，缩写SIP）是一个由IETF MMUSIC工作组开发的协议，作为标准被提议用于创建，修改和终止包括视频，语音，即时通信，在线游戏和虚拟现实等多种多媒体元素在内的交互式用户会话。2000年11月，SIP被正式批准成为3GPP信号协议之一，并成为IMS体系结构的一个永久单元。SIP与H.323一样，是用于VoIP最主要的信令协议之一。</p></li></ul></blockquote><p><img src="http://p3alsaatj.bkt.clouddn.com/20180211144604_Zdxh2x_Screenshot.jpeg" alt=""></p><p>一般来说，要么使用实体话机，要么在系统上安装基于sip的客户端程序。实体话机硬件成本高，基于sip的客户端往往兼容性差，无法跨平台，易被杀毒软件查杀。</p><p>而<code>WebRTC</code>或许是更好的解决方案，只要一个浏览器就可以实时语音视频通话，这是很不错的解决方案。WebSocket可以用来传递sip信令，而WebRTC用来实时传输语音视频流。</p><h1 id="2-前端WebRTC实现方案"><a href="#2-前端WebRTC实现方案" class="headerlink" title="2. 前端WebRTC实现方案"></a>2. 前端WebRTC实现方案</h1><p>其实我们不需要去自己处理WebRTC的相关方法，或者去处理视频或者媒体流。市面上已经有不错的模块可供选择。</p><h2 id="2-1-jsSIP"><a href="#2-1-jsSIP" class="headerlink" title="2.1 jsSIP"></a>2.1 <a href="http://jssip.net/" target="_blank" rel="noopener">jsSIP</a></h2><p><code>jsSIP是JavaScript SIP 库</code></p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180211144616_7c5Pf0_Screenshot.jpeg" alt=""></p><p>功能特点如下：</p><ul><li>可以在浏览器或者Nodejs中运行</li><li>使用WebSocket传递SIP协议</li><li>视频音频实时消息使用WebRTC</li><li>非常轻量</li><li>100%纯JavaScript</li><li>使用简单并且具有强大的Api</li><li>服务端支持 OverSIP, Kamailio, Asterisk, OfficeSIP，reSIProcate，Frafos ABC SBC，TekSIP</li><li>是RFC 7118 and OverSIP的作者写的</li></ul><p>下面是使用JsSIP打电话的例子，非常简单吧<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create our JsSIP instance and run it:</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> socket = <span class="keyword">new</span> JsSIP.WebSocketInterface(<span class="string">'wss://sip.myhost.com'</span>);</span><br><span class="line"><span class="keyword">var</span> configuration = &#123;</span><br><span class="line">  sockets  : [ socket ],</span><br><span class="line">  uri      : <span class="string">'sip:alice@example.com'</span>,</span><br><span class="line">  password : <span class="string">'superpassword'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ua = <span class="keyword">new</span> JsSIP.UA(configuration);</span><br><span class="line"></span><br><span class="line">ua.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Register callbacks to desired call events</span></span><br><span class="line"><span class="keyword">var</span> eventHandlers = &#123;</span><br><span class="line">  <span class="string">'progress'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'call is in progress'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'failed'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'call failed with cause: '</span>+ e.data.cause);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'ended'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'call ended with cause: '</span>+ e.data.cause);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'confirmed'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'call confirmed'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">  <span class="string">'eventHandlers'</span>    : eventHandlers,</span><br><span class="line">  <span class="string">'mediaConstraints'</span> : &#123; <span class="string">'audio'</span>: <span class="literal">true</span>, <span class="string">'video'</span>: <span class="literal">true</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> session = ua.call(<span class="string">'sip:bob@example.com'</span>, options);</span><br></pre></td></tr></table></figure></p><h2 id="2-2-SIP-js"><a href="#2-2-SIP-js" class="headerlink" title="2.2 SIP.js"></a>2.2 <a href="https://sipjs.com/" target="_blank" rel="noopener">SIP.js</a></h2><p>sip.js项目实际是fork自jsSIP的，这里主要介绍它的服务端支持情况。其他接口自己自行查阅</p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180211144630_24V1u8_Screenshot.jpeg" alt=""></p><ul><li>FreeSWITCH</li><li>Asterisk</li><li>OnSIP</li><li>FreeSWITCH Legacy</li></ul><h1 id="3-平台考量"><a href="#3-平台考量" class="headerlink" title="3. 平台考量"></a>3. 平台考量</h1><p><img src="http://p3alsaatj.bkt.clouddn.com/20180211144642_my1Cbb_Screenshot.jpeg" alt=""></p><p>由于WebRTC对浏览器有较高的要求，你可以看看下图，哪些浏览器支持WebRTC, 所有IE浏览器都不行，chrome系支持情况不错。</p><h2 id="3-1-考量标准"><a href="#3-1-考量标准" class="headerlink" title="3.1 考量标准"></a>3.1 考量标准</h2><ul><li>跨平台</li><li>兼容性</li><li>体积</li><li>集成性</li><li>硬件要求</li><li>开发成本</li></ul><h2 id="3-2-考量表格"><a href="#3-2-考量表格" class="headerlink" title="3.2 考量表格"></a>3.2 考量表格</h2><table><thead><tr><th>种类</th><th>适用平台</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>基于electron开发的桌面客户端</td><td>window, mac, linux</td><td>跨平台，兼容好</td><td>要下载安装，体积大（压缩后至少48MB），对电脑性能有要求</td></tr><tr><td>开发js sdk</td><td>现代浏览器</td><td>体积小，容易第三方集成</td><td>兼容差(因为涉及到webRTC, IE11以及以都不行，对宿主环境要求高)，客户集成需要开发量</td></tr><tr><td>开发谷歌浏览器扩展</td><td>谷歌浏览器</td><td>体积小</td><td>兼容差（仅限类chrome浏览器）</td></tr></tbody></table><h1 id="4-参考文档-and-延伸阅读-and-动手实践"><a href="#4-参考文档-and-延伸阅读-and-动手实践" class="headerlink" title="4 参考文档 and 延伸阅读 and 动手实践"></a>4 参考文档 and 延伸阅读 and 动手实践</h1><ul><li><a href="http://jssip.net/documentation/3.1.x/getting_started/" target="_blank" rel="noopener">Js SIP Getting Started</a></li><li><a href="https://segmentfault.com/a/1190000011848805" target="_blank" rel="noopener">120行代码实现 浏览器WebRTC视频聊天</a></li><li><a href="https://en.wikipedia.org/wiki/List_of_SIP_response_codes#4xx%E2%80%94Client_Failure_Responses" target="_blank" rel="noopener">SIP协议状态码：</a></li></ul><h1 id="5-常见问题"><a href="#5-常见问题" class="headerlink" title="5 常见问题"></a>5 常见问题</h1><h2 id="422-“Session-Interval-Too-Small”"><a href="#422-“Session-Interval-Too-Small”" class="headerlink" title="422: “Session Interval Too Small”"></a>422: “Session Interval Too Small”</h2><p>jsSIP默认携带<code>Session-Expires: 90</code>的头部信息，如果这个超时字段小于服务端的设定值，那么就会得到如下422的响应。参见<a href="https://en.wikipedia.org/wiki/List_of_SIP_response_codes#4xx%E2%80%94Client_Failure_Responses" target="_blank" rel="noopener">SIP协议状态码：</a>, 可以在call请求中设置<code>sessionTimersExpires</code>, 使其超过服务端的设定值即可<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">call(targer, options</span><br><span class="line">)</span><br><span class="line">option.sessionTimersExpires</span><br><span class="line">Number (<span class="keyword">in</span> seconds) <span class="keyword">for</span> the<span class="built_in"> default </span>Session Timers interval (default value is 90, <span class="keyword">do</span> <span class="keyword">not</span> <span class="builtin-name">set</span> a lower value).</span><br></pre></td></tr></table></figure></p><h1 id="6-最后，你我共勉"><a href="#6-最后，你我共勉" class="headerlink" title="6 最后，你我共勉"></a>6 最后，你我共勉</h1><p><img src="https://i.imgur.com/ZKAN9K7.gif" alt="clipboard.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0-阅前须知&quot;&gt;&lt;a href=&quot;#0-阅前须知&quot; class=&quot;headerlink&quot; title=&quot;0 阅前须知&quot;&gt;&lt;/a&gt;0 阅前须知&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;本文并不是教程，只是实现方案&lt;/li&gt;
&lt;li&gt;我只是从WEB端考虑这个问题，实际还需要后端si
      
    
    </summary>
    
    
      <category term="webrtc" scheme="https://wdd.js.org/tags/webrtc/"/>
    
      <category term="sip" scheme="https://wdd.js.org/tags/sip/"/>
    
  </entry>
  
  <entry>
    <title>追本溯源 substr与substring历史漫话</title>
    <link href="https://wdd.js.org/substr-substrig-history.html"/>
    <id>https://wdd.js.org/substr-substrig-history.html</id>
    <published>2018-02-11T06:42:16.000Z</published>
    <updated>2018-02-11T06:45:30.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>引子： 很多时候，当我要字符串截取时，我会想到substr和substring的方法，但是具体要怎么传参数时，我总是记不住。哪个应该传个字符串长度，哪个又应该传个开始和结尾的下标，如果我不去查查这两个函数，我始终不敢去使用它们。所以我总是觉得，这个两个方法名起的真是蹩脚。然而事实是这样的吗？</p></blockquote><p><code>看来是时候扒一扒这两个方法的历史了。</code></p><h1 id="1-基因追本溯源"><a href="#1-基因追本溯源" class="headerlink" title="1 基因追本溯源"></a>1 基因追本溯源</h1><p><img src="http://p3alsaatj.bkt.clouddn.com/20180211144257_1GqbRg_Screenshot.jpeg" alt=""></p><p>在编程语言的历史长河中，曾经出现过很多编程语言。然而大浪淘沙，铅华洗尽之后，很多早已折戟沉沙，有些却依旧光彩夺目。那么stubstr与substring的DNA究竟来自何处？</p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180211144314_cxhcdA_Screenshot.jpeg" alt=""></p><blockquote><p>1950与1960年代</p></blockquote><ul><li>1954 - FORTRAN</li><li>1958 - LISP</li><li>1959 - COBOL</li><li>1964 - BASIC</li><li>1970 - Pascal</li></ul><blockquote><p>1967-1978：确立了基础范式</p></blockquote><ul><li>1972 - <code>C语言</code></li><li>1975 - Scheme</li><li>1978 - SQL (起先只是一种查询语言，扩充之后也具备了程序结构)</li></ul><blockquote><p>1980年代：增强、模块、性能</p></blockquote><ul><li>1983 - <code>C++ (就像有类别的C)</code></li><li>1988 - Tcl</li></ul><blockquote><p>1990年代：互联网时代</p></blockquote><ul><li>1991 - <code>Python</code></li><li>1991 - Visual Basic</li><li>1993 - <code>Ruby</code></li><li>1995 - <code>Java</code></li><li>1995 - Delphi (Object Pascal)</li><li>1995 - <code>JavaScript</code></li><li>1995 - <code>PHP</code></li><li>2009 - <code>Go</code></li><li>2014 - <code>Swift (编程语言)</code></li></ul><h2 id="1-1-在C-中首次出现substr"><a href="#1-1-在C-中首次出现substr" class="headerlink" title="1.1 在C++中首次出现substr()"></a>1.1 在C++中首次出现substr()</h2><p><img src="http://p3alsaatj.bkt.clouddn.com/20180211144327_EtfLjV_Screenshot.jpeg" alt=""></p><p>在c语言中，并没有出现substr或者substring方法。然而在1983，substr()方法已经出现在C++语言中了。然而这时候还没有出现substring, 所以可以见得：<code>substr是stustring的老大哥</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">substr</span> <span class="params">(<span class="keyword">size_t</span> pos = <span class="number">0</span>, <span class="keyword">size_t</span> len = npos)</span> <span class="keyword">const</span></span>;</span><br></pre></td></tr></table></figure><p>从C++的方法定义中可以看到, <code>substr的参数是开始下标，以及字符串长度。</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> str=<span class="string">"We think in generalities, but we live in details."</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> str2 = str.substr (<span class="number">3</span>,<span class="number">5</span>);     <span class="comment">// "think"</span></span><br></pre></td></tr></table></figure><h2 id="1-2-在Java中首次出现substring"><a href="#1-2-在Java中首次出现substring" class="headerlink" title="1.2 在Java中首次出现substring()"></a>1.2 在Java中首次出现substring()</h2><p><img src="http://p3alsaatj.bkt.clouddn.com/20180211144338_id4nE2_Screenshot.jpeg" alt=""></p><p>距离substr()方法出现已经有了将近十年之隔，此间涌现一批后起之秀，如: Python, Ruby, VB之类，然而他们之中并没有stustring的基因，在Java的String类中，我们看到两个方法。从这两个方法之中我们可以看到：substring方法基本原型的参数是开始和结束的下标。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String</span> substring(<span class="keyword">int</span> beginIndex) <span class="comment">// 返回一个新的字符串，它是此字符串的一个子字符串。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">String</span> substring(<span class="keyword">int</span> beginIndex, <span class="keyword">int</span> endIndex)</span><br><span class="line"><span class="comment">// 返回一个新字符串，它是此字符串的一个子字符串。</span></span><br></pre></td></tr></table></figure><h1 id="1-3-JavaScript的历史继承"><a href="#1-3-JavaScript的历史继承" class="headerlink" title="1.3 JavaScript的历史继承"></a>1.3 JavaScript的历史继承</h1><p><img src="http://www.jstips.co/assets/images/jstips-animation.gif" alt=""></p><blockquote><p>1995年，网景公司招募了Brendan Eich，目的是将Scheme编程语言嵌入到Netscape Navigator中。在开始之前，Netscape Communications与Sun Microsystems公司合作，在Netscape Navigator中引入了更多的静态编程语言Java，以便与微软竞争用户采用Web技术和平台。网景公司决定，他们想创建的脚本语言将补充Java，并且应该有一个类似的语法，排除采用Perl，Python，TCL或Scheme等其他语言。为了捍卫对竞争性提案的JavaScript的想法，公司需要一个原型。 1995年5月，Eich在10天内写完。</p></blockquote><p>上帝用七天时间创造万物, Brendan Eich用10天时间创造了一门语言。或许用创造并不合适，因为JavaScript是站在了Perl，Python，TCL或Scheme等其他巨人的肩膀上而产生的。</p><p>JavaScript并不像C那样出身名门，在贝尔实验室精心打造，但是JavaScript在往后的<code>自然选择</code>中，并没有因此萧条，反而借助于C,C++, Java, Perl，Python，TCL, Scheme优秀基因，进化出更加强大强大的生命力。</p><p>因此可以想象，在10天之内，当Brendan Eich写到String的substr和substring方法时，或许他并没困惑着两个方法的参数应该如何设置，<code>因为在C++和Java的实现中，已经有了类似的定义。</code> 如果你了解历史，你就不会困惑现在。</p><h1 id="2-所以，substr和substring究竟有什么不同？"><a href="#2-所以，substr和substring究竟有什么不同？" class="headerlink" title="2 所以，substr和substring究竟有什么不同？"></a>2 所以，substr和substring究竟有什么不同？</h1><p>如下图所示：substr和substring都接受两个参数，他们的第一个参数的含义是相同的，<code>不同的是第二个参数。substr的第二个参数是到达结束点的距离，substring是结束的位置。</code></p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180211144352_POhgos_Screenshot.jpeg" alt=""></p><h1 id="3-参考文献"><a href="#3-参考文献" class="headerlink" title="3 参考文献"></a>3 参考文献</h1><ul><li><a href="https://zh.wikipedia.org/wiki/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80%E6%AD%B7%E5%8F%B2" target="_blank" rel="noopener">维基百科：程式語言歷史</a></li><li><a href="http://www.cplusplus.com/reference/string/string/substr/" target="_blank" rel="noopener">C++ std::string::substr</a></li><li><a href="https://en.wikipedia.org/wiki/JavaScript" target="_blank" rel="noopener">JavaScript</a></li></ul><p>如有不正确的地方，欢迎指正。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;引子： 很多时候，当我要字符串截取时，我会想到substr和substring的方法，但是具体要怎么传参数时，我总是记不住。哪个应该传个字符串长度，哪个又应该传个开始和结尾的下标，如果我不去查查这两个函数，我始终不敢去使用它们。所以我总是觉得，这个
      
    
    </summary>
    
    
      <category term="substr" scheme="https://wdd.js.org/tags/substr/"/>
    
      <category term="substring" scheme="https://wdd.js.org/tags/substring/"/>
    
  </entry>
  
  <entry>
    <title>回首2017 你其实是一个收集贝壳的孩子</title>
    <link href="https://wdd.js.org/2017-my-star-collection.html"/>
    <id>https://wdd.js.org/2017-my-star-collection.html</id>
    <published>2018-02-11T06:37:33.000Z</published>
    <updated>2018-02-11T06:41:19.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p3alsaatj.bkt.clouddn.com/20180211143825_5WhtUR_Screenshot.jpeg" alt=""></p><blockquote><p>我不知道世上的人对我怎样评价。我却这样认为：我好像是在海上玩耍，时而发现了一个光滑的石子儿，时而发现一个美丽的贝壳而为之高兴的孩子。尽管如此，那真理的海洋还神秘地展现在我们面前。—— 牛顿</p></blockquote><p><code>github</code>也像是一片海海，2017年，我大约从这篇海中捡了200多个彩色的贝壳。在年底之前，挑一些精致美丽的贝壳，分享出来。</p><a id="more"></a><h1 id="1-docsify：想让你的文档拥有Vue官方文档一样的颜值吗？"><a href="#1-docsify：想让你的文档拥有Vue官方文档一样的颜值吗？" class="headerlink" title="1. docsify：想让你的文档拥有Vue官方文档一样的颜值吗？"></a>1. <a href="https://github.com/QingWei-Li/docsify" target="_blank" rel="noopener">docsify：想让你的文档拥有Vue官方文档一样的颜值吗？</a></h1><p><code>我喜欢Vue的原因是Vue官方文档颜值很高 by me</code>, 那么你想来一份吗？</p><ul><li><code>高颜值</code></li><li><code>非常简单</code></li><li>无需构建，写完文档直接发布</li><li>容易使用并且轻量 (~18kB gzipped)</li><li>智能的全文搜索</li><li>提供多套主题</li><li>丰富的 API</li><li>支持 Emoji</li><li>兼容 IE10+</li><li>支持 SSR (example)</li></ul><p><img src="http://p3alsaatj.bkt.clouddn.com/20180211144002_TNZrwa_Screenshot.jpeg" alt=""></p><h1 id="2-JavaScript-Standard-Style：一千个开发者只有一个风格"><a href="#2-JavaScript-Standard-Style：一千个开发者只有一个风格" class="headerlink" title="2. JavaScript Standard Style：一千个开发者只有一个风格"></a>2. <a href="https://github.com/standard/standard" target="_blank" rel="noopener">JavaScript Standard Style：一千个开发者只有一个风格</a></h1><p><code>还在为要不要分号争吵吗？ 还在为两个空格和四个空格犹豫吗？ 还在为各种格式检查的配置文件苦恼吗？</code></p><p><code>其实，你需要的只是JavaScript Standard Style罢了，无数大牛公司在用，你还在犹豫什么？</code></p><p><code>好多编辑器支持JavaScript Standard Style，安装过后，ctrl + s一下，哪怕shi一样的代码，也会瞬间华丽变身成维多利亚的秘密。</code></p><p><code>帅的人已经用了，不帅的还在犹豫</code></p><ul><li><code>无须配置</code>。 史上最便捷的统一代码风格的方式，轻松拥有。</li><li><code>自动代码格式化</code>。 只需运行 standard –fix - 从此和脏乱差的代码说再见。</li><li>提前发现风格及程序问题。 - 减少代码审查过程中反反复复的修改过程，节约时间。</li><li>使用两个空格 – 进行缩进</li><li>无分号 – 这没什么不好。不骗你！</li><li>查看更多 – <a href="https://github.com/standard/standard/blob/master/docs/RULES-zhcn.md#javascript-standard-style" target="_blank" rel="noopener">为何不试试 standard 规范呢！</a></li></ul><p><img src="http://p3alsaatj.bkt.clouddn.com/20180211144016_ciMMeG_Screenshot.jpeg" alt=""></p><h1 id="3-mitt-纳米级别的事件订阅系统"><a href="#3-mitt-纳米级别的事件订阅系统" class="headerlink" title="3. mitt: 纳米级别的事件订阅系统"></a>3. <a href="https://github.com/developit/mitt" target="_blank" rel="noopener">mitt: 纳米级别的事件订阅系统</a></h1><p>如果你看了mitt的源码，你应该会惊呼：<code>WTF，人家接近50行代码也能获得2000多颗星！！！！</code></p><ul><li>纳米级别: 小于200B</li><li>相当有用: 用”*”可以去订阅所有事件</li><li>非常熟悉: 类似于Node’s EventEmitter</li><li>函数式: 方法不依赖<code>this</code></li></ul><p><img src="http://p3alsaatj.bkt.clouddn.com/20180211144027_hANzrm_Screenshot.jpeg" alt=""></p><h1 id="4-faker-js-最优雅的假数据生成器"><a href="#4-faker-js-最优雅的假数据生成器" class="headerlink" title="4. faker.js: 最优雅的假数据生成器"></a>4. <a href="https://github.com/Marak/faker.js" target="_blank" rel="noopener">faker.js: 最优雅的假数据生成器</a></h1><ul><li>Supports all Faker API Methods</li><li>Full-Featured Microservice</li><li>Hosted by hook.io</li></ul><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> randomName = faker.<span class="keyword">name</span>.findName(); <span class="comment">// Caitlyn Kerluke</span></span><br><span class="line"><span class="keyword">var</span> randomEmail = faker.internet.email(); <span class="comment">// Rusty@arne.info</span></span><br><span class="line"><span class="keyword">var</span> randomCard = faker.helpers.createCard(); <span class="comment">// random contact card containing many properties</span></span><br></pre></td></tr></table></figure><p><img src="http://p3alsaatj.bkt.clouddn.com/20180211144039_JErY9F_Screenshot.jpeg" alt=""></p><h1 id="5-superstruct-精准详细的runtime-数据验证工具"><a href="#5-superstruct-精准详细的runtime-数据验证工具" class="headerlink" title="5. superstruct: 精准详细的runtime 数据验证工具"></a>5. <a href="https://github.com/ianstormtaylor/superstruct" target="_blank" rel="noopener">superstruct: 精准详细的runtime 数据验证工具</a></h1><ul><li><code>给出的错误提示很详细，非常容易定位bug</code></li><li><code>帮你做好那些数据验证的脏活累活</code></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; superstruct, struct &#125; = <span class="built_in">window</span>.Superstruct</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> User = struct(&#123;</span><br><span class="line">  id: <span class="string">'number'</span>,</span><br><span class="line">  name: <span class="string">'string'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">  id: <span class="string">'invalid'</span>,</span><br><span class="line">  name: <span class="string">'Jane Smith'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> user = User(data)</span><br><span class="line">  log(<span class="string">'valid'</span>, user)</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; message, path, data, <span class="keyword">type</span>, value &#125; = e</span><br><span class="line">  log(<span class="string">'invalid'</span>, &#123; message, path, data, <span class="keyword">type</span>, value &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"><span class="keyword">type</span>, data</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.body.className = <span class="keyword">type</span></span><br><span class="line">  <span class="built_in">document</span>.body.textContent = <span class="built_in">JSON</span>.stringify(data, <span class="literal">null</span>, <span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>可以看一下她输出的错误信息</code><br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"message"</span>: <span class="string">"Expected a value of type `number` for `id` but received `\"invalid\"`."</span>,</span><br><span class="line">  <span class="attr">"path"</span>: [</span><br><span class="line">    <span class="string">"id"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"data"</span>: &#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="string">"invalid"</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Jane Smith"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"number"</span>,</span><br><span class="line">  <span class="attr">"value"</span>: <span class="string">"invalid"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="6-uppy-下一代开源文件上传插件"><a href="#6-uppy-下一代开源文件上传插件" class="headerlink" title="6. uppy: 下一代开源文件上传插件"></a>6. <a href="https://github.com/transloadit/uppy" target="_blank" rel="noopener">uppy: 下一代开源文件上传插件</a></h1><p><code>Uppy是一款时尚，模块化的文件上传器，可以与任何应用程序无缝集成。这是快速，易于使用，让您担心比建立一个文件上传更重要的问题。</code></p><ul><li>从本地磁盘，Google云端硬盘，Dropbox，Instagram获取文件，或使用相机捕捉和记录自拍;</li><li>用一个漂亮的界面预览和编辑元数据;</li><li>上传到最终目的地，可选择进行处理/编码</li></ul><p><img src="https://raw.githubusercontent.com/transloadit/uppy/master/uppy-screenshot.jpg" alt=""></p><h1 id="7-Inquirer-js-在命令行里做问卷调查"><a href="#7-Inquirer-js-在命令行里做问卷调查" class="headerlink" title="7. Inquirer.js: 在命令行里做问卷调查"></a>7. <a href="https://github.com/SBoudrias/Inquirer.js" target="_blank" rel="noopener">Inquirer.js: 在命令行里做问卷调查</a></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"><span class="keyword">var</span> inquirer = <span class="built_in">require</span>(<span class="string">'inquirer'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> questions = [</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">'input'</span>,</span><br><span class="line">    name: <span class="string">'name'</span>,</span><br><span class="line">    message: <span class="string">'请输入你的名字'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">'input'</span>,</span><br><span class="line">    name: <span class="string">'age'</span>,</span><br><span class="line">    message: <span class="string">'请输入你的年龄'</span>,</span><br><span class="line">    <span class="keyword">default</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'10'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">'list'</span>,</span><br><span class="line">    name: <span class="string">'sex'</span>,</span><br><span class="line">    message: <span class="string">'请选择你的性别'</span>,</span><br><span class="line">    choices: [<span class="string">'男'</span>, <span class="string">'女'</span>]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">inquirer.prompt(questions).then(<span class="function"><span class="params">answers</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(answers, <span class="literal">null</span>, <span class="string">'  '</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">➜  src git:(<span class="literal">master</span>) ✗ <span class="keyword">node</span> <span class="title">query</span>.js</span><br><span class="line">? 请输入你的名字 wdd</span><br><span class="line">? 请输入你的年龄 <span class="number">23</span></span><br><span class="line">? 请选择你的性别 男</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"wdd"</span>,</span><br><span class="line">  <span class="string">"age"</span>: <span class="string">"23"</span>,</span><br><span class="line">  <span class="string">"sex"</span>: <span class="string">"男"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p3alsaatj.bkt.clouddn.com/20180211143825_5WhtUR_Screenshot.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我不知道世上的人对我怎样评价。我却这样认为：我好像是在海上玩耍，时而发现了一个光滑的石子儿，时而发现一个美丽的贝壳而为之高兴的孩子。尽管如此，那真理的海洋还神秘地展现在我们面前。—— 牛顿&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;github&lt;/code&gt;也像是一片海海，2017年，我大约从这篇海中捡了200多个彩色的贝壳。在年底之前，挑一些精致美丽的贝壳，分享出来。&lt;/p&gt;
    
    </summary>
    
    
      <category term="star" scheme="https://wdd.js.org/tags/star/"/>
    
  </entry>
  
  <entry>
    <title>you-dont-need-serial</title>
    <link href="https://wdd.js.org/you-dont-need-serial.html"/>
    <id>https://wdd.js.org/you-dont-need-serial.html</id>
    <published>2018-02-11T06:35:59.000Z</published>
    <updated>2018-02-11T06:36:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-You-Dont-Need-JavaScript"><a href="#1-You-Dont-Need-JavaScript" class="headerlink" title="1 You-Dont-Need-JavaScript"></a><a href="https://github.com/you-dont-need/You-Dont-Need-JavaScript" target="_blank" rel="noopener">1 You-Dont-Need-JavaScript</a></h1><blockquote><p><code>CSS是强大的，你可以做很多事情没有JS。</code> 本文教你使用原生CSS做下面的事情。</p></blockquote><p><code>内容目录</code></p><ul><li>手风琴/切换</li><li>圆盘传送带</li><li>检查复选框的计数器</li><li>翻转点击</li><li>Textfield上的浮动标签</li><li>字体（拉丁）</li><li>游戏</li><li>悬停/弹出信息</li><li>图片廊</li><li>菜单</li><li>移动菜单关闭画布</li><li>汉堡菜单</li><li>花式菜单</li><li>莫代尔/弹出</li><li>鼠标跟踪</li><li>视差滚动</li><li>标签</li><li>待办事项列表</li><li>提示</li><li>树视图</li><li>Twitter心动画</li><li>动态图像着色</li><li>连锁反应</li><li>响应式计数器显示不适合屏幕的项目数量</li></ul><p>可以看一下纯CSS的例子</p><p><img src="https://github.com/you-dont-need/You-Dont-Need-JavaScript/raw/master/images/accordion.gif" alt=""></p><h1 id="2-You-Dont-Need-Lodash-Underscore"><a href="#2-You-Dont-Need-Lodash-Underscore" class="headerlink" title="2 You-Dont-Need-Lodash-Underscore"></a><a href="https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore" target="_blank" rel="noopener">2 You-Dont-Need-Lodash-Underscore</a></h1><blockquote><p>Lodash和Underscore是伟大的现代JavaScript实用程序库，它们被前端开发人员广泛使用。但是，如果您将目标锁定为现代浏览器，则可能会发现，许多方法已经得到ES5和ES6的原生支持。如果你想要你的项目需要更少的依赖，并且你清楚的知道你的目标浏览器，那么你可能不需要Lodash / Underscore。</p></blockquote><p><code>来自开发者的声音</code></p><ul><li><p>在代码变臃肿之前，请使用原生JS对象和数组工具函数. —Cody Lindley, Author of jQuery Cookbook and JavaScript Enlightenment</p></li><li><p>你可能不需要lodash. 有许多好用的原生方法了. —Daniel Lamb, Computer Scientist, Technical Reviewer of Secrets of the JavaScript Ninja and Functional Programming in JavaScript</p></li><li><p>我想不是，但我想要它. —Tero Parviainen, Author of build-your-own-angular</p></li><li><p>我承认，我曾经过度使用lodash.  —@therebelrobot, Maker of web things, Facilitator for Node.js/io.js</p></li></ul><p><code>内容目录</code></p><ul><li>Array<ul><li>_.compact</li><li>_.concat</li><li>_.fill</li><li>_.find</li><li>_.findIndex</li><li>_.first</li><li>_.flatten</li><li>_.flattenDeep</li><li><em>.head and </em>.tail</li><li>_.indexOf</li><li>_.join</li><li>_.last</li><li>_.lastIndexOf</li><li>_.reverse</li><li>_.without</li><li>_.slice</li><li>_.isArray</li></ul></li><li>Collection<ul><li>_.each</li><li>_.every</li><li>_.filter</li><li>_.groupBy</li><li>_.includes</li><li>_.map</li><li><em>.minBy and </em>.maxBy</li><li>_.pluck</li><li>_.range</li><li>_.reduce</li><li>_.reduceRight</li><li>_.size</li><li>_.some</li></ul></li><li>Function<ul><li>_.after</li></ul></li><li>Lang<ul><li>_.isNaN</li></ul></li><li>Object<ul><li>_.assign</li><li>_.keys</li><li>_.toPairs</li><li>_.values</li></ul></li><li>String<ul><li>_.repeat</li><li>_.template</li><li>_.toLower</li><li>_.toUpper</li><li>_.trim</li><li>_.replace</li></ul></li></ul><h1 id="3-You-Dont-Need-jQuery"><a href="#3-You-Dont-Need-jQuery" class="headerlink" title="3 You-Dont-Need-jQuery"></a><a href="https://github.com/nefe/You-Dont-Need-jQuery" target="_blank" rel="noopener">3 You-Dont-Need-jQuery</a></h1><p><code>纯JavaScript的例子, 实现做jQuery与查询，样式，dom，ajax，事件等</code></p><p>前端发展很快，现代浏览器原生 API 已经足够好用。我们并不需要为了操作 DOM、Event 等再学习一下 jQuery 的 API。同时由于 React、Angular、Vue 等框架的流行，直接操作 DOM 不再是好的模式，jQuery 使用场景大大减少。本项目总结了大部分 jQuery API 替代的方法，暂时只支持 IE10 以上浏览器。 </p><p><code>内容目录</code></p><ul><li>Translations</li><li>Query Selector</li><li>CSS &amp; Style</li><li>DOM Manipulation</li><li>Ajax</li><li>Events</li><li>Utilities</li><li>Promises</li><li>Animation</li><li>Alternatives</li><li>Browser Support</li></ul><h1 id="You-Dont-Need-GUI"><a href="#You-Dont-Need-GUI" class="headerlink" title="You-Dont-Need-GUI"></a><a href="https://github.com/you-dont-need/You-Dont-Need-GUI" target="_blank" rel="noopener">You-Dont-Need-GUI</a></h1><p>图形用户界面对计算机用户非常友好。它们被引入以响应命令行界面（CLI）感知的陡峭学习曲线。</p><p><img src="https://github.com/you-dont-need/You-Dont-Need-GUI/raw/master/Xerox_Star_8010_workstations.jpg" alt=""></p><p>但是，他们往往需要更多的资源，功能不强，难以通过脚本自动化。</p><p><code>作为计算机专家，我们希望更高效，更好地完成工作。</code>我们知道命令字可能不容易被发现或助记符，所以我们尝试列出一些您可能试图在GUI中执行的常见任务。</p><p><code>内容目录</code></p><ul><li>复制一个文件</li><li>复制一个文件</li><li>复制一个文件夹</li><li>复制一个文件夹</li><li>移动一个文件</li><li>重命名一个文件</li><li>移动一个文件夹</li><li>重命名文件夹</li><li>合并文件夹</li><li>创建一个新的文件</li><li>新建一个文件夹</li><li>显示文件/文件夹大小</li><li>用默认程序打开一个文件</li><li>压缩一个文件夹</li><li>解压缩文件夹</li><li>删除一个文件</li><li>删除一个文件夹</li><li>列出文件夹内容</li><li>树查看文件夹及其子文件夹</li><li>找到一个陈旧的文件</li><li>显示一个日历</li><li>找到未来的日期</li><li>使用计算器</li><li>强制退出程序</li></ul><p><img src="https://leanote.com/api/file/getImage?fileId=5a45b26aab64411cab000cf5" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-You-Dont-Need-JavaScript&quot;&gt;&lt;a href=&quot;#1-You-Dont-Need-JavaScript&quot; class=&quot;headerlink&quot; title=&quot;1 You-Dont-Need-JavaScript&quot;&gt;&lt;/a&gt;&lt;a href=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>不常用却很有妙用的事件及方法</title>
    <link href="https://wdd.js.org/useful-browser-events.html"/>
    <id>https://wdd.js.org/useful-browser-events.html</id>
    <published>2018-02-11T06:34:17.000Z</published>
    <updated>2018-02-11T06:35:11.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-visibilitychange事件"><a href="#1-visibilitychange事件" class="headerlink" title="1 visibilitychange事件"></a>1 <a href="https://developer.mozilla.org/zh-CN/docs/Web/Events/visibilitychange" target="_blank" rel="noopener">visibilitychange事件</a></h1><p>触发条件：<code>浏览器标签页被隐藏或显示的时候会触发visibilitychange事件.</code></p><p>使用场景：<code>当标签页显示或者隐藏时，触发一些业务逻辑</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"visibilitychange"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log( <span class="built_in">document</span>.visibilityState );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="2-storage事件"><a href="#2-storage事件" class="headerlink" title="2 storage事件"></a>2 <a href="https://developer.mozilla.org/en-US/docs/Web/Events/storage" target="_blank" rel="noopener">storage事件</a></h1><p>触发条件：<code>使用localStorage or sessionStorage存储或者修改某个本地存储时</code></p><p>使用场景：<code>标签页间通信</code></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AB页面同源</span></span><br><span class="line"><span class="comment">// 在A 页面</span></span><br><span class="line">window.addEventListener('storage', (e) =&gt; &#123;console.<span class="built_in">log</span>(e)&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在B 页面，向120打个电话</span></span><br><span class="line">localStorage.setItem('makeCall','120')</span><br><span class="line"></span><br><span class="line"><span class="comment">// 然后可以在A页面间有输出, 可以看出A页面 收到了B页面的通知</span></span><br><span class="line">...key: <span class="string">"makeCall"</span>, oldValue: <span class="string">"119"</span>, newValue: <span class="string">"120"</span>, ...</span><br></pre></td></tr></table></figure><h1 id="3-beforeunload事件"><a href="#3-beforeunload事件" class="headerlink" title="3 beforeunload事件"></a><a href="https://developer.mozilla.org/en-US/docs/Web/Events/beforeunload" target="_blank" rel="noopener">3 beforeunload事件</a></h1><p>触发条件：<code>当页面的资源将要卸载(及刷新或者关闭标签页前). 当页面依然可见，并且该事件可以被取消只时</code></p><p>使用场景：<code>关闭或者刷新页面时弹窗确认</code>，<code>关闭页面时向后端发送报告等</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"beforeunload"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> confirmationMessage = <span class="string">"\o/"</span>;</span><br><span class="line"></span><br><span class="line">  e.returnValue = confirmationMessage;     <span class="comment">// Gecko, Trident, Chrome 34+</span></span><br><span class="line">  <span class="keyword">return</span> confirmationMessage;              <span class="comment">// Gecko, WebKit, Chrome &lt;34</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="4-navigator-sendBeacon"><a href="#4-navigator-sendBeacon" class="headerlink" title="4 navigator.sendBeacon"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Navigator/sendBeacon" target="_blank" rel="noopener">4 navigator.sendBeacon</a></h1><p>这个方法主要用于满足 统计和诊断代码 的需要，这些代码通常尝试在卸载（unload）文档之前向web服务器发送数据。过早的发送数据可能导致错过收集数据的机会。然而， 对于开发者来说保证在文档卸载期间发送数据一直是一个困难。因为用户代理通常会忽略在卸载事件处理器中产生的异步 XMLHttpRequest 。</p><p>使用 sendBeacon() 方法，将会使用户代理在有机会时异步地向服务器发送数据，同时不会延迟页面的卸载或影响下一导航的载入性能。这就解决了提交分析数据时的所有的问题：使它可靠，异步并且不会影响下一页面的加载。此外，代码实际上还要比其他技术简单！</p><p><code>注意：该方法在IE和safari没有实现</code></p><p>使用场景：<code>发送崩溃报告</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'unload'</span>, logData, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    navigator.sendBeacon(<span class="string">"/log"</span>, analyticsData);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-visibilitychange事件&quot;&gt;&lt;a href=&quot;#1-visibilitychange事件&quot; class=&quot;headerlink&quot; title=&quot;1 visibilitychange事件&quot;&gt;&lt;/a&gt;1 &lt;a href=&quot;https://develop
      
    
    </summary>
    
    
      <category term="visibilitychange" scheme="https://wdd.js.org/tags/visibilitychange/"/>
    
      <category term="sendBeacon" scheme="https://wdd.js.org/tags/sendBeacon/"/>
    
  </entry>
  
  <entry>
    <title>xfire 简单优雅、高度可配置的fetch接口批量生成工具</title>
    <link href="https://wdd.js.org/overview-of-xfire.html"/>
    <id>https://wdd.js.org/overview-of-xfire.html</id>
    <published>2018-02-11T06:31:36.000Z</published>
    <updated>2018-02-11T06:33:15.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我曾写过两篇文章：<a href="https://segmentfault.com/a/1190000008678653" target="_blank" rel="noopener">jQuery进阶：用最优雅的方式写ajax请求</a>, <a href="https://segmentfault.com/a/1190000012037455" target="_blank" rel="noopener">axios进阶：用最优雅的方式写ajax请求</a>, 原理都是在将<code>使用配置文件的方式，自动生成接口方法</code>。 在多个项目中，我曾使用这种配置的方式批量生成ajax接口，但是每次都要造轮子是很繁琐的，索性自己发布一个npm包吧，于是xfire出来了。</p><p>xfire地址：<a href="https://github.com/wangduanduan/xfire，" target="_blank" rel="noopener">https://github.com/wangduanduan/xfire，</a></p><p>觉得不错的话，可以给xfire点个赞或者开个issue，或者提个建议。谢谢。</p></blockquote><h1 id="1-xfire"><a href="#1-xfire" class="headerlink" title="1. xfire"></a>1. xfire</h1><p><a href="https://www.npmjs.org/package/xfire" target="_blank" rel="noopener"><img src="https://img.shields.io/npm/v/xfire.svg" alt="npm"></a> <a href="https://standardjs.com" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/code_style-standard-brightgreen.svg" alt="JavaScript Style Guide"></a> </p><p><code>非常简单，高度可配置的fetch接口批量生成工具。</code></p><hr><h1 id="2-特点"><a href="#2-特点" class="headerlink" title="2. 特点"></a>2. 特点</h1><ul><li>:smile: <code>非常简单: 提供配置文件,自动生成接口</code></li><li>:triangular_ruler: <code>提前验证:支持请求体格式验证</code></li><li>:bug: <code>报错详细: 给出具体的报错位置,字段信息</code></li></ul><h1 id="3-安装"><a href="#3-安装" class="headerlink" title="3. 安装"></a>3. 安装</h1><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -S xfire</span><br><span class="line"></span><br><span class="line">yarn <span class="keyword">add</span><span class="bash"> xfire</span></span><br></pre></td></tr></table></figure><h1 id="4-demo"><a href="#4-demo" class="headerlink" title="4. demo"></a>4. demo</h1><p>首先需要一个配置文件<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// api.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">export</span> <span class="selector-tag">default</span> &#123;</span><br><span class="line">  <span class="attribute">prefix</span>: <span class="string">'http://localhost:80'</span>,</span><br><span class="line">  <span class="attribute">list</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attribute">name</span>: <span class="string">'login'</span>,</span><br><span class="line">      <span class="attribute">desp</span>: <span class="string">'sercurity login'</span>,</span><br><span class="line">      <span class="attribute">path</span>: <span class="string">'/agent/login'</span>,</span><br><span class="line">      <span class="attribute">method</span>: <span class="string">'post'</span>,</span><br><span class="line">      <span class="attribute">contentType</span>: <span class="string">'formData'</span>,</span><br><span class="line">      <span class="attribute">bodyStruct</span>: &#123;</span><br><span class="line">        <span class="attribute">username</span>: <span class="string">'string'</span>,</span><br><span class="line">        <span class="attribute">password</span>: <span class="string">'string'</span>,</span><br><span class="line">        <span class="attribute">namespace</span>: <span class="string">'string'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attribute">defaultBody</span>: &#123;</span><br><span class="line">        <span class="attribute">password</span>: <span class="string">'Aa123456'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attribute">status</span>: &#123;</span><br><span class="line">        <span class="number">401</span>: <span class="string">'username or password wrong'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attribute">name</span>: <span class="string">'heartBeat'</span>,</span><br><span class="line">      <span class="attribute">path</span>: <span class="string">'/sdk/api/csta/agent/heartbeat/&#123;&#123;agentId&#125;&#125;'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attribute">name</span>: <span class="string">'setAgentState'</span>,</span><br><span class="line">      <span class="attribute">desp</span>: <span class="string">'set agent state'</span>,</span><br><span class="line">      <span class="attribute">path</span>: <span class="string">'/sdk/api/csta/agent/state/&#123;&#123;namespace&#125;&#125;'</span>,</span><br><span class="line">      <span class="attribute">method</span>: <span class="string">'post'</span>,</span><br><span class="line">      <span class="attribute">bodyStruct</span>: &#123;</span><br><span class="line">        <span class="attribute">agentId</span>: <span class="string">'string?'</span>,</span><br><span class="line">        <span class="attribute">loginId</span>: <span class="string">'string'</span>,</span><br><span class="line">        <span class="attribute">func</span>: <span class="string">'string'</span>,</span><br><span class="line">        <span class="attribute">agentMode</span>: <span class="string">'string?'</span>,</span><br><span class="line">        <span class="attribute">device</span>: <span class="string">'string?'</span>,</span><br><span class="line">        <span class="attribute">password</span>: <span class="string">'string'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后引入xfire<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xfire <span class="keyword">from</span> <span class="string">'xfire'</span></span><br><span class="line"><span class="keyword">import</span> apiConfig <span class="keyword">from</span> <span class="string">'./api.config.js'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> API = xfire.init(apiConfig)</span><br></pre></td></tr></table></figure></p><blockquote><p>POTST 发送formData类型的数据示例<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">API.login.fire(&#123;&#125;, &#123;</span><br><span class="line">  username: <span class="string">'wangduanduan'</span>,</span><br><span class="line">  password: <span class="string">'123456'</span>,</span><br><span class="line">  namespace: <span class="string">'dd.com'</span></span><br><span class="line">&#125;)</span><br><span class="line">.<span class="keyword">then</span>(<span class="function"><span class="params">(res)</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="keyword">catch</span>(<span class="function"><span class="params">(err)</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>GET 数据示例<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">API.heartBeat.fire(&#123;</span><br><span class="line">  agentId: <span class="string">'5001@dd.com'</span></span><br><span class="line">&#125;)</span><br><span class="line">.<span class="keyword">then</span>(<span class="function"><span class="params">(res)</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="keyword">catch</span>(<span class="function"><span class="params">(err)</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>POST json类型数据示例<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">API.setAgentState.fire(&#123;</span><br><span class="line">  namespace: <span class="string">'windows'</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  agentId: <span class="string">'5001@dd.com'</span>,</span><br><span class="line">  loginId: <span class="string">'5001@dd.com'</span>,</span><br><span class="line">  func: <span class="string">'login'</span>,</span><br><span class="line">  agentMode: <span class="string">'Ready'</span>,</span><br><span class="line">  device: <span class="string">'8001@dd.com'</span>,</span><br><span class="line">  password: <span class="string">'123456'</span></span><br><span class="line">&#125;)</span><br><span class="line">.<span class="keyword">then</span>(<span class="function"><span class="params">(res)</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="keyword">catch</span>(<span class="function"><span class="params">(err)</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p></blockquote><h1 id="5-xfire-API"><a href="#5-xfire-API" class="headerlink" title="5. xfire API"></a>5. xfire API</h1><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> API = xfire.init(<span class="built_in">config</span>)</span><br></pre></td></tr></table></figure><p><code>config 字段说明</code></p><p>注意:如果config无法通过下面的格式验证,则会直接报错</p><table><thead><tr><th>字段名</th><th>类型</th><th>是否必须</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>config.prefix</td><td>string</td><td>是</td><td>无</td><td>接口url公用的前缀</td></tr><tr><td>config.list</td><td>array</td><td>是</td><td>无</td><td>接口数组</td></tr></tbody></table><p><code>config list字段说明</code></p><table><thead><tr><th>字段名</th><th>类型</th><th>是否必须</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td><code>name</code></td><td>string</td><td><code>是</code></td><td>无</td><td>接口名</td></tr><tr><td>desp</td><td>string</td><td>否</td><td>无</td><td>接口描述</td></tr><tr><td><code>path</code></td><td>string</td><td><code>是</code></td><td>无</td><td>接口路径</td></tr><tr><td>method</td><td>enum string</td><td>否</td><td>get</td><td>请求方式: get, post, put, delete </td></tr><tr><td>contentType</td><td>enum string</td><td>否</td><td>json</td><td>请求体类型: json, formData。json会被渲染: application/json; charset=UTF-8, formData会被渲染成: application/x-www-form-urlencoded; charset=UTF-8</td></tr><tr><td>bodyStruct</td><td>object</td><td>否</td><td>无</td><td>请求体格式验证结构, 如果bodyStruct存在,则使用bodyStruct验证body: 具体格式参考<a href="https://github.com/ianstormtaylor/superstruct/blob/master/docs/guide.md" target="_blank" rel="noopener">superstruct</a></td></tr><tr><td>defaultBody</td><td>object</td><td>否</td><td>无</td><td>默认请求体。bodyStruct存在的情况下才有效</td></tr><tr><td>status</td><td>object</td><td>否</td><td>无</td><td>响应状态码及其含义</td></tr></tbody></table><p>当某个list对象的 name 不存在时,config验证时的报错:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Uncaught StructError: Expected a value of<span class="built_in"> type </span>`string` <span class="keyword">for</span> `name` but received `undefined`.</span><br></pre></td></tr></table></figure></p><p>当发送请求时,请求体不符合bodyStruct时, 报错如下<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">name: <span class="string">'login'</span>,</span><br><span class="line">desp: <span class="string">'sercurity login'</span>,</span><br><span class="line">path: <span class="string">'/agent/login'</span>,</span><br><span class="line">method: <span class="string">'post'</span>,</span><br><span class="line">contentType: <span class="string">'formData'</span>,</span><br><span class="line">bodyStruct: &#123;</span><br><span class="line">  username: <span class="string">'string'</span>,</span><br><span class="line">  password: <span class="string">'string'</span>,</span><br><span class="line">  namespace: <span class="string">'string'</span></span><br><span class="line">&#125;,</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">API.login.fire(&#123;&#125;, &#123;</span><br><span class="line">  <span class="comment">// username: '5001',</span></span><br><span class="line">  password: <span class="string">'Aa123456'</span>,</span><br><span class="line">  namespace: <span class="string">'zhen04.cc'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Uncaught StructError: Expected a value <span class="keyword">of</span> type `string` for `username` but received `undefined`.</span><br></pre></td></tr></table></figure></p><h1 id="6-xfire-实例-API"><a href="#6-xfire-实例-API" class="headerlink" title="6. xfire 实例 API"></a>6. xfire 实例 API</h1><p>xfire.init()方法会返回xfire实例对象,该对象上有一个特殊方法<code>$setHeaders</code>, 还有其他的由配置文件产生的方法。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> API = xfire.init(apiConfig)</span><br></pre></td></tr></table></figure><h2 id="6-1-setHeaders-设置请求头部信息"><a href="#6-1-setHeaders-设置请求头部信息" class="headerlink" title="6.1. $setHeaders(): 设置请求头部信息"></a>6.1. $setHeaders(): 设置请求头部信息</h2><p>$setHeaders()用来设置除了<code>contentType</code>以外的请求头, 一旦设置请求头部信息,所有的实例接口在发送请求时,都会带有该头部信息。<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">API.$setHeaders(&#123;sessionId: <span class="string">'jfsldkf-sdflskdjf-sflskfjlsf'</span>&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="6-2-api方法-fire-pathParm-body"><a href="#6-2-api方法-fire-pathParm-body" class="headerlink" title="6.2. api方法: fire(pathParm, body)"></a>6.2. api方法: fire(pathParm, body)</h2><p>pathParm对象上的数据最终会被渲染到<code>请求路径上</code>, body是请求体。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attribute">name</span>: <span class="string">'heartBeat'</span>,</span><br><span class="line">      desp: <span class="string">'agent heart beat'</span>,</span><br><span class="line">      path: <span class="string">'/sdk/api/csta/agent/heartbeat/&#123;&#123;agentId&#125;&#125;'</span>,</span><br><span class="line">      method: <span class="string">'post'</span></span><br><span class="line">    &#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>类似上面的对象,会产生一个以<code>heartBeat</code>为名称的方法,所有请求方法都是fire()方法。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">API<span class="selector-class">.xxx</span><span class="selector-class">.fire</span>(pathParm, body)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不需要请求体时, body可以不传</span></span><br><span class="line">API<span class="selector-class">.xxx</span><span class="selector-class">.fire</span>(pathParm)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不需要参数渲染到路径时,pathParm必须传空对象:&#123;&#125;</span></span><br><span class="line">API<span class="selector-class">.xxx</span><span class="selector-class">.fire</span>(&#123;&#125;, body)</span><br></pre></td></tr></table></figure><p>例子:<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">API.heartBeat(&#123;</span><br><span class="line">  agentId: <span class="string">'5001@ee.com'</span></span><br><span class="line">&#125;)</span><br><span class="line">.<span class="keyword">then</span>(<span class="function"><span class="params">(res)</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="keyword">catch</span>(<span class="function"><span class="params">(err)</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>关于<code>path</code>和 fire的 <code>pathParm</code>参数:<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// path 如下</span></span><br><span class="line"><span class="attribute">path</span>: <span class="string">'/store/order/&#123;&#123;type&#125;&#125;/&#123;&#123;age&#125;&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 则pathParm应该是</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attribute">type</span>: <span class="string">'dog'</span>,</span><br><span class="line">  <span class="attribute">aget</span>: <span class="number">14</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>注意</code>: pathParm不支持复杂的数据类型。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原始数据类型 string, number, boolean 都是可以的</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attribute">key1</span>: <span class="string">'string'</span>,</span><br><span class="line">  <span class="attribute">key2</span>: number,</span><br><span class="line">  <span class="attribute">key3</span>: boolean</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复杂的数据类型,如数组和嵌套对象, 函数, 将导致渲染失败</span></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attribute">key1</span>: [<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>],</span><br><span class="line">  <span class="attribute">key2</span>: &#123;</span><br><span class="line">    <span class="attribute">key3</span>: <span class="string">'string'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attribute">key4</span>: function()&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="7-warning-polyfill"><a href="#7-warning-polyfill" class="headerlink" title="7. :warning: polyfill"></a>7. :warning: polyfill</h1><p>xfire底层使用了浏览器原生的<code>Promise</code>, <code>fetch</code>, <code>Object.keys()</code>, <code>Object.assign()</code> 所以对浏览器是有要求的。<code>xfire本身不带有任何polyfill。</code></p><p>目前IE11以及以下是不支持Promise和fetch的。</p><p>在此给出两个方案:</p><h2 id="7-1-方案1-babel-polyfill"><a href="#7-1-方案1-babel-polyfill" class="headerlink" title="7.1. 方案1: babel-polyfill"></a>7.1. 方案1: babel-polyfill</h2><p>通过引入<a href="https://babeljs.io/docs/usage/polyfill/" target="_blank" rel="noopener">babel-polyfill</a>, 让浏览器支持xfire所需要的原生方法。</p><h2 id="7-2-方案2-polyfill-io"><a href="#7-2-方案2-polyfill-io" class="headerlink" title="7.2. 方案2: polyfill.io"></a>7.2. 方案2: <a href="https://polyfill.io/v2/docs/" target="_blank" rel="noopener">polyfill.io</a></h2><p><img src="https://leanote.com/api/file/getImage?fileId=5a5a136aab6441186c001591" alt=""></p><p>只需要为您的网站,为每个浏览器量身定制的polyfills。 复制代码释放魔法:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.polyfill.io/v2/polyfill.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Polyfill.io读取每个请求的User-Agent头并返回适合请求浏览器的polyfill。 根据您在应用中使用的功能量身定制响应,并查看我们的实例以快速入门。</p><h1 id="8-ajax-Vs-fetch"><a href="#8-ajax-Vs-fetch" class="headerlink" title="8. ajax Vs fetch"></a>8. ajax Vs fetch</h1><p><code>与其使用各种ajax第三方库，不如使用原始fetch</code></p><blockquote><p>总结一下，Fetch 优点主要有：</p><p>语法简洁，更加语义化<br>基于标准 Promise 实现，支持 async/await<br>同构方便，使用 isomorphic-fetch –<a href="https://github.com/camsong/blog/issues/2" target="_blank" rel="noopener">传统 Ajax 已死，Fetch 永生</a><br>未来更容易扩展 – by me</p></blockquote><p>我使用ajax经历过三个阶段：<br>1、 jQuery时期，我用jQuery的<code>ajax</code><br>2、 类似Vue的现代框架时，使用<a href="https://github.com/axios/axios" target="_blank" rel="noopener">axio</a><br>3、 再后来我就使用浏览器原生的<code>fetch</code></p><blockquote><p>Fetch API  提供了一个 JavaScript接口，用于访问和操纵HTTP管道的部分，例如请求和响应。它还提供了一个全局 fetch()方法，该方法提供了一种简单，合乎逻辑的方式来跨网络异步获取资源。– <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch" target="_blank" rel="noopener">MDN</a></p><p>这种功能以前是使用  XMLHttpRequest实现的。Fetch提供了一个更好的替代方法，可以很容易地被其他技术使用，例如 Service Workers。Fetch还提供了单个逻辑位置来定义其他HTTP相关概念，例如 CORS和HTTP的扩展。– <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch" target="_blank" rel="noopener">MDN</a></p></blockquote><p>从<a href="https://caniuse.com/#search=fetch" target="_blank" rel="noopener">caniuse</a>的数据来看，fetch方法除IE11不支持以外，大部分常用浏览器都支持了。</p><p>fetch接口示例：<br><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'/users.json'</span>)</span><br><span class="line">  .<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">(response)</span> &#123;</span></span><br><span class="line">    <span class="keyword">return</span> response.json()</span><br><span class="line">  &#125;).<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">(json)</span> &#123;</span></span><br><span class="line">    console.<span class="built_in">log</span>(<span class="string">'parsed json'</span>, json)</span><br><span class="line">  &#125;).<span class="keyword">catch</span>(<span class="function"><span class="keyword">function</span><span class="params">(ex)</span> &#123;</span></span><br><span class="line">    console.<span class="built_in">log</span>(<span class="string">'parsing failed'</span>, ex)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  fetch(<span class="string">'/users.html'</span>)</span><br><span class="line">  .<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">(response)</span> &#123;</span></span><br><span class="line">    <span class="keyword">return</span> response.text()</span><br><span class="line">  &#125;).<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span><span class="params">(body)</span> &#123;</span></span><br><span class="line">    document.body.innerHTML = body</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></p><h1 id="9-fetch相关文章"><a href="#9-fetch相关文章" class="headerlink" title="9. fetch相关文章"></a>9. fetch相关文章</h1><ul><li><a href="https://github.com/camsong/blog/issues/2" target="_blank" rel="noopener">传统 Ajax 已死，Fetch 永生</a></li><li><a href="https://juejin.im/entry/574512b7c26a38006c43567c" target="_blank" rel="noopener">fetch 简介: 新一代 Ajax API</a></li><li><a href="http://undefinedblog.com/window-fetch-is-not-as-good-as-you-imagined/" target="_blank" rel="noopener">fetch 没有你想象的那么美</a></li></ul><h1 id="10-fetch相关库"><a href="#10-fetch相关库" class="headerlink" title="10. fetch相关库"></a>10. fetch相关库</h1><ul><li><a href="https://github.com/github/fetch" target="_blank" rel="noopener">github/fetch</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;我曾写过两篇文章：&lt;a href=&quot;https://segmentfault.com/a/1190000008678653&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;jQuery进阶：用最优雅的方式写ajax请求&lt;/a&gt;, &lt;
      
    
    </summary>
    
    
      <category term="xfire" scheme="https://wdd.js.org/tags/xfire/"/>
    
      <category term="fetch" scheme="https://wdd.js.org/tags/fetch/"/>
    
  </entry>
  
  <entry>
    <title>trim-everything trim所有数据类型</title>
    <link href="https://wdd.js.org/trim-every-thing.html"/>
    <id>https://wdd.js.org/trim-every-thing.html</id>
    <published>2018-02-11T06:28:22.000Z</published>
    <updated>2018-02-11T06:29:19.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p3alsaatj.bkt.clouddn.com/20180211142905_ruma02_Screenshot.jpeg" alt=""></p><h1 id="trim-everything"><a href="#trim-everything" class="headerlink" title="trim-everything"></a>trim-everything</h1><p>trim所有字段，因为底层使用的JSON.stringify作为遍历器，所以如果字段的值是function，那么会被trim掉。</p><p>项目地址：<a href="https://github.com/wangduanduan/trim-everything" target="_blank" rel="noopener">trim-everything</a></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i -S <span class="built_in">trim</span>-everything</span><br><span class="line"></span><br><span class="line">yarn <span class="built_in">add</span> <span class="built_in">trim</span>-everything</span><br></pre></td></tr></table></figure><h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><ul><li>trim undefined</li><li>trim null</li><li>trim number</li><li>trim string</li><li>trim object</li><li>trim array</li><li>零依赖</li></ul><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><p>下面使用jest做的测试用例，可以从中看出trim的用法。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* global test, expect */</span></span><br><span class="line">const trim = require(<span class="string">'trim-everything'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">test</span><span class="params">(<span class="string">'trim undefined'</span>, ()</span></span> =&gt; &#123;</span><br><span class="line">  expect(trim()).toBeUndefined()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">test</span><span class="params">(<span class="string">'trim null'</span>, ()</span></span> =&gt; &#123;</span><br><span class="line">  expect(trim(null)).toBeNull()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">test</span><span class="params">(<span class="string">'trim number'</span>, ()</span></span> =&gt; &#123;</span><br><span class="line">  expect(trim(<span class="number">12.12</span>)).toBe(<span class="number">12.12</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">test</span><span class="params">(<span class="string">'trim string'</span>, ()</span></span> =&gt; &#123;</span><br><span class="line">  expect(trim(<span class="string">' 12abcd '</span>)).toBe(<span class="string">'12abcd'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">test</span><span class="params">(<span class="string">'trim object'</span>, ()</span></span> =&gt; &#123;</span><br><span class="line">  expect(trim(&#123;</span><br><span class="line">    userName: <span class="string">' wangdd '</span>,</span><br><span class="line">    age: <span class="number">12</span>,</span><br><span class="line">    some: false,</span><br><span class="line">    <span class="selector-tag">address</span>: <span class="string">' shanghai'</span></span><br><span class="line">  &#125;))</span><br><span class="line">  .toEqual(&#123;</span><br><span class="line">    userName: <span class="string">'wangdd'</span>,</span><br><span class="line">    age: <span class="number">12</span>,</span><br><span class="line">    some: false,</span><br><span class="line">    <span class="selector-tag">address</span>: <span class="string">'shanghai'</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">test</span><span class="params">(<span class="string">'trim array'</span>, ()</span></span> =&gt; &#123;</span><br><span class="line">  expect(trim([</span><br><span class="line">    &#123;</span><br><span class="line">      userName: <span class="string">' wangdd '</span>,</span><br><span class="line">      age: <span class="number">12</span>,</span><br><span class="line">      some: false,</span><br><span class="line">      <span class="selector-tag">address</span>: <span class="string">' shanghai'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">' abcd '</span>,</span><br><span class="line">    false,</span><br><span class="line">    <span class="number">12.12</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      userName: <span class="string">' wangdd '</span>,</span><br><span class="line">      age: <span class="number">12</span>,</span><br><span class="line">      some: false,</span><br><span class="line">      <span class="selector-tag">address</span>: <span class="string">' shanghai'</span>,</span><br><span class="line">      child: &#123;</span><br><span class="line">        userName: <span class="string">' wangdd '</span>,</span><br><span class="line">        age: <span class="number">12</span>,</span><br><span class="line">        some: false,</span><br><span class="line">        <span class="selector-tag">address</span>: <span class="string">' shanghai'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]))</span><br><span class="line">  .toEqual(</span><br><span class="line">    [</span><br><span class="line">      &#123;</span><br><span class="line">        userName: <span class="string">'wangdd'</span>,</span><br><span class="line">        age: <span class="number">12</span>,</span><br><span class="line">        some: false,</span><br><span class="line">        <span class="selector-tag">address</span>: <span class="string">'shanghai'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">'abcd'</span>,</span><br><span class="line">      false,</span><br><span class="line">      <span class="number">12.12</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        userName: <span class="string">'wangdd'</span>,</span><br><span class="line">        age: <span class="number">12</span>,</span><br><span class="line">        some: false,</span><br><span class="line">        <span class="selector-tag">address</span>: <span class="string">'shanghai'</span>,</span><br><span class="line">        child: &#123;</span><br><span class="line">          userName: <span class="string">'wangdd'</span>,</span><br><span class="line">          age: <span class="number">12</span>,</span><br><span class="line">          some: false,</span><br><span class="line">          <span class="selector-tag">address</span>: <span class="string">'shanghai'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://p3alsaatj.bkt.clouddn.com/20180211142905_ruma02_Screenshot.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;trim-everything&quot;&gt;&lt;a href=&quot;#trim-eve
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>mac vscode 更新失败 Permission denied解决办法</title>
    <link href="https://wdd.js.org/mac-vscode-update-permission-denied.html"/>
    <id>https://wdd.js.org/mac-vscode-update-permission-denied.html</id>
    <published>2018-02-11T06:20:01.000Z</published>
    <updated>2018-02-11T06:20:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-现象"><a href="#0-现象" class="headerlink" title="0. 现象"></a>0. 现象</h1><p><code>Could not create temporary directory: Permission denied</code></p><h1 id="1-问题起因"><a href="#1-问题起因" class="headerlink" title="1. 问题起因"></a>1. 问题起因</h1><p>在 <code>/Users/username/Library/Caches/</code>目录下，有以下两个文件， 可以看到，他们两个的用户是不一样的，一个是<code>root</code>一个<code>username</code>, 一般来说，我是以<code>username</code>来使用我的mac的。就是因为这两个文件的用户不一样，导致了更新失败。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">drwxr-xr-x</span>   6 <span class="selector-tag">username</span>  <span class="selector-tag">staff</span>   204<span class="selector-tag">B</span> <span class="selector-tag">Jan</span> 17 20<span class="selector-pseudo">:33</span> <span class="selector-tag">com</span><span class="selector-class">.microsoft</span><span class="selector-class">.VSCode</span></span><br><span class="line"><span class="selector-tag">drwxr--r--</span>   2 <span class="selector-tag">root</span>    <span class="selector-tag">staff</span>    68<span class="selector-tag">B</span> <span class="selector-tag">Dec</span> 17 13<span class="selector-pseudo">:51</span> <span class="selector-tag">com</span><span class="selector-class">.microsoft</span><span class="selector-class">.VSCode</span><span class="selector-class">.ShipIt</span></span><br></pre></td></tr></table></figure><h1 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2. 解决方法"></a>2. 解决方法</h1><p><code>注意</code>： 先把vscode 完全关闭</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 这一步是需要输入密码的</span></span><br><span class="line">sudo chown <span class="variable">$USER</span> ~/Library/Caches/com<span class="selector-class">.microsoft</span><span class="selector-class">.VSCode</span><span class="selector-class">.ShipIt</span>/</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 这一步是不需要输入密码的, 如果不进行第一步，第二步会报错</span></span><br><span class="line">sudo chown <span class="variable">$USER</span> ~/Library/Caches/com<span class="selector-class">.microsoft</span><span class="selector-class">.VSCode</span><span class="selector-class">.ShipIt</span><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">// 3. 更新xattr</span></span><br><span class="line"><span class="comment">xattr -dr com.apple.quarantine /Applications/Visual\ Studio\ Code.app</span></span><br></pre></td></tr></table></figure><h1 id="3-打开vscode"><a href="#3-打开vscode" class="headerlink" title="3. 打开vscode"></a>3. 打开vscode</h1><p>Code &gt; Check for Updates, 点击之后，你会发现<code>Check for Updates</code>已经变成灰色了，那么你需要稍等片刻，马上就可以更新，之后会跳出提示，让你重启vscode, 然后重启一下vscode, 就ok了。</p><h1 id="4-参考"><a href="#4-参考" class="headerlink" title="4. 参考"></a>4. 参考</h1><ul><li><a href="https://github.com/Microsoft/vscode/issues/7426" target="_blank" rel="noopener">joaomoreno commented on Feb 7, 2017 •  edited</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0-现象&quot;&gt;&lt;a href=&quot;#0-现象&quot; class=&quot;headerlink&quot; title=&quot;0. 现象&quot;&gt;&lt;/a&gt;0. 现象&lt;/h1&gt;&lt;p&gt;&lt;code&gt;Could not create temporary directory: Permission denie
      
    
    </summary>
    
    
      <category term="mac" scheme="https://wdd.js.org/tags/mac/"/>
    
      <category term="vscode" scheme="https://wdd.js.org/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>搭建一个舒心高效的windows + shell 工作环境</title>
    <link href="https://wdd.js.org/confortable-windows-shell-env.html"/>
    <id>https://wdd.js.org/confortable-windows-shell-env.html</id>
    <published>2018-02-11T06:16:54.000Z</published>
    <updated>2018-02-11T06:18:59.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-ConEmu命令行：-漂亮的不像实力派"><a href="#1-ConEmu命令行：-漂亮的不像实力派" class="headerlink" title="1 ConEmu命令行： 漂亮的不像实力派"></a>1 ConEmu命令行： 漂亮的不像实力派</h2><p>我曾这篇文章中<a href="https://wdd.js.org/windows-powerful-tools.html">《自从装了windows神器，再也不用羡慕mac了》</a>，介绍过好几个命令行神器。</p><p>里面几个命令行我都有用过，但是最让我喜欢的是<a href="https://github.com/Maximus5/ConEmu" target="_blank" rel="noopener">ConEmu</a>，先说说它的特点。</p><ul><li>平滑的窗口大小调整</li><li>标签和分裂（窗格）</li><li>窗口字体消除锯齿：标准，清除类型，禁用</li><li>快速的复制粘贴</li><li>可切换使用shell或者dos, 过着git bash等</li></ul><p><code>你可以看看它完美的侧颜。</code></p><p><img src="https://github.com/Maximus5/ConEmu/wiki/ConEmuSplits.png" alt=""></p><h2 id="2-gow-shell工具箱-身材苗条却又肌肉发达"><a href="#2-gow-shell工具箱-身材苗条却又肌肉发达" class="headerlink" title="2 gow shell工具箱: 身材苗条却又肌肉发达"></a>2 gow shell工具箱: 身材苗条却又肌肉发达</h2><p>我曾经想过，如果能在直接windows上用linux的<code>grep</code>,  <code>curl</code>等命令，那该多好啊！<br>我也曾试过<a href="https://zh.wikipedia.org/zh-cn/Cygwin" target="_blank" rel="noopener">Cygwin</a>, 但是那<code>哥斯拉</code>般大小的体积让我只能望洋兴叹。</p><p>曾几何时，我遇到了Gow，她10MB版苗条的身材，却又能满足你80%的日常工作的需要。</p><p>当别人还有notepad++，慢慢吞吞加载一个30MB的日志的时候，你用<code>grep</code>命令，已经搜索到了想要的结果。所谓：<code>天下武功，无坚不摧，唯快不破</code>， 就是这个感觉。</p><p><a href="https://github.com/bmatzelle/gow" target="_blank" rel="noopener">Gow（Gnu On Windows）</a>是Cygwin的轻量级替代品。 它使用了一个方便的Windows安装程序，安装了大约130个非常有用的开源UNIX应用程序，编译为本机win32二进制文件。 它被设计成尽可能小，大约10 MB，而Cygwin可以运行在100 MB以上，具体取决于选项。</p><p>这里有一些来自Gow用户的引用：</p><blockquote><p>“Gow是使Windows可以使用/可用的少数几件事之一”</p><p>“我不断地使用Gow，太棒了。”</p><p>“我只是想让你知道，GOW Suite非常棒 - 它比Cygwin工具轻得多，而且非常有用。</p></blockquote><h2 id="3-f-lux：我轻轻看一眼，这暖暖的感觉，她都有"><a href="#3-f-lux：我轻轻看一眼，这暖暖的感觉，她都有" class="headerlink" title="3 f.lux：我轻轻看一眼，这暖暖的感觉，她都有"></a>3 f.lux：我轻轻看一眼，这暖暖的感觉，她都有</h2><p>作为一个程序员，免不了长时间的面对电脑屏幕。结果经常会眼睛难受。然后我尝试了一下<a href="https://justgetflux.com/" target="_blank" rel="noopener">f.lux</a>,  装上之后，配置了一下时区， 电脑屏幕马上变成屎黄色。抱着试试看的心态，我用了几天，几天过后，我实在受不了这颜色了。 然后就卸载了，没过多上时间，我觉得有点不对劲，不舒服。总是感觉缺点什么。 </p><p>就放佛 张韶涵的歌《遗失的美好》：<code>有些人说不清哪里好 但就是谁都替代不了</code>,  然后我就又装上了f.lux。在我的影响下，我附近的几个小伙伴，也都装上了<code>f.lux</code>。 后来我换了mac, 但是我也装了f.lux。</p><p><img src="https://justgetflux.com/images/flux-windows.jpg" alt=""></p><blockquote><p>f.lux让你的电脑屏幕看起来就像你所在的房间一样。 当日落时，它使您的电脑看起来像你的室内灯。 在早上，它使事情看起来像阳光。</p><p>告诉f.lux你有什么样的照明，以及你住的地方。 然后忘了它。 f.lux会自动完成剩下的工作。</p></blockquote><h2 id="4-visual-studio-code-最好用的轻量编辑器"><a href="#4-visual-studio-code-最好用的轻量编辑器" class="headerlink" title="4 visual studio code: 最好用的轻量编辑器"></a>4 visual studio code: 最好用的轻量编辑器</h2><ul><li>颜值很高</li><li>微软开源的产品，质量保证</li><li>集成git</li><li>插件很多，下载很快</li><li>免费</li><li>体积很小，占用内存很小，启动很快</li></ul><p><img src="http://p3alsaatj.bkt.clouddn.com/20180201172157_gz0qsT_Jietu20180201-172150.jpeg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-ConEmu命令行：-漂亮的不像实力派&quot;&gt;&lt;a href=&quot;#1-ConEmu命令行：-漂亮的不像实力派&quot; class=&quot;headerlink&quot; title=&quot;1 ConEmu命令行： 漂亮的不像实力派&quot;&gt;&lt;/a&gt;1 ConEmu命令行： 漂亮的不像实力派&lt;/
      
    
    </summary>
    
    
      <category term="windows" scheme="https://wdd.js.org/tags/windows/"/>
    
      <category term="shell" scheme="https://wdd.js.org/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>IE11 0x2ee4 bug 以及类似问题解决方法</title>
    <link href="https://wdd.js.org/ie11-0X2ee4-bug.html"/>
    <id>https://wdd.js.org/ie11-0X2ee4-bug.html</id>
    <published>2018-02-11T06:12:19.000Z</published>
    <updated>2018-02-11T06:15:29.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>一千个IE浏览器访问同一个页面，可能报一千种错误</code>。前端激进派对IE恨得牙痒痒，但是无论你爱，或者不爱，IE就在那里，不来不去。</p><p>一些银行，以及政府部门，往往都是指定必须使用IE浏览器。所以，一些仅在IE浏览器上出现的问题。总结起来问题的原因很简单：<code>IE的配置不正确</code></p><p>下面就将一个我曾经遇到的问题: <code>IE11 0x2ee4</code>， 以及其他的问题的解决方案</p><h1 id="1-IE11-SCRIPT7002-XMLHttpRequest-网络错误-0x2ee4"><a href="#1-IE11-SCRIPT7002-XMLHttpRequest-网络错误-0x2ee4" class="headerlink" title="1. IE11 SCRIPT7002: XMLHttpRequest: 网络错误 0x2ee4"></a>1. IE11 SCRIPT7002: XMLHttpRequest: 网络错误 0x2ee4</h1><blockquote><p>背景介绍：在一个HTTPS域向另外一个HTTPS域发送跨域POTST请求时</p></blockquote><p>这个问题在浏览器的输出内容如下，怪异的是，并不是所有IE11都会报这个错误。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">SCRIPT7002:</span> <span class="string">XMLHttpRequest:</span> 网络错误 <span class="number">0x2ee4</span>, 由于出现错误 <span class="number">00002</span>ee4 而导致此项操作无法完成</span><br></pre></td></tr></table></figure><p>stackoverflow上有个答案，它的思路是：<code>在post请求发送之前，先进行一次get操作</code> 这个方式我试过，是可行的。但是深层次的原因我不是很明白。</p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180211141321_kcU1Mh_Screenshot.jpeg" alt=""></p><p>然而真相总有大白的一天，其实深层次的原因是，IE11的配置。</p><p>去掉检查证书吊销的的检查，解决0x2ee4的问题</p><p><code>解决方法</code></p><ul><li>去掉check for server certificate revocation*， 也有可能你那边是中文翻译的：叫检查服务器证书是否已吊销</li><li>去掉检查发型商证书是否已吊销</li><li>点击确定</li><li>重启计算机</li></ul><p><img src="http://p3alsaatj.bkt.clouddn.com/20180211141332_EzU6Hs_Screenshot.jpeg" alt=""></p><h1 id="2-其他常规设置"><a href="#2-其他常规设置" class="headerlink" title="2 其他常规设置"></a>2 其他常规设置</h1><h2 id="2-1-去掉兼容模式，-使用Edge文档模式"><a href="#2-1-去掉兼容模式，-使用Edge文档模式" class="headerlink" title="2.1 去掉兼容模式， 使用Edge文档模式"></a>2.1 去掉兼容模式， 使用Edge文档模式</h2><p><img src="http://p3alsaatj.bkt.clouddn.com/20180211141344_ctLchE_Screenshot.jpeg" alt=""></p><p>下图中红色框里的按钮也要取消勾选<br><img src="http://p3alsaatj.bkt.clouddn.com/20180211141353_182pMj_Screenshot.jpeg" alt=""></p><h2 id="2-2-有些使用activeX，还是需要检查是否启用的"><a href="#2-2-有些使用activeX，还是需要检查是否启用的" class="headerlink" title="2.2 有些使用activeX，还是需要检查是否启用的"></a>2.2 有些使用activeX，还是需要检查是否启用的</h2><p><img src="http://p3alsaatj.bkt.clouddn.com/20180211141403_eM2ajd_Screenshot.jpeg" alt=""><br><img src="http://p3alsaatj.bkt.clouddn.com/20180211141414_8gyYUu_Screenshot.jpeg" alt=""><br><img src="http://p3alsaatj.bkt.clouddn.com/20180211141427_CeMrwH_Screenshot.jpeg" alt=""></p><h2 id="2-3-允许跨域"><a href="#2-3-允许跨域" class="headerlink" title="2.3 允许跨域"></a>2.3 允许跨域</h2><p>如果你的接口跨域了，还要检查浏览器是否允许跨域，否则浏览器可能默认就禁止跨域的</p><p>设置方法 </p><ol><li>internet选项 </li><li>安全 </li><li>自定义级别 </li><li>启用通过跨域访问数据源 </li><li>确定 </li><li>然后重启电脑</li></ol><p><img src="http://p3alsaatj.bkt.clouddn.com/20180211141443_fV3amH_Screenshot.jpeg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;一千个IE浏览器访问同一个页面，可能报一千种错误&lt;/code&gt;。前端激进派对IE恨得牙痒痒，但是无论你爱，或者不爱，IE就在那里，不来不去。&lt;/p&gt;
&lt;p&gt;一些银行，以及政府部门，往往都是指定必须使用IE浏览器。所以，一些仅在IE浏览器上出现的问题。总结起来问题
      
    
    </summary>
    
    
      <category term="IE11" scheme="https://wdd.js.org/tags/IE11/"/>
    
      <category term="12004" scheme="https://wdd.js.org/tags/12004/"/>
    
      <category term="ajax" scheme="https://wdd.js.org/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>Mac版：上传图片到远程图床哪家强？</title>
    <link href="https://wdd.js.org/tool-upload-img-to-cloud.html"/>
    <id>https://wdd.js.org/tool-upload-img-to-cloud.html</id>
    <published>2018-02-11T06:09:09.000Z</published>
    <updated>2018-02-11T06:11:17.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>markdown写文档虽然如行云流水，但是一旦需要引入图片了。往往需要四五步操作，如果图片仅仅保存在本地，那么复制markdown时，图片路径往往都不对了，还要重新上传一遍图片，很是麻烦。</p></blockquote><p>因此，<code>最好把图片直接上传到图床上</code>，然后通过公网链接来引入图片。图床选择上，我选择七牛云。</p><p>我在网上找到了3个不错的工具，在此记录一下。</p><h1 id="1-三个工具分析一览"><a href="#1-三个工具分析一览" class="headerlink" title="1. 三个工具分析一览"></a>1. 三个工具分析一览</h1><p>这些工具在上传图片成功后，会把链接保存在剪贴板中，在markdown文件中只需要粘贴一下就可以了。</p><table><thead><tr><th>名称</th><th>收费标准</th><th>优点</th><th>缺点</th><th>推荐指数</th><th>说明</th><th>下载地址</th></tr></thead><tbody><tr><td>ipic</td><td>50元/年</td><td>支持很多的云服务，压缩，拖拽上传</td><td>死贵, 免费版只能用新浪图床，图片很可能会丢失</td><td><code>A</code></td><td>功能很多，价钱死贵</td><td>可通过mac app store 下载</td></tr><tr><td>UCQCloud</td><td>免费</td><td>免费，支持压缩，拖拽上传，截图上传</td><td>仅支持七牛，服务器仅支持华东和华北</td><td><code>AAA</code></td><td>免费，功能够用</td><td><a href="https://link.jianshu.com/?t=http://7xr7vj.com1.z0.glb.clouddn.com/UCQCloud1.3.3.dmg" target="_blank" rel="noopener">UCQCloud1.3.3.dmg</a></td></tr><tr><td>cuImage</td><td>终身1元</td><td>剪贴板上传，压缩上传，拖拽上传，快捷键上传，自动把链接转成markdown的形式</td><td>仅支持七牛</td><td><code>AAAA</code></td><td>cuImage的压缩率要比UCQCloud高很多</td><td>可通过mac app store 下载</td></tr></tbody></table><p>总体来说：<code>如果你用七牛图床，cuImage是性价比最高, 用户体验最好的</code></p><h1 id="2-三个工具操作截图与简介"><a href="#2-三个工具操作截图与简介" class="headerlink" title="2. 三个工具操作截图与简介"></a>2. 三个工具操作截图与简介</h1><h1 id="3-cuImage"><a href="#3-cuImage" class="headerlink" title="3. cuImage"></a>3. cuImage</h1><ul><li>图片上传完成后自动复制URL。</li><li>在“上传历史”中查看已上传图片。</li><li>批量上传图片。</li><li>通过截图或复制上传图片。</li><li>通过拖拽上传图片。</li><li>通过”服务“菜单上传图片。</li><li>通过全局快捷键上传图片。</li><li>上传之前压缩图片。</li><li>支持BMP/JPEG/PNG/GIF/TIFF等多种文件格式。</li><li>只支持七牛云，已兼容七牛云华东、华北、华南及北美的存储区域。</li></ul><p><img src="https://camo.githubusercontent.com/16d25db3e16f70c864c6794d565bd46535d91944/687474703a2f2f6f68636f71626638652e626b742e636c6f7564646e2e636f6d2f32303137303231303136303432325f30724f3472385f6375496d61676544656d6f2e676966" alt=""></p><h1 id="4-UCQCloud"><a href="#4-UCQCloud" class="headerlink" title="4. UCQCloud"></a>4. UCQCloud</h1><p>1、文件上传(带上传进度)</p><ul><li>支持软件面板拖放、选择文件(任意二进制文件)上传</li><li>支持状态栏粘贴板图片上传</li><li><p>支持状态栏拖放文件上传<br>2、图片高质量压缩</p></li><li><p>本地图片上传使用Tinypng在线高质量无损压缩</p></li><li>粘贴板图片上传使用开源库pngquant压缩</li><li>正常情况压缩节省50%以上空间,大幅提高博客图片加载速度，节约网盘存储空间。<br>3、上传历史记录管理</li><li>文件预览查看，删除，拷贝上传外链地址等</li></ul><p>4、支持文件夹批量处理</p><ul><li>直接拖入文件夹，或文件批量处理</li></ul><p>作者：huluo666<br>链接：<a href="https://www.jianshu.com/p/694dad59f20c" target="_blank" rel="noopener">https://www.jianshu.com/p/694dad59f20c</a><br>來源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><p><img src="http://7xr7vj.com1.z0.glb.clouddn.com/%E7%B2%98%E8%B4%B4%E6%9D%BF%E4%B8%8A%E4%BC%A0.gif" alt=""><br><img src="https://upload-images.jianshu.io/upload_images/328273-2ff220978053e895.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt=""></p><h1 id="5-ipic"><a href="#5-ipic" class="headerlink" title="5. ipic"></a>5. ipic</h1><p>图床神器 iPic 可自动上传图片、保存 Markdown 链接，给你前所未有的插图体验。</p><ul><li>上传前压缩图片</li><li>通过拖拽上传图片</li><li>通过服务上传图片 [Command + U…</li></ul><p><img src="http://p394yuy0c.bkt.clouddn.com/20180128190724_D3rHNM_Screen%20Shot%202018-01-28%20at%207.06.56%20PM.jpeg" alt=""></p><h1 id="6-参考文献"><a href="#6-参考文献" class="headerlink" title="6. 参考文献"></a>6. 参考文献</h1><ul><li><a href="https://toolinbox.net/iPic/" target="_blank" rel="noopener">iPic - 图床神器</a></li><li><a href="https://www.jianshu.com/p/694dad59f20c" target="_blank" rel="noopener">Mac七牛图床与文件批量上传工具: UCQCloud1.3.3</a></li><li><a href="https://github.com/hulizhen/cuImage" target="_blank" rel="noopener">cuImage - 图床利器</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;markdown写文档虽然如行云流水，但是一旦需要引入图片了。往往需要四五步操作，如果图片仅仅保存在本地，那么复制markdown时，图片路径往往都不对了，还要重新上传一遍图片，很是麻烦。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因此，&lt;code
      
    
    </summary>
    
    
      <category term="工具" scheme="https://wdd.js.org/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记 凯文 凯利 《失控》</title>
    <link href="https://wdd.js.org/booknote-out-of-control.html"/>
    <id>https://wdd.js.org/booknote-out-of-control.html</id>
    <published>2018-02-09T14:45:17.000Z</published>
    <updated>2018-02-09T15:21:11.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p3alsaatj.bkt.clouddn.com/20180209225401_xDhao1_IMG_2666.jpeg" alt=""><br><a id="more"></a></p><p>失控这本书在刚开始看时，立马让我联想到黑客帝国里人被种植在营养液中的情形，我不太清楚，这本书和这个电影之间有什么联系。</p><p>这本书真实能让人脑洞大开。</p><blockquote><p>人造与天生的联姻正是本书的主题</p></blockquote><p>读到这里，我立马有一个预想：多年以后，会有一家公司，把人的思想从肉体从抽取出来。让人的思想，脱离肉体而存在。</p><blockquote><p>蜂群思维 分布式管理</p></blockquote><p>有点像SVN之与GIT</p><blockquote><p>蜂群思维的神奇之处，看似没有一只蜜蜂在控制它。但是有一只看不见的手，在控制着整个群体</p><p>低层级的存在无法推断出高层级的复杂性</p></blockquote><p>就像，tcp无法推断出HTTP协议</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p3alsaatj.bkt.clouddn.com/20180209225401_xDhao1_IMG_2666.jpeg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://wdd.js.org/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="失控" scheme="https://wdd.js.org/tags/%E5%A4%B1%E6%8E%A7/"/>
    
      <category term="未完成" scheme="https://wdd.js.org/tags/%E6%9C%AA%E5%AE%8C%E6%88%90/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记-大前研一 专业主义</title>
    <link href="https://wdd.js.org/booknote-professionalism.html"/>
    <id>https://wdd.js.org/booknote-professionalism.html</id>
    <published>2018-02-09T14:33:54.000Z</published>
    <updated>2018-02-10T14:45:14.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p3alsaatj.bkt.clouddn.com/20180209223906_Nh00QV_Csad9HyVUAABc1P.jpeg" alt=""></p><a id="more"></a><h1 id="1-你够专业吗？"><a href="#1-你够专业吗？" class="headerlink" title="1. 你够专业吗？"></a>1. 你够专业吗？</h1><blockquote><p>p20</p></blockquote><ol><li>控制情绪，理性行动</li><li>专业知识，专业技能</li><li>客户第一</li><li>好奇心</li><li>进取心</li><li>严格遵守记录</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p3alsaatj.bkt.clouddn.com/20180209223906_Nh00QV_Csad9HyVUAABc1P.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://wdd.js.org/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="未完成" scheme="https://wdd.js.org/tags/%E6%9C%AA%E5%AE%8C%E6%88%90/"/>
    
      <category term="主页主义" scheme="https://wdd.js.org/tags/%E4%B8%BB%E9%A1%B5%E4%B8%BB%E4%B9%89/"/>
    
  </entry>
  
  <entry>
    <title>Vue+ElementUI 手把手教你做一个audio组件</title>
    <link href="https://wdd.js.org/vue-elementui-audio-component.html"/>
    <id>https://wdd.js.org/vue-elementui-audio-component.html</id>
    <published>2018-02-09T05:44:13.000Z</published>
    <updated>2018-02-09T05:55:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h1><h2 id="1-1-相关技术"><a href="#1-1-相关技术" class="headerlink" title="1.1. 相关技术"></a>1.1. 相关技术</h2><ul><li><a href="https://cn.vuejs.org/" target="_blank" rel="noopener">Vue</a></li><li><a href="https://github.com/vuejs/vue-cli" target="_blank" rel="noopener">Vue-cli</a></li><li><a href="http://element-cn.eleme.io/#/zh-CN" target="_blank" rel="noopener">ElementUI</a></li><li><a href="https://yarnpkg.com/lang/zh-hans/" target="_blank" rel="noopener">yarn</a> (之前我用npm, 并使用cnpm的源，但是用了yarn之后，我发现它比cnpm的速度还快，功能更好，我就毫不犹豫选择yarn了)</li><li><a href="https://segmentfault.com/a/1190000009769804" target="_blank" rel="noopener">Audio相关API和事件</a></li></ul><h2 id="1-2-从本教程你会学到什么？"><a href="#1-2-从本教程你会学到什么？" class="headerlink" title="1.2. 从本教程你会学到什么？"></a>1.2. 从本教程你会学到什么？</h2><ul><li><code>Vue单文件组件开发知识</code></li><li><code>Element UI基本用法</code></li><li><code>Audio原生API及Audio相关事件</code></li><li><code>音频播放器的基本原理</code></li><li><code>音频的播放暂停控制</code></li><li><code>更新音频显示时间</code></li><li><code>音频进度条控制与跳转</code></li><li><code>音频音量控制</code></li><li><code>音频播放速度控制</code></li><li><code>音频静音控制</code></li><li><code>音频下载控制</code></li><li><code>个性化配置与排他性播放</code></li><li><code>一点点ES6语法</code></li></ul><h1 id="2-学前准备"><a href="#2-学前准备" class="headerlink" title="2. 学前准备"></a>2. 学前准备</h1><p>基本上不需要什么准备，但是如果你能先看一下Aduio相关API和事件将会更好</p><ul><li><a href="https://wdd.js.org/audio-heart-detail.html">Audio: 如果你愿意一层一层剥开我的心</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/HTML/Using_HTML5_audio_and_video" target="_blank" rel="noopener">使用 HTML5 音频和视频</a></li></ul><h1 id="3-在线demon"><a href="#3-在线demon" class="headerlink" title="3. 在线demon"></a>3. <a href="https://wangduanduan.github.io/element-audio/" target="_blank" rel="noopener">在线demon</a></h1><p><code>没有在线demo的教程都是耍流氓</code></p><ul><li><a href="https://wangduanduan.github.io/element-audio/" target="_blank" rel="noopener">查看在线demon</a></li><li><a href="https://github.com/wangduanduan/element-audio" target="_blank" rel="noopener">项目地址</a></li></ul><p><img src="http://p3alsaatj.bkt.clouddn.com/20180209134536_j9HvMg_Screenshot.jpeg" alt=""></p><h1 id="4-开始编码"><a href="#4-开始编码" class="headerlink" title="4. 开始编码"></a>4. 开始编码</h1><h1 id="5-项目初始化"><a href="#5-项目初始化" class="headerlink" title="5. 项目初始化"></a>5. 项目初始化</h1><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">➜  <span class="keyword">test</span> vue init webpack element-audio</span><br><span class="line"></span><br><span class="line">  A newer <span class="keyword">version</span> of vue-<span class="keyword">cli</span> is available.</span><br><span class="line"></span><br><span class="line">  latest:    2.9.2</span><br><span class="line">  installed: 2.9.1</span><br><span class="line"></span><br><span class="line">? Project name element-audio</span><br><span class="line">? Project description A Vue.js project</span><br><span class="line">? Author wangdd &lt;wangdd@xxxxxx.com&gt;</span><br><span class="line">? Vue build standalone</span><br><span class="line">? Install vue-router? <span class="keyword">No</span></span><br><span class="line">? <span class="keyword">Use</span> ESLint to lint your code? <span class="keyword">No</span></span><br><span class="line">? <span class="keyword">Set</span> up unit tests <span class="keyword">No</span></span><br><span class="line">? Setup e2e tests with Nightwatch? <span class="keyword">No</span></span><br><span class="line">? Should we <span class="keyword">run</span> `npm install` <span class="keyword">for</span> you after the project has been created? (recommended) npm</span><br><span class="line"></span><br><span class="line">➜  <span class="keyword">test</span> <span class="keyword">cd</span> element-audio </span><br><span class="line">➜  element-audio npm <span class="keyword">run</span> dev</span><br></pre></td></tr></table></figure><p>浏览器打开 <code>http://localhost:8080/</code>, 看到如下界面，说明项目初始化成功</p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180209134627_t78Jqf_Screenshot.jpeg" alt=""></p><h2 id="5-1-安装ElementUI并插入audio标签"><a href="#5-1-安装ElementUI并插入audio标签" class="headerlink" title="5.1. 安装ElementUI并插入audio标签"></a>5.1. 安装ElementUI并插入audio标签</h2><h3 id="5-1-1-安装ElementUI"><a href="#5-1-1-安装ElementUI" class="headerlink" title="5.1.1. 安装ElementUI"></a>5.1.1. <code>安装ElementUI</code></h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn <span class="built_in">add</span> <span class="keyword">element</span>-ui<span class="comment"> // or npm i element-ui -S</span></span><br></pre></td></tr></table></figure><h3 id="5-1-2-在src-main-js中引入Element-UI"><a href="#5-1-2-在src-main-js中引入Element-UI" class="headerlink" title="5.1.2. 在src/main.js中引入Element UI"></a>5.1.2. 在<code>src/main.js</code>中引入Element UI</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// filename: src/main.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">'element-ui'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'element-ui/lib/theme-chalk/index.css'</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="keyword">false</span></span><br><span class="line"></span><br><span class="line">Vue.use(ElementUI)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span>,</span><br><span class="line">  components: &#123; App &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="5-1-3-创建src-components-VueAudio-vue"><a href="#5-1-3-创建src-components-VueAudio-vue" class="headerlink" title="5.1.3. 创建src/components/VueAudio.vue"></a>5.1.3. 创建<code>src/components/VueAudio.vue</code></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// filename: src/components/VueAudio.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">"http://devtest.qiniudn.com/secret base~.mp3"</span> <span class="attr">controls</span>=<span class="string">"controls"</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;&#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-1-4-修改src-App-vue-并引入VueAudio-vue组件"><a href="#5-1-4-修改src-App-vue-并引入VueAudio-vue组件" class="headerlink" title="5.1.4. 修改src/App.vue, 并引入VueAudio.vue组件"></a>5.1.4. 修改<code>src/App.vue</code>, 并引入<code>VueAudio.vue</code>组件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// filename: src/App.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">VueAudio</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> VueAudio <span class="keyword">from</span> <span class="string">'./components/VueAudio'</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">'app'</span>,</span></span><br><span class="line"><span class="undefined">  components: &#123;</span></span><br><span class="line"><span class="undefined">    VueAudio</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;&#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>打开：<a href="http://localhost:8080/，你应该能看到如下效果，说明引入成功，你可以点击播放按钮看看，音频是否能够播放" target="_blank" rel="noopener">http://localhost:8080/，你应该能看到如下效果，说明引入成功，你可以点击播放按钮看看，音频是否能够播放</a><br><img src="http://p3alsaatj.bkt.clouddn.com/20180209134643_6gU9xo_Screenshot.jpeg" alt=""></p><h2 id="5-2-音频的播放暂停控制"><a href="#5-2-音频的播放暂停控制" class="headerlink" title="5.2. 音频的播放暂停控制"></a>5.2. 音频的播放暂停控制</h2><p>我们需要用一个按钮去控制音频的播放与暂停，这里调用了audio的两个api,以及两个事件</p><ul><li>audio.play()</li><li>audio.pause()</li><li>play事件</li><li>pause事件</li></ul><p>修改<code>src/components/VueAudio.vue</code><br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">// filename: src/components/VueAudio.vue</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 此处的ref属性，可以很方便的在vue组件中通过 this.$refs.audio获取该dom元素 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">audio</span> <span class="attr">ref</span>=<span class="string">"audio"</span> </span></span></span><br><span class="line"><span class="xml">    @pause="onPause"</span></span><br><span class="line"><span class="xml">    @play="onPlay"</span></span><br><span class="line"><span class="xml">    src="http://devtest.qiniudn.com/secret base~.mp3" controls="controls"&gt;<span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 音频播放控件 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"text"</span> @<span class="attr">click</span>=<span class="string">"startPlayOrPause"</span>&gt;</span></span><span class="template-variable">&#123;&#123;audio.playing | transPlayPause&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span></span><br><span class="line"><span class="xml">export default &#123;</span></span><br><span class="line"><span class="xml">  data () &#123;</span></span><br><span class="line"><span class="xml">    return &#123;</span></span><br><span class="line"><span class="xml">      audio: &#123;</span></span><br><span class="line"><span class="xml">        // 该字段是音频是否处于播放状态的属性</span></span><br><span class="line"><span class="xml">        playing: false</span></span><br><span class="line"><span class="xml">      &#125;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">  &#125;,</span></span><br><span class="line"><span class="xml">  methods: &#123;</span></span><br><span class="line"><span class="xml">    // 控制音频的播放与暂停</span></span><br><span class="line"><span class="xml">    startPlayOrPause () &#123;</span></span><br><span class="line"><span class="xml">      return this.audio.playing ? this.pause() : this.play()</span></span><br><span class="line"><span class="xml">    &#125;,</span></span><br><span class="line"><span class="xml">    // 播放音频</span></span><br><span class="line"><span class="xml">    play () &#123;</span></span><br><span class="line"><span class="xml">      this.$refs.audio.play()</span></span><br><span class="line"><span class="xml">    &#125;,</span></span><br><span class="line"><span class="xml">    // 暂停音频</span></span><br><span class="line"><span class="xml">    pause () &#123;</span></span><br><span class="line"><span class="xml">      this.$refs.audio.pause()</span></span><br><span class="line"><span class="xml">    &#125;,</span></span><br><span class="line"><span class="xml">    // 当音频播放</span></span><br><span class="line"><span class="xml">    onPlay () &#123;</span></span><br><span class="line"><span class="xml">      this.audio.playing = true</span></span><br><span class="line"><span class="xml">    &#125;,</span></span><br><span class="line"><span class="xml">    // 当音频暂停</span></span><br><span class="line"><span class="xml">    onPause () &#123;</span></span><br><span class="line"><span class="xml">      this.audio.playing = false</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">  &#125;,</span></span><br><span class="line"><span class="xml">  filters: &#123;</span></span><br><span class="line"><span class="xml">    // 使用组件过滤器来动态改变按钮的显示</span></span><br><span class="line"><span class="xml">    transPlayPause(value) &#123;</span></span><br><span class="line"><span class="xml">      return value ? '暂停' : '播放'</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180209134700_DTqSCu_Screenshot.jpeg" alt=""></p><h2 id="5-3-音频显示时间"><a href="#5-3-音频显示时间" class="headerlink" title="5.3. 音频显示时间"></a>5.3. 音频显示时间</h2><p>音频的时间显示主要有两部分，音频的总时长和当前播放时间。可以从两个事件中获取</p><ul><li><code>loadedmetadata</code>:代表音频的元数据已经被加载完成，可以从中获取音频总时长</li><li><code>timeupdate</code>: 当前播放位置作为正常播放的一部分而改变，或者以特别有趣的方式，例如不连续地改变，可以从该事件中获取音频的当前播放时间，<code>该事件在播放过程中会不断被触发</code></li></ul><p><code>要点代码</code>：整数格式化成时:分:秒<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function realFormatSecond(<span class="built_in">second</span>) &#123;</span><br><span class="line">  var secondType = typeof <span class="built_in">second</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (secondType === <span class="string">'number'</span> || secondType === <span class="string">'string'</span>) &#123;</span><br><span class="line">    <span class="built_in">second</span> = parseInt(<span class="built_in">second</span>)</span><br><span class="line"></span><br><span class="line">    var hours = Math.<span class="built_in">floor</span>(<span class="built_in">second</span> / <span class="number">3600</span>)</span><br><span class="line">    <span class="built_in">second</span> = <span class="built_in">second</span> - hours * <span class="number">3600</span></span><br><span class="line">    var mimute = Math.<span class="built_in">floor</span>(<span class="built_in">second</span> / <span class="number">60</span>)</span><br><span class="line">    <span class="built_in">second</span> = <span class="built_in">second</span> - mimute * <span class="number">60</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> hours + <span class="string">':'</span> + (<span class="string">'0'</span> + mimute).slice(<span class="number">-2</span>) + <span class="string">':'</span> + (<span class="string">'0'</span> + <span class="built_in">second</span>).slice(<span class="number">-2</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'0:00:00'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>要点代码</code>： 两个事件的处理<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当timeupdate事件大概每秒一次，用来更新音频流的当前播放时间</span></span><br><span class="line"><span class="function"><span class="title">onTimeupdate</span><span class="params">(res)</span></span> &#123;</span><br><span class="line">      console.log(<span class="string">'timeupdate'</span>)</span><br><span class="line">      console.log(res)</span><br><span class="line">      this<span class="selector-class">.audio</span><span class="selector-class">.currentTime</span> = res<span class="selector-class">.target</span><span class="selector-class">.currentTime</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="comment">// 当加载语音流元数据完成后，会触发该事件的回调函数</span></span><br><span class="line"><span class="comment">// 语音元数据主要是语音的长度之类的数据</span></span><br><span class="line"><span class="function"><span class="title">onLoadedmetadata</span><span class="params">(res)</span></span> &#123;</span><br><span class="line">  console.log(<span class="string">'loadedmetadata'</span>)</span><br><span class="line">  console.log(res)</span><br><span class="line">  this<span class="selector-class">.audio</span><span class="selector-class">.maxTime</span> = parseInt(res<span class="selector-class">.target</span><span class="selector-class">.duration</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>完整代码</code><br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 此处的ref属性，可以很方便的在vue组件中通过 this.$refs.audio获取该dom元素 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">audio</span> <span class="attr">ref</span>=<span class="string">"audio"</span> </span></span></span><br><span class="line"><span class="xml">    @pause="onPause"</span></span><br><span class="line"><span class="xml">    @play="onPlay"</span></span><br><span class="line"><span class="xml">    @timeupdate="onTimeupdate" </span></span><br><span class="line"><span class="xml">    @loadedmetadata="onLoadedmetadata"</span></span><br><span class="line"><span class="xml">    src="http://devtest.qiniudn.com/secret base~.mp3" controls="controls"&gt;<span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 音频播放控件 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"text"</span> @<span class="attr">click</span>=<span class="string">"startPlayOrPause"</span>&gt;</span></span><span class="template-variable">&#123;&#123;audio.playing | transPlayPause&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">el-tag</span> <span class="attr">type</span>=<span class="string">"info"</span>&gt;</span></span><span class="template-variable">&#123;&#123; audio.currentTime | formatSecond&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">el-tag</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">el-tag</span> <span class="attr">type</span>=<span class="string">"info"</span>&gt;</span></span><span class="template-variable">&#123;&#123; audio.maxTime | formatSecond&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">el-tag</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">// 将整数转换成 时：分：秒的格式</span></span><br><span class="line"><span class="xml">function realFormatSecond(second) &#123;</span></span><br><span class="line"><span class="xml">  var secondType = typeof second</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  if (secondType === 'number' || secondType === 'string') &#123;</span></span><br><span class="line"><span class="xml">    second = parseInt(second)</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    var hours = Math.floor(second / 3600)</span></span><br><span class="line"><span class="xml">    second = second - hours * 3600</span></span><br><span class="line"><span class="xml">    var mimute = Math.floor(second / 60)</span></span><br><span class="line"><span class="xml">    second = second - mimute * 60</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    return hours + ':' + ('0' + mimute).slice(-2) + ':' + ('0' + second).slice(-2)</span></span><br><span class="line"><span class="xml">  &#125; else &#123;</span></span><br><span class="line"><span class="xml">    return '0:00:00'</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">export default &#123;</span></span><br><span class="line"><span class="xml">  data () &#123;</span></span><br><span class="line"><span class="xml">    return &#123;</span></span><br><span class="line"><span class="xml">      audio: &#123;</span></span><br><span class="line"><span class="xml">        // 该字段是音频是否处于播放状态的属性</span></span><br><span class="line"><span class="xml">        playing: false,</span></span><br><span class="line"><span class="xml">        // 音频当前播放时长</span></span><br><span class="line"><span class="xml">        currentTime: 0,</span></span><br><span class="line"><span class="xml">        // 音频最大播放时长</span></span><br><span class="line"><span class="xml">        maxTime: 0</span></span><br><span class="line"><span class="xml">      &#125;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">  &#125;,</span></span><br><span class="line"><span class="xml">  methods: &#123;</span></span><br><span class="line"><span class="xml">    // 控制音频的播放与暂停</span></span><br><span class="line"><span class="xml">    startPlayOrPause () &#123;</span></span><br><span class="line"><span class="xml">      return this.audio.playing ? this.pause() : this.play()</span></span><br><span class="line"><span class="xml">    &#125;,</span></span><br><span class="line"><span class="xml">    // 播放音频</span></span><br><span class="line"><span class="xml">    play () &#123;</span></span><br><span class="line"><span class="xml">      this.$refs.audio.play()</span></span><br><span class="line"><span class="xml">    &#125;,</span></span><br><span class="line"><span class="xml">    // 暂停音频</span></span><br><span class="line"><span class="xml">    pause () &#123;</span></span><br><span class="line"><span class="xml">      this.$refs.audio.pause()</span></span><br><span class="line"><span class="xml">    &#125;,</span></span><br><span class="line"><span class="xml">    // 当音频播放</span></span><br><span class="line"><span class="xml">    onPlay () &#123;</span></span><br><span class="line"><span class="xml">      this.audio.playing = true</span></span><br><span class="line"><span class="xml">    &#125;,</span></span><br><span class="line"><span class="xml">    // 当音频暂停</span></span><br><span class="line"><span class="xml">    onPause () &#123;</span></span><br><span class="line"><span class="xml">      this.audio.playing = false</span></span><br><span class="line"><span class="xml">    &#125;,</span></span><br><span class="line"><span class="xml">    // 当timeupdate事件大概每秒一次，用来更新音频流的当前播放时间</span></span><br><span class="line"><span class="xml">    onTimeupdate(res) &#123;</span></span><br><span class="line"><span class="xml">      console.log('timeupdate')</span></span><br><span class="line"><span class="xml">      console.log(res)</span></span><br><span class="line"><span class="xml">      this.audio.currentTime = res.target.currentTime</span></span><br><span class="line"><span class="xml">    &#125;,</span></span><br><span class="line"><span class="xml">    // 当加载语音流元数据完成后，会触发该事件的回调函数</span></span><br><span class="line"><span class="xml">    // 语音元数据主要是语音的长度之类的数据</span></span><br><span class="line"><span class="xml">    onLoadedmetadata(res) &#123;</span></span><br><span class="line"><span class="xml">      console.log('loadedmetadata')</span></span><br><span class="line"><span class="xml">      console.log(res)</span></span><br><span class="line"><span class="xml">      this.audio.maxTime = parseInt(res.target.duration)</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">  &#125;,</span></span><br><span class="line"><span class="xml">  filters: &#123;</span></span><br><span class="line"><span class="xml">    // 使用组件过滤器来动态改变按钮的显示</span></span><br><span class="line"><span class="xml">    transPlayPause(value) &#123;</span></span><br><span class="line"><span class="xml">      return value ? '暂停' : '播放'</span></span><br><span class="line"><span class="xml">    &#125;,</span></span><br><span class="line"><span class="xml">    // 将整数转化成时分秒</span></span><br><span class="line"><span class="xml">    formatSecond(second = 0) &#123;</span></span><br><span class="line"><span class="xml">      return realFormatSecond(second)</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>打开浏览器可以看到，当音频播放时，当前时间也在改变。<br><img src="http://p3alsaatj.bkt.clouddn.com/20180209134724_Po5w9m_Screenshot.jpeg" alt=""></p><h2 id="5-4-音频进度条控制"><a href="#5-4-音频进度条控制" class="headerlink" title="5.4. 音频进度条控制"></a>5.4. 音频进度条控制</h2><p>进度条主要有两个控制，改变进度的原理是：改变<code>audio.currentTime</code>属性值</p><ul><li>音频播放后，当前时间改变，进度条就要随之改变</li><li>拖动进度条，可以改变音频的当前时间</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 进度条ui</span></span><br><span class="line">&lt;el-slider v-model=<span class="string">"sliderTime"</span> :format-tooltip=<span class="string">"formatProcessToolTip"</span> <span class="meta">@change</span>=<span class="string">"changeCurrentTime"</span> <span class="class"><span class="keyword">class</span>="<span class="title">slider</span>"&gt;&lt;<span class="type">/el-slider</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 拖动进度条，改变当前时间，index是进度条改变时的回调函数的参数0-100之间，需要换算成实际时间</span></span><br><span class="line">changeCurrentTime(index) &#123;</span><br><span class="line">  <span class="keyword">this</span>.$refs.audio.currentTime = parseInt(index / <span class="number">100</span> * <span class="keyword">this</span>.audio.maxTime)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 当音频当前时间改变后，进度条也要改变</span></span><br><span class="line">onTimeupdate(res) &#123;</span><br><span class="line">  console.log(<span class="string">'timeupdate'</span>)</span><br><span class="line">  console.log(res)</span><br><span class="line">  <span class="keyword">this</span>.audio.currentTime = res.target.currentTime</span><br><span class="line">  <span class="keyword">this</span>.sliderTime = parseInt(<span class="keyword">this</span>.audio.currentTime / <span class="keyword">this</span>.audio.maxTime * <span class="number">100</span>)</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进度条格式化toolTip</span></span><br><span class="line">formatProcessToolTip(index = <span class="number">0</span>) &#123;</span><br><span class="line">  index = parseInt(<span class="keyword">this</span>.audio.maxTime / <span class="number">100</span> * index)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'进度条: '</span> + realFormatSecond(index)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="5-5-音频音量控制"><a href="#5-5-音频音量控制" class="headerlink" title="5.5. 音频音量控制"></a>5.5. 音频音量控制</h2><p>音频的音量控制和进度控制差不多，也是通过拖动滑动条，去修改<code>aduio.volume</code>属性值，此处不再啰嗦</p><h2 id="5-6-音频播放速度控制"><a href="#5-6-音频播放速度控制" class="headerlink" title="5.6. 音频播放速度控制"></a>5.6. 音频播放速度控制</h2><p>音频播放速度控制和进度控制差不多，也是点击按钮，去修改<code>aduio.playbackRate</code>属性值，该属性代表音量的大小，取值范围是0 - 1，用滑动条的时候，也是需要换算一下值，此处不再啰嗦</p><h2 id="5-7-音频静音控制"><a href="#5-7-音频静音控制" class="headerlink" title="5.7. 音频静音控制"></a>5.7. 音频静音控制</h2><p>静音的控制是点击按钮，去修改<code>aduio.muted</code>属性，该属性有两个值: true(静音)，false(不静音)。 注意，静音的时候，音频的进度条还是会继续往前走的。</p><h2 id="5-8-音频下载控制"><a href="#5-8-音频下载控制" class="headerlink" title="5.8. 音频下载控制"></a>5.8. 音频下载控制</h2><p>音频下载是一个a链接，记得加上<code>download</code>属性，不然浏览器会在新标签打开音频，而不是下载音频<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"url"</span> <span class="attr">v-show</span>=<span class="string">"!controlList.noDownload"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">class</span>=<span class="string">"download"</span> <span class="attr">download</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="5-9-个性化配置"><a href="#5-9-个性化配置" class="headerlink" title="5.9. 个性化配置"></a>5.9. 个性化配置</h2><p>音频的个性化配置有很多，大家可以自己扩展，通过父组件传递响应的值，可以做到个性化设置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> controlList: &#123;</span><br><span class="line">  <span class="comment">// 不显示下载</span></span><br><span class="line">  noDownload: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// 不显示静音</span></span><br><span class="line">  noMuted: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// 不显示音量条</span></span><br><span class="line">  noVolume: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// 不显示进度条</span></span><br><span class="line">  noProcess: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// 只能播放一个</span></span><br><span class="line">  onlyOnePlaying: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// 不要快进按钮</span></span><br><span class="line">  noSpeed: <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setControlList () &#123;</span><br><span class="line">    <span class="keyword">let</span> controlList = <span class="keyword">this</span>.theControlList.split(<span class="string">' '</span>)</span><br><span class="line">    controlList.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.controlList[item] !== <span class="literal">undefined</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.controlList[item] = <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>例如父组件这样<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"item in audios"</span> <span class="attr">:key</span>=<span class="string">"item.url"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">VueAudio</span> <span class="attr">:theUrl</span>=<span class="string">"item.url"</span> <span class="attr">:theControlList</span>=<span class="string">"item.controlList"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> VueAudio <span class="keyword">from</span> <span class="string">'./components/VueAudio'</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">'app'</span>,</span></span><br><span class="line"><span class="undefined">  components: &#123;</span></span><br><span class="line"><span class="undefined">    VueAudio</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined">      audios: [</span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="actionscript">          url: <span class="string">'http://devtest.qiniudn.com/secret base~.mp3'</span>,</span></span><br><span class="line"><span class="actionscript">          controlList: <span class="string">'onlyOnePlaying'</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="actionscript">          url: <span class="string">'http://devtest.qiniudn.com/回レ！雪月花.mp3'</span>,</span></span><br><span class="line"><span class="actionscript">          controlList: <span class="string">'noDownload noMuted onlyOnePlaying'</span></span></span><br><span class="line"><span class="undefined">        &#125;,&#123;</span></span><br><span class="line"><span class="actionscript">          url: <span class="string">'http://devtest.qiniudn.com/あっちゅ～ま青春!.mp3'</span>,</span></span><br><span class="line"><span class="actionscript">          controlList: <span class="string">'noDownload noVolume noMuted onlyOnePlaying'</span></span></span><br><span class="line"><span class="undefined">        &#125;,&#123;</span></span><br><span class="line"><span class="actionscript">          url: <span class="string">'http://devtest.qiniudn.com/Preparation.mp3'</span>,</span></span><br><span class="line"><span class="actionscript">          controlList: <span class="string">'noDownload noSpeed onlyOnePlaying'</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      ]</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="5-10-一点点ES6语法"><a href="#5-10-一点点ES6语法" class="headerlink" title="5.10. 一点点ES6语法"></a>5.10. 一点点ES6语法</h2><p>大多数时候，我们希望页面上播放一个音频时，其他音频可以暂停。<br><code>[...audios]</code>可以把一个类数组转化成数组，这个是我常用的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">onPlay (res) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">    <span class="keyword">this</span>.audio.playing = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">this</span>.audio.loading = <span class="literal">false</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>.controlList.onlyOnePlaying)&#123;</span><br><span class="line">      <span class="keyword">return</span> </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> target = res.target</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> audios = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'audio'</span>);</span><br><span class="line">    <span class="comment">// 如果设置了排他性，当前音频播放是，其他音频都要暂停</span></span><br><span class="line">    [...audios].forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(item !== target)&#123;</span><br><span class="line">        item.pause()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="5-11-完成后的文件"><a href="#5-11-完成后的文件" class="headerlink" title="5.11. 完成后的文件"></a>5.11. 完成后的文件</h2><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">//filename: VueAudio.vue</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"di main-wrap"</span> <span class="attr">v-loading</span>=<span class="string">"audio.waiting"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 这里设置了ref属性后，在vue组件中，就可以用this.$refs.audio来访问该dom元素 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">audio</span> <span class="attr">ref</span>=<span class="string">"audio"</span> <span class="attr">class</span>=<span class="string">"dn"</span> </span></span></span><br><span class="line"><span class="xml">    :src="url" :preload="audio.preload"</span></span><br><span class="line"><span class="xml">    @play="onPlay" </span></span><br><span class="line"><span class="xml">    @error="onError"</span></span><br><span class="line"><span class="xml">    @waiting="onWaiting"</span></span><br><span class="line"><span class="xml">    @pause="onPause" </span></span><br><span class="line"><span class="xml">    @timeupdate="onTimeupdate" </span></span><br><span class="line"><span class="xml">    @loadedmetadata="onLoadedmetadata"</span></span><br><span class="line"><span class="xml">    &gt;<span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"text"</span> @<span class="attr">click</span>=<span class="string">"startPlayOrPause"</span>&gt;</span></span><span class="template-variable">&#123;&#123;audio.playing | transPlayPause&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">v-show</span>=<span class="string">"!controlList.noSpeed"</span> <span class="attr">type</span>=<span class="string">"text"</span> @<span class="attr">click</span>=<span class="string">"changeSpeed"</span>&gt;</span></span><span class="template-variable">&#123;&#123;audio.speed | transSpeed&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">el-tag</span> <span class="attr">type</span>=<span class="string">"info"</span>&gt;</span></span><span class="template-variable">&#123;&#123; audio.currentTime | formatSecond&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">el-tag</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">el-slider</span> <span class="attr">v-show</span>=<span class="string">"!controlList.noProcess"</span> <span class="attr">v-model</span>=<span class="string">"sliderTime"</span> <span class="attr">:format-tooltip</span>=<span class="string">"formatProcessToolTip"</span> @<span class="attr">change</span>=<span class="string">"changeCurrentTime"</span> <span class="attr">class</span>=<span class="string">"slider"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-slider</span>&gt;</span></span></span><br><span class="line"><span class="xml">      </span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">el-tag</span> <span class="attr">type</span>=<span class="string">"info"</span>&gt;</span></span><span class="template-variable">&#123;&#123; audio.maxTime | formatSecond &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">el-tag</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">v-show</span>=<span class="string">"!controlList.noMuted"</span> <span class="attr">type</span>=<span class="string">"text"</span> @<span class="attr">click</span>=<span class="string">"startMutedOrNot"</span>&gt;</span></span><span class="template-variable">&#123;&#123;audio.muted | transMutedOrNot&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">el-slider</span> <span class="attr">v-show</span>=<span class="string">"!controlList.noVolume"</span> <span class="attr">v-model</span>=<span class="string">"volume"</span> <span class="attr">:format-tooltip</span>=<span class="string">"formatVolumeToolTip"</span> @<span class="attr">change</span>=<span class="string">"changeVolume"</span> <span class="attr">class</span>=<span class="string">"slider"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-slider</span>&gt;</span></span></span><br><span class="line"><span class="xml">      </span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"url"</span> <span class="attr">v-show</span>=<span class="string">"!controlList.noDownload"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">class</span>=<span class="string">"download"</span> <span class="attr">download</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span></span><br><span class="line"><span class="xml">  function realFormatSecond(second) &#123;</span></span><br><span class="line"><span class="xml">    var secondType = typeof second</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    if (secondType === 'number' || secondType === 'string') &#123;</span></span><br><span class="line"><span class="xml">      second = parseInt(second)</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">      var hours = Math.floor(second / 3600)</span></span><br><span class="line"><span class="xml">      second = second - hours * 3600</span></span><br><span class="line"><span class="xml">      var mimute = Math.floor(second / 60)</span></span><br><span class="line"><span class="xml">      second = second - mimute * 60</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">      return hours + ':' + ('0' + mimute).slice(-2) + ':' + ('0' + second).slice(-2)</span></span><br><span class="line"><span class="xml">    &#125; else &#123;</span></span><br><span class="line"><span class="xml">      return '0:00:00'</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  export default &#123;</span></span><br><span class="line"><span class="xml">    props: &#123;</span></span><br><span class="line"><span class="xml">      theUrl: &#123;</span></span><br><span class="line"><span class="xml">        type: String,</span></span><br><span class="line"><span class="xml">        required: true,</span></span><br><span class="line"><span class="xml">      &#125;,</span></span><br><span class="line"><span class="xml">      theSpeeds: &#123;</span></span><br><span class="line"><span class="xml">        type: Array,</span></span><br><span class="line"><span class="xml">        default () &#123;</span></span><br><span class="line"><span class="xml">          return [1, 1.5, 2]</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">      &#125;,</span></span><br><span class="line"><span class="xml">      theControlList: &#123;</span></span><br><span class="line"><span class="xml">        type: String,</span></span><br><span class="line"><span class="xml">        default: ''</span></span><br><span class="line"><span class="xml">      &#125;</span></span><br><span class="line"><span class="xml">    &#125;,</span></span><br><span class="line"><span class="xml">    name: 'VueAudio',</span></span><br><span class="line"><span class="xml">    data() &#123;</span></span><br><span class="line"><span class="xml">      return &#123;</span></span><br><span class="line"><span class="xml">        url: this.theUrl || 'http://devtest.qiniudn.com/secret base~.mp3',</span></span><br><span class="line"><span class="xml">        audio: &#123;</span></span><br><span class="line"><span class="xml">          currentTime: 0,</span></span><br><span class="line"><span class="xml">          maxTime: 0,</span></span><br><span class="line"><span class="xml">          playing: false,</span></span><br><span class="line"><span class="xml">          muted: false,</span></span><br><span class="line"><span class="xml">          speed: 1,</span></span><br><span class="line"><span class="xml">          waiting: true,</span></span><br><span class="line"><span class="xml">          preload: 'auto'</span></span><br><span class="line"><span class="xml">        &#125;,</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        sliderTime: 0,</span></span><br><span class="line"><span class="xml">        volume: 100,</span></span><br><span class="line"><span class="xml">        speeds: this.theSpeeds,</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        controlList: &#123;</span></span><br><span class="line"><span class="xml">          // 不显示下载</span></span><br><span class="line"><span class="xml">          noDownload: false,</span></span><br><span class="line"><span class="xml">          // 不显示静音</span></span><br><span class="line"><span class="xml">          noMuted: false,</span></span><br><span class="line"><span class="xml">          // 不显示音量条</span></span><br><span class="line"><span class="xml">          noVolume: false,</span></span><br><span class="line"><span class="xml">          // 不显示进度条</span></span><br><span class="line"><span class="xml">          noProcess: false,</span></span><br><span class="line"><span class="xml">          // 只能播放一个</span></span><br><span class="line"><span class="xml">          onlyOnePlaying: false,</span></span><br><span class="line"><span class="xml">          // 不要快进按钮</span></span><br><span class="line"><span class="xml">          noSpeed: false</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">      &#125;</span></span><br><span class="line"><span class="xml">    &#125;,</span></span><br><span class="line"><span class="xml">    methods: &#123;</span></span><br><span class="line"><span class="xml">      setControlList () &#123;</span></span><br><span class="line"><span class="xml">        let controlList = this.theControlList.split(' ')</span></span><br><span class="line"><span class="xml">        controlList.forEach((item) =&gt; &#123;</span></span><br><span class="line"><span class="xml">          if(this.controlList[item] !== undefined)&#123;</span></span><br><span class="line"><span class="xml">            this.controlList[item] = true</span></span><br><span class="line"><span class="xml">          &#125;</span></span><br><span class="line"><span class="xml">        &#125;)</span></span><br><span class="line"><span class="xml">      &#125;,</span></span><br><span class="line"><span class="xml">      changeSpeed() &#123;</span></span><br><span class="line"><span class="xml">        let index = this.speeds.indexOf(this.audio.speed) + 1</span></span><br><span class="line"><span class="xml">        this.audio.speed = this.speeds[index % this.speeds.length]</span></span><br><span class="line"><span class="xml">        this.$refs.audio.playbackRate = this.audio.speed</span></span><br><span class="line"><span class="xml">      &#125;,</span></span><br><span class="line"><span class="xml">      startMutedOrNot() &#123;</span></span><br><span class="line"><span class="xml">        this.$refs.audio.muted = !this.$refs.audio.muted</span></span><br><span class="line"><span class="xml">        this.audio.muted = this.$refs.audio.muted</span></span><br><span class="line"><span class="xml">      &#125;,</span></span><br><span class="line"><span class="xml">      // 音量条toolTip</span></span><br><span class="line"><span class="xml">      formatVolumeToolTip(index) &#123;</span></span><br><span class="line"><span class="xml">        return '音量条: ' + index</span></span><br><span class="line"><span class="xml">      &#125;,</span></span><br><span class="line"><span class="xml">      // 进度条toolTip</span></span><br><span class="line"><span class="xml">      formatProcessToolTip(index = 0) &#123;</span></span><br><span class="line"><span class="xml">        index = parseInt(this.audio.maxTime / 100 * index)</span></span><br><span class="line"><span class="xml">        return '进度条: ' + realFormatSecond(index)</span></span><br><span class="line"><span class="xml">      &#125;,</span></span><br><span class="line"><span class="xml">      // 音量改变</span></span><br><span class="line"><span class="xml">      changeVolume(index = 0) &#123;</span></span><br><span class="line"><span class="xml">        this.$refs.audio.volume = index / 100</span></span><br><span class="line"><span class="xml">        this.volume = index</span></span><br><span class="line"><span class="xml">      &#125;,</span></span><br><span class="line"><span class="xml">      // 播放跳转</span></span><br><span class="line"><span class="xml">      changeCurrentTime(index) &#123;</span></span><br><span class="line"><span class="xml">        this.$refs.audio.currentTime = parseInt(index / 100 * this.audio.maxTime)</span></span><br><span class="line"><span class="xml">      &#125;,</span></span><br><span class="line"><span class="xml">      startPlayOrPause() &#123;</span></span><br><span class="line"><span class="xml">        return this.audio.playing ? this.pausePlay() : this.startPlay()</span></span><br><span class="line"><span class="xml">      &#125;,</span></span><br><span class="line"><span class="xml">      // 开始播放</span></span><br><span class="line"><span class="xml">      startPlay() &#123;</span></span><br><span class="line"><span class="xml">        this.$refs.audio.play()</span></span><br><span class="line"><span class="xml">      &#125;,</span></span><br><span class="line"><span class="xml">      // 暂停</span></span><br><span class="line"><span class="xml">      pausePlay() &#123;</span></span><br><span class="line"><span class="xml">        this.$refs.audio.pause()</span></span><br><span class="line"><span class="xml">      &#125;,</span></span><br><span class="line"><span class="xml">      // 当音频暂停</span></span><br><span class="line"><span class="xml">      onPause () &#123;</span></span><br><span class="line"><span class="xml">        this.audio.playing = false</span></span><br><span class="line"><span class="xml">      &#125;,</span></span><br><span class="line"><span class="xml">      // 当发生错误, 就出现loading状态</span></span><br><span class="line"><span class="xml">      onError () &#123;</span></span><br><span class="line"><span class="xml">        this.audio.waiting = true</span></span><br><span class="line"><span class="xml">      &#125;,</span></span><br><span class="line"><span class="xml">      // 当音频开始等待</span></span><br><span class="line"><span class="xml">      onWaiting (res) &#123;</span></span><br><span class="line"><span class="xml">        console.log(res)</span></span><br><span class="line"><span class="xml">      &#125;,</span></span><br><span class="line"><span class="xml">      // 当音频开始播放</span></span><br><span class="line"><span class="xml">      onPlay (res) &#123;</span></span><br><span class="line"><span class="xml">        console.log(res)</span></span><br><span class="line"><span class="xml">        this.audio.playing = true</span></span><br><span class="line"><span class="xml">        this.audio.loading = false</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        if(!this.controlList.onlyOnePlaying)&#123;</span></span><br><span class="line"><span class="xml">          return </span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        let target = res.target</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        let audios = document.getElementsByTagName('audio');</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        [...audios].forEach((item) =&gt; &#123;</span></span><br><span class="line"><span class="xml">          if(item !== target)&#123;</span></span><br><span class="line"><span class="xml">            item.pause()</span></span><br><span class="line"><span class="xml">          &#125;</span></span><br><span class="line"><span class="xml">        &#125;)</span></span><br><span class="line"><span class="xml">      &#125;,</span></span><br><span class="line"><span class="xml">      // 当timeupdate事件大概每秒一次，用来更新音频流的当前播放时间</span></span><br><span class="line"><span class="xml">      onTimeupdate(res) &#123;</span></span><br><span class="line"><span class="xml">        // console.log('timeupdate')</span></span><br><span class="line"><span class="xml">        // console.log(res)</span></span><br><span class="line"><span class="xml">        this.audio.currentTime = res.target.currentTime</span></span><br><span class="line"><span class="xml">        this.sliderTime = parseInt(this.audio.currentTime / this.audio.maxTime * 100)</span></span><br><span class="line"><span class="xml">      &#125;,</span></span><br><span class="line"><span class="xml">      // 当加载语音流元数据完成后，会触发该事件的回调函数</span></span><br><span class="line"><span class="xml">      // 语音元数据主要是语音的长度之类的数据</span></span><br><span class="line"><span class="xml">      onLoadedmetadata(res) &#123;</span></span><br><span class="line"><span class="xml">        console.log('loadedmetadata')</span></span><br><span class="line"><span class="xml">        console.log(res)</span></span><br><span class="line"><span class="xml">        this.audio.waiting = false</span></span><br><span class="line"><span class="xml">        this.audio.maxTime = parseInt(res.target.duration)</span></span><br><span class="line"><span class="xml">      &#125;</span></span><br><span class="line"><span class="xml">    &#125;,</span></span><br><span class="line"><span class="xml">    filters: &#123;</span></span><br><span class="line"><span class="xml">      formatSecond(second = 0) &#123;</span></span><br><span class="line"><span class="xml">        return realFormatSecond(second)</span></span><br><span class="line"><span class="xml">      &#125;,</span></span><br><span class="line"><span class="xml">      transPlayPause(value) &#123;</span></span><br><span class="line"><span class="xml">        return value ? '暂停' : '播放'</span></span><br><span class="line"><span class="xml">      &#125;,</span></span><br><span class="line"><span class="xml">      transMutedOrNot(value) &#123;</span></span><br><span class="line"><span class="xml">        return value ? '放音' : '静音'</span></span><br><span class="line"><span class="xml">      &#125;,</span></span><br><span class="line"><span class="xml">      transSpeed(value) &#123;</span></span><br><span class="line"><span class="xml">        return '快进: x' + value</span></span><br><span class="line"><span class="xml">      &#125;</span></span><br><span class="line"><span class="xml">    &#125;,</span></span><br><span class="line"><span class="xml">    created() &#123;</span></span><br><span class="line"><span class="xml">      this.setControlList()</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- Add "scoped" attribute to limit CSS to this component only --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="undefined"></span></span></span><br><span class="line"><span class="xml">  .main-wrap&#123;</span></span><br><span class="line"><span class="xml">    padding: 10px 15px;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">  .slider &#123;</span></span><br><span class="line"><span class="xml">    display: inline-block;</span></span><br><span class="line"><span class="xml">    width: 100px;</span></span><br><span class="line"><span class="xml">    position: relative;</span></span><br><span class="line"><span class="xml">    top: 14px;</span></span><br><span class="line"><span class="xml">    margin-left: 15px;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  .di &#123;</span></span><br><span class="line"><span class="xml">    display: inline-block;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  .download &#123;</span></span><br><span class="line"><span class="xml">    color: #409EFF;</span></span><br><span class="line"><span class="xml">    margin-left: 15px;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  .dn&#123;</span></span><br><span class="line"><span class="xml">    display: none;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h1 id="6-感谢"><a href="#6-感谢" class="headerlink" title="6. 感谢"></a>6. 感谢</h1><ul><li>如果你需要一个小型的vue音乐播放器，你可以试试<a href="https://github.com/SevenOutman/vue-aplayer" target="_blank" rel="noopener">vue-aplayer</a>, 该播放器不仅仅支持vue组件，非Vue的也支持，你可以看看他们的<a href="https://sevenoutman.github.io/vue-aplayer/demo" target="_blank" rel="noopener">demo</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-简介&quot;&gt;&lt;a href=&quot;#1-简介&quot; class=&quot;headerlink&quot; title=&quot;1. 简介&quot;&gt;&lt;/a&gt;1. 简介&lt;/h1&gt;&lt;h2 id=&quot;1-1-相关技术&quot;&gt;&lt;a href=&quot;#1-1-相关技术&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
    
      <category term="audio" scheme="https://wdd.js.org/tags/audio/"/>
    
      <category term="vue" scheme="https://wdd.js.org/tags/vue/"/>
    
      <category term="ElementUI" scheme="https://wdd.js.org/tags/ElementUI/"/>
    
  </entry>
  
  <entry>
    <title>如何从浏览器导出HTTPS证书</title>
    <link href="https://wdd.js.org/export-https-certificate-in-browser.html"/>
    <id>https://wdd.js.org/export-https-certificate-in-browser.html</id>
    <published>2018-02-09T05:33:38.000Z</published>
    <updated>2018-02-09T06:00:09.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>以谷歌浏览器为栗子</p></blockquote><h1 id="1-打开一个HTTPS网站，例如https-segmentfault-com"><a href="#1-打开一个HTTPS网站，例如https-segmentfault-com" class="headerlink" title="1. 打开一个HTTPS网站，例如https://segmentfault.com/"></a>1. 打开一个HTTPS网站，例如<a href="https://segmentfault.com/" target="_blank" rel="noopener">https://segmentfault.com/</a></h1><h1 id="2-F12-gt-Secutity-gt-点击View-certificate"><a href="#2-F12-gt-Secutity-gt-点击View-certificate" class="headerlink" title="2. F12 -&gt; Secutity -&gt; 点击View certificate"></a>2. F12 -&gt; Secutity -&gt; 点击View certificate</h1><p><img src="http://p3alsaatj.bkt.clouddn.com/20180209133438_49mTFN_Screenshot.jpeg" alt=""></p><h1 id="3-详细信息-gt-复制到文件"><a href="#3-详细信息-gt-复制到文件" class="headerlink" title="3. 详细信息 -&gt; 复制到文件"></a>3. 详细信息 -&gt; 复制到文件</h1><p><img src="http://p3alsaatj.bkt.clouddn.com/20180209133453_9nA0g1_Screenshot.jpeg" alt=""></p><h1 id="4-证书导出向导"><a href="#4-证书导出向导" class="headerlink" title="4. 证书导出向导"></a>4. 证书导出向导</h1><p><img src="http://p3alsaatj.bkt.clouddn.com/20180209133502_rgjg2i_Screenshot.jpeg" alt=""><br><img src="http://p3alsaatj.bkt.clouddn.com/20180209133512_y7Xayk_Screenshot.jpeg" alt=""></p><p>这一步要给证书文件起个名字，后缀名就不用了。<br><img src="http://p3alsaatj.bkt.clouddn.com/20180209133527_7TnRGi_Screenshot.jpeg" alt=""><br><img src="http://p3alsaatj.bkt.clouddn.com/20180209133536_UqAHTV_Screenshot.jpeg" alt=""><br><img src="http://p3alsaatj.bkt.clouddn.com/20180209133544_3agGIU_Screenshot.jpeg" alt=""></p><p>然后在你的桌面上就多了一个证书文件。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;以谷歌浏览器为栗子&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-打开一个HTTPS网站，例如https-segmentfault-com&quot;&gt;&lt;a href=&quot;#1-打开一个HTTPS网站，例如https-segmentfault-com
      
    
    </summary>
    
    
      <category term="https" scheme="https://wdd.js.org/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>奇技淫巧：css实现整个表单只读 form readonly</title>
    <link href="https://wdd.js.org/css-form-readonly.html"/>
    <id>https://wdd.js.org/css-form-readonly.html</id>
    <published>2018-02-09T05:31:38.000Z</published>
    <updated>2018-02-09T05:59:32.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一般的方法往往给表单的各个input、select等加上readonly，但是这个方法有很多缺点。此处就不一一赘述。</p></blockquote><p>我说的方法只需要给表单加上一个类，就可以让表单只读。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-readonly"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><h1 id="1-方法1-用-before给form做个看不见的蒙版，遮住下面所有的元素，使之不响应任何事件"><a href="#1-方法1-用-before给form做个看不见的蒙版，遮住下面所有的元素，使之不响应任何事件" class="headerlink" title="1. 方法1: 用:before给form做个看不见的蒙版，遮住下面所有的元素，使之不响应任何事件"></a>1. 方法1: 用:before给form做个看不见的蒙版，遮住下面所有的元素，使之不响应任何事件</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.form-readonly</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.form-readonly</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-方法2-用pointer-events-none-让所有事件穿透form"><a href="#2-方法2-用pointer-events-none-让所有事件穿透form" class="headerlink" title="2. 方法2: 用pointer-events:none, 让所有事件穿透form"></a>2. 方法2: 用pointer-events:none, 让所有事件穿透form</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.form-readonly</span>&#123;</span><br><span class="line">    <span class="attribute">pointer-events</span>:none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于pointer-events属性，可以看看这个介绍：<a href="https://segmentfault.com/a/1190000011182335" target="_blank" rel="noopener">https://segmentfault.com/a/1190000011182335</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;一般的方法往往给表单的各个input、select等加上readonly，但是这个方法有很多缺点。此处就不一一赘述。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我说的方法只需要给表单加上一个类，就可以让表单只读。&lt;br&gt;&lt;figure class=
      
    
    </summary>
    
    
      <category term="表单" scheme="https://wdd.js.org/tags/%E8%A1%A8%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title>你不知道的JSON.stringify()妙用</title>
    <link href="https://wdd.js.org/json-stringify-powerful.html"/>
    <id>https://wdd.js.org/json-stringify-powerful.html</id>
    <published>2018-02-09T05:27:15.000Z</published>
    <updated>2018-02-09T07:46:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-语法"><a href="#1-语法" class="headerlink" title="1. 语法"></a>1. 语法</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">JSON</span><span class="selector-class">.stringify</span>(<span class="selector-tag">value</span><span class="selector-attr">[, replacer[, space]</span>])</span><br></pre></td></tr></table></figure><p>一般用法：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var user = &#123;name: <span class="string">'andy'</span>, isDead: false, age: <span class="number">11</span>, addr: <span class="string">'shanghai'</span>&#125;;</span><br><span class="line"></span><br><span class="line">JSON.stringify(user);</span><br><span class="line"></span><br><span class="line"><span class="string">"&#123;"</span>name<span class="string">":"</span>andy<span class="string">","</span>isDead<span class="string">":false,"</span>age<span class="string">":11,"</span>add<span class="string">r":"</span>shanghai<span class="string">"&#125;"</span></span><br></pre></td></tr></table></figure></p><h1 id="2-扩展用法"><a href="#2-扩展用法" class="headerlink" title="2. 扩展用法"></a>2. 扩展用法</h1><h2 id="2-1-replacer"><a href="#2-1-replacer" class="headerlink" title="2.1. replacer"></a>2.1. replacer</h2><p>replacer可以是<code>函数</code>或者是<code>数组</code>。</p><p><code>功能1: 改变属性值</code><br>将isDead属性的值翻译成0或1，0对应false,1对应true<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var user = &#123;name: <span class="string">'andy'</span>, isDead: false, age: <span class="number">11</span>, addr: <span class="string">'shanghai'</span>&#125;;</span><br><span class="line"></span><br><span class="line">JSON.stringify(user, <span class="keyword">function</span>(key, value)&#123;</span><br><span class="line">    <span class="keyword">if</span>(key === <span class="string">'isDead'</span>)&#123;</span><br><span class="line">        return value === true ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    return value;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="string">"&#123;"</span>name<span class="string">":"</span>andy<span class="string">","</span>isDead<span class="string">":0,"</span>age<span class="string">":11,"</span>add<span class="string">r":"</span>shanghai<span class="string">"&#125;"</span></span><br></pre></td></tr></table></figure></p><p><code>功能2：删除某个属性</code><br>将isDead属性删除，如果replacer的返回值是<code>undefined</code>,那么该属性会被删除。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var user = &#123;name: <span class="string">'andy'</span>, isDead: false, age: <span class="number">11</span>, addr: <span class="string">'shanghai'</span>&#125;;</span><br><span class="line"></span><br><span class="line">JSON.stringify(user, function(key, value)&#123;</span><br><span class="line">    <span class="keyword">if</span>(key === <span class="string">'isDead'</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> undefined;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="string">"&#123;"</span>name<span class="string">":"</span>andy<span class="string">","</span>age<span class="string">":11,"</span>add<span class="string">r":"</span>shanghai<span class="string">"&#125;"</span></span><br></pre></td></tr></table></figure></p><p><code>功能3: 通过数组过滤某些属性</code><br>只需要name属性和addr属性，其他不要。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var user = &#123;name: <span class="string">'andy'</span>, isDead: false, age: <span class="number">11</span>, addr: <span class="string">'shanghai'</span>&#125;;</span><br><span class="line"></span><br><span class="line">JSON.stringify(user, [<span class="string">'name'</span>, <span class="string">'addr'</span>]);</span><br><span class="line"></span><br><span class="line"><span class="string">"&#123;"</span>name<span class="string">":"</span>andy<span class="string">","</span>add<span class="string">r":"</span>shanghai<span class="string">"&#125;"</span></span><br></pre></td></tr></table></figure><h2 id="2-2-space"><a href="#2-2-space" class="headerlink" title="2.2. space"></a>2.2. space</h2><p>space可以是<code>数字</code>或者是<code>字符串</code>, 如果是数字则表示属性名前加上空格符号的数量，如果是字符串，则直接在属性名前加上该字符串。</p><p><code>功能1: 给输出属性前加上n个空格</code><br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var</span> user = &#123;name: <span class="string">'andy'</span>, isDead: <span class="literal">false</span>, age: <span class="number">11</span>, addr: <span class="string">'shanghai'</span>&#125;;</span><br><span class="line"></span><br><span class="line">JSON.stringify(user, <span class="built_in">null</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="string">"&#123;</span></span><br><span class="line"><span class="string">    "</span>name<span class="string">": "</span>andy<span class="string">",</span></span><br><span class="line"><span class="string">    "</span>isDead<span class="string">": false,</span></span><br><span class="line"><span class="string">    "</span>age<span class="string">": 11,</span></span><br><span class="line"><span class="string">    "</span>addr<span class="string">": "</span>shanghai<span class="string">"</span></span><br><span class="line"><span class="string">&#125;"</span></span><br></pre></td></tr></table></figure></p><p><code>功能2: tab格式化输出</code><br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">var</span> user = &#123;name: <span class="string">'andy'</span>, isDead: <span class="literal">false</span>, age: <span class="number">11</span>, addr: <span class="string">'shanghai'</span>&#125;;</span><br><span class="line"></span><br><span class="line">JSON.stringify(user, <span class="built_in">null</span>, <span class="string">'\t'</span>);</span><br><span class="line"><span class="string">"&#123;</span></span><br><span class="line"><span class="string">"</span>name<span class="string">": "</span>andy<span class="string">",</span></span><br><span class="line"><span class="string">"</span>isDead<span class="string">": false,</span></span><br><span class="line"><span class="string">"</span>age<span class="string">": 11,</span></span><br><span class="line"><span class="string">"</span>addr<span class="string">": "</span>shanghai<span class="string">"</span></span><br><span class="line"><span class="string">&#125;"</span></span><br></pre></td></tr></table></figure></p><p><code>功能3： 搞笑</code><br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">JSON.stringify(user, <span class="literal">null</span>, 'good');</span><br><span class="line"><span class="string">"&#123;</span></span><br><span class="line">good<span class="string">"name"</span>: <span class="string">"andy"</span>,</span><br><span class="line">good<span class="string">"isDead"</span>: false,</span><br><span class="line">good<span class="string">"age"</span>: <span class="number">11</span>,</span><br><span class="line">good<span class="string">"addr"</span>: <span class="string">"shanghai"</span></span><br><span class="line">&#125;<span class="string">"</span></span><br></pre></td></tr></table></figure></p><h2 id="2-3-深拷贝"><a href="#2-3-深拷贝" class="headerlink" title="2.3. 深拷贝"></a>2.3. 深拷贝</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> user = &#123;<span class="attr">name</span>: <span class="string">'andy'</span>, <span class="attr">isDead</span>: <span class="literal">false</span>, <span class="attr">age</span>: <span class="number">11</span>, <span class="attr">addr</span>: <span class="string">'shanghai'</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> temp = <span class="built_in">JSON</span>.stringify(user);</span><br><span class="line"><span class="keyword">var</span> user2 = <span class="built_in">JSON</span>.parse(temp);</span><br></pre></td></tr></table></figure><h1 id="3-其他"><a href="#3-其他" class="headerlink" title="3. 其他"></a>3. 其他</h1><p>JSON.parse() 其实也是支持第二个参数的。功能类似于JSON.stringify的第二个参数的功能。</p><h1 id="4-参考"><a href="#4-参考" class="headerlink" title="4. 参考"></a>4. 参考</h1><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify" target="_blank" rel="noopener">MDN JSON.stringify()</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-语法&quot;&gt;&lt;a href=&quot;#1-语法&quot; class=&quot;headerlink&quot; title=&quot;1. 语法&quot;&gt;&lt;/a&gt;1. 语法&lt;/h1&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
    
      <category term="json" scheme="https://wdd.js.org/tags/json/"/>
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>洞香春</title>
  
  <subtitle>洞香春以名士荟萃、谈论国事、交流思想而著称于当时列国 --《大秦帝国》</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wdd.js.org/"/>
  <updated>2018-02-08T01:30:29.000Z</updated>
  <id>https://wdd.js.org/</id>
  
  <author>
    <name>王端端</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Nodejs Express dockerfile最佳实践</title>
    <link href="https://wdd.js.org/nodejs-best-dockerfile.html"/>
    <id>https://wdd.js.org/nodejs-best-dockerfile.html</id>
    <published>2018-02-08T01:28:04.000Z</published>
    <updated>2018-02-08T01:30:29.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="少啰嗦，先看代码"><a href="#少啰嗦，先看代码" class="headerlink" title="少啰嗦，先看代码"></a>少啰嗦，先看代码</h1><h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"xxx"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.0.0"</span>,</span><br><span class="line">  <span class="attr">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"node ./bin/www"</span>,</span><br><span class="line">    <span class="attr">"forever"</span>: <span class="string">"node_modules/forever/bin/forever bin/www"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"async"</span>: <span class="string">"0.9.0"</span>,</span><br><span class="line">    <span class="attr">"body-parser"</span>: <span class="string">"1.13.2"</span>,</span><br><span class="line">    <span class="attr">"compression"</span>: <span class="string">"1.6.2"</span>,</span><br><span class="line">    <span class="attr">"config"</span>: <span class="string">"1.12.0"</span>,</span><br><span class="line">    <span class="attr">"connect-multiparty"</span>: <span class="string">"2.0.0"</span>,</span><br><span class="line">    <span class="attr">"cookie-parser"</span>: <span class="string">"1.3.5"</span>,</span><br><span class="line">    <span class="attr">"debug"</span>: <span class="string">"2.2.0"</span>,</span><br><span class="line">    <span class="attr">"ejs"</span>: <span class="string">"2.3.3"</span>,</span><br><span class="line">    <span class="attr">"express"</span>: <span class="string">"4.13.1"</span>,</span><br><span class="line">    <span class="attr">"forever"</span>: <span class="string">"0.15.3"</span>,</span><br><span class="line">    <span class="attr">"http-proxy-middleware"</span>: <span class="string">"0.17.3"</span>,</span><br><span class="line">    <span class="attr">"log4js"</span>: <span class="string">"0.6.24"</span>,</span><br><span class="line">    <span class="attr">"serve-favicon"</span>: <span class="string">"2.3.0"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="dockerfile"><a href="#dockerfile" class="headerlink" title="dockerfile"></a>dockerfile</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">9.2</span>.<span class="number">1</span>-alpine</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk update &amp;&amp; apk add bash tzdata \</span></span><br><span class="line"><span class="bash">    &amp;&amp; cp -r -f /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">WORKDIR /app</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">COPY package.json yarn.lock /app/</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">RUN yarn install --production &amp;&amp; yarn cache clean</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">COPY . /app</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">EXPOSE 8088</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">CMD yarn run server</span></span><br></pre></td></tr></table></figure><h1 id="分析原理"><a href="#分析原理" class="headerlink" title="分析原理"></a>分析原理</h1><ul><li>使用alpine的nodejs镜像，显著缩小nodejs镜像大小</li><li>node:9.2.1-alpine自带yarn 和 npm</li><li>copy package到run npm i到copy . /app, 这样的顺序可以充分使用镜像缓存</li></ul><p><code>修改过后，对比之前通过jenkins打包时间从10分钟缩短到7.4秒</code></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://rock-it.pl/how-to-write-excellent-dockerfiles/" target="_blank" rel="noopener">How to write excellent Dockerfiles</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;少啰嗦，先看代码&quot;&gt;&lt;a href=&quot;#少啰嗦，先看代码&quot; class=&quot;headerlink&quot; title=&quot;少啰嗦，先看代码&quot;&gt;&lt;/a&gt;少啰嗦，先看代码&lt;/h1&gt;&lt;h2 id=&quot;package-json&quot;&gt;&lt;a href=&quot;#package-json&quot; cla
      
    
    </summary>
    
    
      <category term="nodejs" scheme="https://wdd.js.org/tags/nodejs/"/>
    
      <category term="docker" scheme="https://wdd.js.org/tags/docker/"/>
    
      <category term="dockerfile" scheme="https://wdd.js.org/tags/dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>表单验证工具 jquery-validation Vs Parsley</title>
    <link href="https://wdd.js.org/jquery-validation-vs-parsley.html"/>
    <id>https://wdd.js.org/jquery-validation-vs-parsley.html</id>
    <published>2018-02-08T01:26:00.000Z</published>
    <updated>2018-02-08T01:26:55.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本对比"><a href="#基本对比" class="headerlink" title="基本对比"></a>基本对比</h1><table><thead><tr><th>名称</th><th>gitbub地址</th><th>stars</th><th>文档地址</th></tr></thead><tbody><tr><td>jquery-validation</td><td><a href="https://github.com/jquery-validation/jquery-validation" target="_blank" rel="noopener">这里</a></td><td>7859(截止7/21)</td><td><a href="http://www.runoob.com/jquery/jquery-plugin-validate.html" target="_blank" rel="noopener">这里</a></td></tr><tr><td>Parsley.js</td><td><a href="https://github.com/guillaumepotier/Parsley.js" target="_blank" rel="noopener">这里</a></td><td>7979(截止7/21)</td><td><a href="http://parsleyjs.org/" target="_blank" rel="noopener">这里</a></td></tr></tbody></table><h1 id="强烈推荐Parsley"><a href="#强烈推荐Parsley" class="headerlink" title="强烈推荐Parsley"></a>强烈推荐Parsley</h1><p>这两个表格验证插件我都用过，最早用的是jqueryValidataion, 现在用Parsley。<br>这两个插件都<code>依赖jQuery</code>。但是如果说那个跟好用的话，真心推荐Parsley。Parsley<code>号称不用写一行代码就能验证表单</code>。另外从star的数量上也可以看出来Parsley更流行。而且Parsley支持在html中就将错误信息定义在里面。</p><p>Parsley优势</p><ul><li><code>直观的DOM API</code>: 像没有其他表单验证库一样，只需用HTML格式写入您的要求，Parsley将会做剩下的所有事情！不需要编写一行代码来验证表单。</li><li><code>动态表单验证</code>： parsley现在更聪明，它会自动检测您的表单的修改并相应地调整其验证。简单地添加，删除或编辑字段，parsley将会自动验证。</li><li>还有好多… </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line"> &lt;input type=<span class="string">"text"</span> required=<span class="string">""</span> </span><br><span class="line"> data-parsley-checkphonenum </span><br><span class="line"> data-parsley-checkphonenum-message=<span class="string">"手机号码格式有误"</span> </span><br><span class="line"> name=<span class="string">"phoneNum"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-control"</span> </span><br><span class="line"> placeholder=<span class="string">"请填写手机号"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/验证表单</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 注意 checkphonenum是我自定义的验证规则，添加到parsley里面的</span></span><br><span class="line"><span class="regexp">$('from').parsley().validate();</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基本对比&quot;&gt;&lt;a href=&quot;#基本对比&quot; class=&quot;headerlink&quot; title=&quot;基本对比&quot;&gt;&lt;/a&gt;基本对比&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;gitbub地址&lt;/th&gt;
&lt;th&gt;stars&lt;/th&gt;
      
    
    </summary>
    
    
      <category term="jQuery" scheme="https://wdd.js.org/tags/jQuery/"/>
    
      <category term="Parsley" scheme="https://wdd.js.org/tags/Parsley/"/>
    
  </entry>
  
  <entry>
    <title>【笔记】 程序员修炼之道 从小工到专家</title>
    <link href="https://wdd.js.org/how-to-be-a-better-programer.html"/>
    <id>https://wdd.js.org/how-to-be-a-better-programer.html</id>
    <published>2018-02-08T01:21:11.000Z</published>
    <updated>2018-02-08T01:22:00.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>1 关心你的技艺</li><li>2 思考你的工作</li><li>3 <code>在所有的弱点中，最大的弱点就是害怕暴露弱点</code></li><li>4 提供各种选择，不要找各种蹩脚的借口</li><li>5 不要容忍破窗户</li><li>6 作变化的催化剂</li><li>7 记住大方向</li><li>8 让质量成为需求问题</li><li>9 知识也会贬值，定期为你的知识投资<ul><li>每年至少学习一种编程语言</li><li>每季度至少读一本技术书籍</li><li>也要阅读非技术书籍</li><li>上课</li><li>上网</li><li>玩玩UNIX</li><li>跟上潮流</li></ul></li><li>10 批判的分析你读到的和听到的</li><li>11 我相信，被打量要被忽略要好</li><li>12 你说什么和<code>你怎样说</code>同样重要</li><li>13 <code>不要重复你自己, 也不要重复别人</code></li><li>14 糟糕的代码才需要许多注释</li><li>15 让复用变得容易</li><li>16 消除无关事物之间的影响 (解耦性，正交性)</li><li>17 编码<ul><li>让你的代码保持解耦</li><li>避免使用全局数据</li><li>避免编写相似的函数</li></ul></li><li>18 <code>如果某个想法是你唯一的想法，再没有什么比这更危险的事情了</code></li><li>19 不存在最终决定</li><li>20 稍后就是永不</li><li>21 用曳光弹找到目标</li><li>22 语言的界限就是一个人世界的界限</li><li>23 靠近问题编程</li><li>24 估算，避免发生意外</li><li>25 用纯文本保存知识</li><li>26 利用命令<code>shells</code>的力量</li><li>27 用好一种编辑器，彻底了解它，确保你的编辑器能在所有平台上使用 (我的最爱是<code>sublime</code>)<ul><li>可配置</li><li>可扩展</li><li>可编辑</li><li>语法高亮</li><li>自动完成</li><li>自动缩进</li><li>跨平台</li><li>启动快</li><li>占用内存小</li><li>漂亮</li></ul></li><li>28 总是使用源码控制</li><li>29 要修正问题，而不是发出职责 (关于调试，bug)</li><li>30 不要恐慌 (我曾经差点因为上线的之前的重大问题产生辞职的想法)</li><li>31 不要假定，要证明</li><li>32 <code>你不可能写出完美的软件</code></li><li>33 如果它不可能发生，用断言确保它不会发生</li><li>34 将异常用于异常的问题</li><li>35 要有始有终</li><li>36 <code>使模块之间的耦合减至最小</code></li><li>37 <code>要配置，不要集成</code> (可配置)</li><li>38 将抽象放进代码，将细节放进元数据</li><li>39 分析工作流，以改善并发性</li><li>40 用服务进行设计</li><li>41 总是为并发进行设计</li><li>42 将视图与模型分离</li><li>43 小心那些替你编写大量代码的工具，除非你了解它在做什么</li><li>44 不要靠巧合编程</li><li>45 估算你算法的阶</li><li>46 早重构，常重构</li><li>47 为测试而设计</li><li>48 不要搜集需求，挖掘他们</li><li>49 与用户一起工作，以像用户一样思考</li><li>50 需求不是架构，需求不是设计，也不是用户界面，而是需求。</li><li>51 <code>抽象比细节活的更长久</code></li><li>52 <code>使用项目词汇表</code> (名不正则言不顺)</li><li>53 昂贵的工具不一定能制作出更好的设计</li><li>54 早测试，常测试，自动测试</li><li>55 要到通过全部测试，编码才算完成</li><li>56 把网收紧，一个bug只抓一次</li><li>57 温和的超出用户的期望</li><li>58 在你的作品上签名</li><li>59 建立自己的藏书库</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;1 关心你的技艺&lt;/li&gt;
&lt;li&gt;2 思考你的工作&lt;/li&gt;
&lt;li&gt;3 &lt;code&gt;在所有的弱点中，最大的弱点就是害怕暴露弱点&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;4 提供各种选择，不要找各种蹩脚的借口&lt;/li&gt;
&lt;li&gt;5 不要容忍破窗户&lt;/li&gt;
&lt;li&gt;6
      
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://wdd.js.org/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>代码整洁之道 - 有意义的命名</title>
    <link href="https://wdd.js.org/clean-code-method.html"/>
    <id>https://wdd.js.org/clean-code-method.html</id>
    <published>2018-02-08T01:17:54.000Z</published>
    <updated>2018-02-08T01:19:56.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在小朱元璋出生一个月后，父母为他取了一个名字（元时惯例）：朱重八，这个名字也可以叫做朱八八。我们这里再介绍一下，朱重八家族的名字，都很有特点。<br>朱重八高祖名字：朱百六；<br>朱重八曾祖名字：朱四九；<br>朱重八祖父名字：朱初一；<br>他的父亲我们介绍过了，叫朱五四。<br>取这样的名字不是因为朱家是搞数学的，而是因为在元朝，老百姓如果不能上学和当官就没有名字，只能以父母年龄相加或者出生的日期命名。（登记户口的人一定会眼花）–《明朝那些事儿》</p></blockquote><p>那么问题来了，朱四九和朱百六是什么关系？ 你可能马上懵逼了。所以说：<code>命名不仅仅是一种科学，更是一种艺术</code>。</p><h1 id="名副其实"><a href="#名副其实" class="headerlink" title="名副其实"></a>名副其实</h1><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> d; <span class="comment">// 分手的时间，以天计算</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> daysAfterBrokeUp; <span class="comment">// 分手以后，以天计算</span></span><br></pre></td></tr></table></figure><h1 id="避免误导"><a href="#避免误导" class="headerlink" title="避免误导"></a>避免误导</h1><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> nameList = <span class="string">'wdd'</span>; <span class="comment">// List一般暗指数据是数组，而不应该赋值给字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> nameList = [<span class="string">'wdd'</span>,<span class="string">'ddw'</span>,<span class="string">'dwd'</span>]; <span class="comment">// </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> ill10o = <span class="number">10</span>; <span class="comment">//千万不要把i,1,l,0,o,O放在一起，傻傻分不清楚</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> illOne = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h1 id="做有意义的区分"><a href="#做有意义的区分" class="headerlink" title="做有意义的区分"></a>做有意义的区分</h1><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> userData, userInfo; <span class="comment">// Data和Info, 有什么区别？？？？, 不要再用data和info这样模糊不清的单词了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> userProfile, userAcount</span><br></pre></td></tr></table></figure><h1 id="使用读得出来的名称"><a href="#使用读得出来的名称" class="headerlink" title="使用读得出来的名称"></a>使用读得出来的名称</h1><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad </span></span><br><span class="line"><span class="keyword">var</span> beeceearrthrtee; <span class="comment">// 你知道怎么读吗？ 鼻涕阿三？？</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> userName;</span><br></pre></td></tr></table></figure><h1 id="使用可搜索的名称"><a href="#使用可搜索的名称" class="headerlink" title="使用可搜索的名称"></a>使用可搜索的名称</h1><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> e = <span class="string">'not found'</span>; <span class="comment">// 想搜e, 就很难搜</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> ERROR_NO_FOUND = <span class="string">'not found'</span>;</span><br></pre></td></tr></table></figure><h1 id="方法名一概是动词短语"><a href="#方法名一概是动词短语" class="headerlink" title="方法名一概是动词短语"></a>方法名一概是动词短语</h1><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createAgent</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">funtion deleteAgent()&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateAgent</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">queryAgent</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><h1 id="尽量不要用单字母名称-除了用于循环"><a href="#尽量不要用单字母名称-除了用于循环" class="headerlink" title="尽量不要用单字母名称, 除了用于循环"></a>尽量不要用单字母名称, 除了用于循环</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// very good</span></span><br><span class="line">userList.<span class="keyword">forEach</span>(<span class="function"><span class="keyword">function</span><span class="params">(user)</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="每个概念对应一个词"><a href="#每个概念对应一个词" class="headerlink" title="每个概念对应一个词"></a>每个概念对应一个词</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">controller和manager, 没什么区别，要用controller都用controller, 要用manager都用manager, 不要混着用</span><br></pre></td></tr></table></figure><h1 id="建立项目词汇表-不要随意创造名称"><a href="#建立项目词汇表-不要随意创造名称" class="headerlink" title="建立项目词汇表, 不要随意创造名称"></a>建立项目词汇表, 不要随意创造名称</h1><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">user</span></span>, agent, org, queue, activity, device...</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li>《代码整洁之道》</li><li>《明朝那些事儿》</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在小朱元璋出生一个月后，父母为他取了一个名字（元时惯例）：朱重八，这个名字也可以叫做朱八八。我们这里再介绍一下，朱重八家族的名字，都很有特点。&lt;br&gt;朱重八高祖名字：朱百六；&lt;br&gt;朱重八曾祖名字：朱四九；&lt;br&gt;朱重八祖父名字：朱初一；&lt;br&gt;他
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>visual-event-tool 定位神器：1秒定位DOM元素绑定的事件代码的位置</title>
    <link href="https://wdd.js.org/visual-event-tool.html"/>
    <id>https://wdd.js.org/visual-event-tool.html</id>
    <published>2018-02-08T01:15:20.000Z</published>
    <updated>2018-02-08T01:17:01.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p3alsaatj.bkt.clouddn.com/20180208091603_Jkrh7t_Screenshot.jpeg" alt=""></p><h1 id="1-VisualEvent"><a href="#1-VisualEvent" class="headerlink" title="1 VisualEvent"></a>1 VisualEvent</h1><p>github地址： <a href="https://github.com/DataTables/VisualEvent" target="_blank" rel="noopener">https://github.com/DataTables/VisualEvent</a></p><h1 id="2-使用教程"><a href="#2-使用教程" class="headerlink" title="2 使用教程"></a>2 使用教程</h1><ol><li><p>打开<a href="http://sprymedia.co.uk/VisualEvent/这个页面，然后将visual" target="_blank" rel="noopener">http://sprymedia.co.uk/VisualEvent/这个页面，然后将visual</a> Event连接拖动到浏览器的书签栏上<br><img src="http://p3alsaatj.bkt.clouddn.com/20180208091616_EoSfZO_Screenshot.jpeg" alt=""></p></li><li><p>随便打开一个页面，然后点击VisualEvent书签后，页面就变成这样了。鼠标移动到蓝色或者黄色边框的元素上，相应得逻辑代码就会出现。截图左下角蓝色长条上有一些有用的信息，最左边有个关闭的按钮。</p></li></ol><p><img src="http://p3alsaatj.bkt.clouddn.com/20180208091627_KXpGYc_Screenshot.jpeg" alt=""></p><h1 id="3-最后"><a href="#3-最后" class="headerlink" title="3. 最后"></a>3. 最后</h1><p>VisualEvent并不是万能的，Vue绑定的事件它就无法检测出来。当然Vue的事件是直接写在Dom上的，根本无需定位。<br><code>工欲善其事必先利其器，多一个工具总是好的，万一真有需要呢。</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://p3alsaatj.bkt.clouddn.com/20180208091603_Jkrh7t_Screenshot.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-VisualEvent&quot;&gt;&lt;a href=&quot;#1-VisualEv
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>可能被遗漏的https与http的知识点</title>
    <link href="https://wdd.js.org/you-dont-know-https-and-http.html"/>
    <id>https://wdd.js.org/you-dont-know-https-and-http.html</id>
    <published>2018-02-08T01:10:59.000Z</published>
    <updated>2018-02-08T01:14:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTTPS域向HTTP域发送请求会被浏览器直接拒绝，HTTP向HTTPS则不会"><a href="#HTTPS域向HTTP域发送请求会被浏览器直接拒绝，HTTP向HTTPS则不会" class="headerlink" title="HTTPS域向HTTP域发送请求会被浏览器直接拒绝，HTTP向HTTPS则不会"></a>HTTPS域向HTTP域发送请求会被浏览器直接拒绝，HTTP向HTTPS则不会</h1><p>例如在github pages页面，这是一个https页面，如果在这个页面向http发送请求，那么会直接被浏览器拒绝，并在控制台输出下面的报错信息。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">jquery-1.11.3.min.js:5 </span>Mixed Content: The page <span class="built_in">at</span> <span class="string">'https://wangduanduan.github.io/ddddddd/'</span> was loaded over HTTPS, <span class="keyword">but </span>requested an <span class="keyword">insecure </span>XMLHttpRequest endpoint <span class="string">'http://cccccc/log/conf?token=welljoint'</span>. This request has <span class="keyword">been </span><span class="keyword">blocked; </span>the content must <span class="keyword">be </span>served over HTTPS.</span><br></pre></td></tr></table></figure><p>如果你在做第三方集成的系统，如果他们是在浏览器中直接调用你提供的接口，<code>那么最好你使用https协议，这样无论对方是https还是http都可以访问</code>。（相信我，这个很重要，我曾经经历过上线后遇到这个问题，然后连夜申请证书，把http升级到https的痛苦经历）</p><h1 id="HTTPS的默认端口是443，而不是443"><a href="#HTTPS的默认端口是443，而不是443" class="headerlink" title="HTTPS的默认端口是443，而不是443"></a>HTTPS的默认端口是443，而不是443</h1><p>如果443端口已经被其他服务占用了，那么使用其他任何没有被占用的端口都可以用作HTTPS服务，只不过在请求的时候需要加上端口号罢了。</p><h1 id="如何快速隐藏一个DOM元素"><a href="#如何快速隐藏一个DOM元素" class="headerlink" title="如何快速隐藏一个DOM元素"></a>如何快速隐藏一个DOM元素</h1><p>选中一个元素，然后按<code>h</code>,这时候就会在选中的DOM元素上加上<code>__web-inspector-hide-shortcut__</code>类，这个类会让元素隐藏。谷歌和火狐上都可以，IE上没有试过行不行。</p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180208091217_HDF1vL_Screenshot.jpeg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HTTPS域向HTTP域发送请求会被浏览器直接拒绝，HTTP向HTTPS则不会&quot;&gt;&lt;a href=&quot;#HTTPS域向HTTP域发送请求会被浏览器直接拒绝，HTTP向HTTPS则不会&quot; class=&quot;headerlink&quot; title=&quot;HTTPS域向HTTP域发送
      
    
    </summary>
    
    
      <category term="http" scheme="https://wdd.js.org/tags/http/"/>
    
      <category term="https" scheme="https://wdd.js.org/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>直接在Chrome DevTools调试Node.js</title>
    <link href="https://wdd.js.org/debug-nodejs-in-chrome-devtool.html"/>
    <id>https://wdd.js.org/debug-nodejs-in-chrome-devtool.html</id>
    <published>2018-02-07T06:15:43.000Z</published>
    <updated>2018-02-07T06:19:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>英文好的，直接看原文</p><blockquote><p><a href="https://blog.hospodarets.com/nodejs-debugging-in-chrome-devtools" target="_blank" rel="noopener">https://blog.hospodarets.com/nodejs-debugging-in-chrome-devtools</a></p></blockquote><h1 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h1><ul><li>Node.js 6.3+</li><li>Chrome 55+</li></ul><h1 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h1><ul><li>1 打开连接 <code>chrome://flags/#enable-devtools-experiments</code></li><li>2 开启<code>开发者工具实验性功能</code> </li><li>3 重启浏览器</li><li>4 打开 DevTools Setting -&gt; Experiments tab</li><li>5 按6次shift后，隐藏的功能会出现，勾选”Node debugging”</li></ul><p><img src="http://p3alsaatj.bkt.clouddn.com/20180207141627_9HT0nS_Screenshot.jpeg" alt=""></p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180207141636_hIfIyG_Screenshot.jpeg" alt=""></p><h1 id="运行程序"><a href="#运行程序" class="headerlink" title="运行程序"></a>运行程序</h1><p>必须要有 <code>--inspect</code><br><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; node <span class="comment">--inspect www</span></span><br><span class="line">Debugger listening <span class="keyword">on</span> <span class="keyword">port</span> <span class="number">9229</span>.</span><br><span class="line"><span class="literal">Warning</span>: This <span class="keyword">is</span> an experimental feature <span class="keyword">and</span> could change at any <span class="built_in">time</span>.</span><br><span class="line"><span class="keyword">To</span> start debugging, <span class="keyword">open</span> the following URL <span class="keyword">in</span> Chrome:</span><br><span class="line">    chrome-devtools://devtools/remote/serve_file/@<span class="number">60</span>cd6e859b9f557d2312f5bf532f6aec5f284980/inspector.html?experiments=<span class="literal">true</span>&amp;v8only=<span class="literal">true</span>&amp;ws=localhost:<span class="number">9229</span>/<span class="number">78</span>a884f4-<span class="number">8</span>c2e-<span class="number">459e-93</span>f7-e1cbe87cf5cf</span><br></pre></td></tr></table></figure></p><p>将这个地址粘贴到谷歌浏览器：<code>chrome-devtools://devtools/remote/serve_file/@60cd6e859b9f557d2312f5bf532f6aec5f284980/inspector.html?experiments=true&amp;v8only=true&amp;ws=localhost:9229/78a884f4-8c2e-459e-93f7-e1cbe87cf5cf</code></p><p>程序后端输出的日志也回输出到谷歌浏览器的console里面，同时也可以在Sources里进行断点调试了。<br><img src="http://p3alsaatj.bkt.clouddn.com/20180207141649_ArMyV7_Screenshot.jpeg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;英文好的，直接看原文&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.hospodarets.com/nodejs-debugging-in-chrome-devtools&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;
      
    
    </summary>
    
    
      <category term="nodejs" scheme="https://wdd.js.org/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>12个值得关注的顶级JS库</title>
    <link href="https://wdd.js.org/top-11-javascript-libraries-are-worth-your-attention.html"/>
    <id>https://wdd.js.org/top-11-javascript-libraries-are-worth-your-attention.html</id>
    <published>2018-02-07T06:08:10.000Z</published>
    <updated>2018-02-07T06:12:58.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文是译文，原文是<a href="https://da-14.com/blog/top-11-javascript-libraries-are-worth-your-attention" target="_blank" rel="noopener">https://da-14.com/blog/top-11-javascript-libraries-are-worth-your-attention</a><br>我在原文的基础上加了百度的Echats图表库，这个也是毫不逊色其他图表库的。另外<code>Handsontable</code>电子表格库也是蛮好玩的。</p></blockquote><p>前端开发工具在过去几年中取得了进步和成功。这些日子，JS库和框架可以简化工作流程，提高开发过程，并在响应式设计方面提供更好的功能。</p><p>考虑到一个长的JavaScript库列表，它可能是挑战选择，那是值得的时间和精力。我们已经讨论了最好的JavaScript框架，今天我们想研究JS库中的新星。你可能听说过像jQuery或React这样的大名字，这是最有用的JavaScript库之一，虽然有很多其他解决方案。</p><p>一些库是几乎必须在每个其他项目应用，而其他的更集中和用于执行应用程序中的特定功能。为了清楚起见，我们按类型分组了最好的JavaScript库，所以让我们开始。</p><h1 id="图表类"><a href="#图表类" class="headerlink" title="图表类"></a>图表类</h1><h2 id="D3"><a href="#D3" class="headerlink" title="D3"></a>D3</h2><p><img src="http://p3alsaatj.bkt.clouddn.com/20180207140915_vcI4lr_Screenshot.jpeg" alt=""></p><p><code>D3.js</code>（数据驱动文档）通常被称为最强大的开源JavaScript可视化库。它的生态系统包括几十个插件和其他库建立在D3js的顶部。同时，支持社区和大量的文档可以帮助您立即开始。</p><p>D3符合W3C网络标准，几乎支持所有现代浏览器。尽管事实上它不包括任何预先构建的图表，它提供了许多例子和“输入和退出”选择，容易的调试过程和强大的转换等有用的功能。</p><h2 id="Chart-js"><a href="#Chart-js" class="headerlink" title="Chart.js"></a>Chart.js</h2><p><img src="http://p3alsaatj.bkt.clouddn.com/20180207140930_ZnxYmL_Screenshot.jpeg" alt=""></p><p><code>Chart.js</code>是一个简单的开源解决方案，用于小项目和这些情况下，当你需要快速创建图表。它有八种图表类型和混合它们的能力，外加令人惊叹的动画选项开箱。强烈建议使用此JavaScript图形库，以便简单的设置过程，工作灵活性和全面的文档，尽管其功能相当有限。 Chartist.js具有类似的功能，而它是基于SVG，而不是HTML5画布在Chartjs。</p><h2 id="FusionCharts"><a href="#FusionCharts" class="headerlink" title="FusionCharts"></a>FusionCharts</h2><p><img src="http://p3alsaatj.bkt.clouddn.com/20180207140946_mjOHvG_Screenshot.jpeg" alt=""></p><p>FusionCharts是迄今为止最好的JavaScript图表库。作为设计师和开发者最全面的解决方案，它包括90多种图表类型和1000个地图，将Google图表和MetricsGraphics保留在后面。</p><p>今天FusionCharts可以拥有超过24,000个客户，其中包括白宫，Oracle，IBM，微软，谷歌等等。作为最流行的JavaScript库之一，它是高度可扩展的，并与各种设备和浏览器，包括IE 6,7和8兼容。但是，水印版本可以免费使用商业和个人项目，但删除水印你需要购买许可证。</p><h2 id="Google-Charts"><a href="#Google-Charts" class="headerlink" title="Google Charts"></a>Google Charts</h2><p><img src="http://p3alsaatj.bkt.clouddn.com/20180207141002_vvosw1_Screenshot.jpeg" alt=""><br><code>Google图表</code>允许您构建从纯色图表到复杂树形图的所有内容。它配备了广泛的预构建的图表库，各种数据工具和多个自定义选项。 HTML5和SVG上的基础图表​​此库确保跨浏览器和跨平台兼容性，而对于较旧的IE版本，它包括VML。</p><p>由于详细的文档，代码注释和分步说明，Google Charts工具可以成为任何人谁想要使用JavaScript构建图表的一个很好的起点。但是，由于文件是从Google的服务器上传的，因此您的Web JavaScript应用程序应该在线以查看图表。</p><h2 id="Echarts（百度出品）"><a href="#Echarts（百度出品）" class="headerlink" title="Echarts（百度出品）"></a>Echarts（百度出品）</h2><p><img src="http://p3alsaatj.bkt.clouddn.com/20180207141017_bXZ0zq_Screenshot.jpeg" alt=""></p><ul><li><p>更小文件 更大作为</p><ul><li>更小体积的文件，满足更轻便的使用需求</li><li>更灵活的打包方式，可自由选择你需要的图表和组件</li></ul></li><li><p>移动端强势来袭</p><ul><li>良好的自适应效果</li><li>专属的移动端交互体验</li></ul></li><li><p>更丰富的可视化效果</p><ul><li>新增更多图表类型，更好的满足不同数据的处理需求 更多的搭配方案让你的数据呈现方式更个性和完美</li></ul></li></ul><h1 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h1><h2 id="GSAP"><a href="#GSAP" class="headerlink" title="GSAP"></a>GSAP</h2><p><img src="http://p3alsaatj.bkt.clouddn.com/20180207141045_LW91oF_Screenshot.jpeg" alt=""></p><p><code>GSAP</code>（GreenSock动画平台）是一个先进的动画解决方案，由全球最大的企业使用创建惊人的互动动画，没有麻烦。它被超过200万网站雇用，在他们的客户中，你可以找到像福特，耐克，Adobe，微软，三星和许多其他的伟大的名字。</p><p>GSAP与新旧浏览器以及移动设备高度兼容。在顶级功能SVG支持，使任何DOM元素可拖动，可旋转或可滑动滚动和快速性能的能力。它还带有定向旋转，3D变换，模块化架构，快速加载，零依赖性等等。</p><h2 id="Bounce-js"><a href="#Bounce-js" class="headerlink" title="Bounce.js"></a>Bounce.js</h2><p><img src="http://p3alsaatj.bkt.clouddn.com/20180207141103_qmxThj_Screenshot.jpeg" alt=""></p><p><code>Bounce.js</code>是一个整洁的JavaScript动画库，使您能够创建有吸引力的CSS3动力的动画，像饼图一样简单。它有10个预设，如旋转，旋风，果冻，公路跑步者和其他人，以生成平滑的动画，任何网页设计或自定义项目。</p><p>这个库是绝对免费的和MIT许可的，它是一个不错的选择，在那些情况下，当你不需要一个长列表的动画类型，寻找实验或只是尝试你的手在动画。</p><h1 id="Animate-css"><a href="#Animate-css" class="headerlink" title="Animate.css"></a>Animate.css</h1><p><img src="/img/bVI7Av" alt="clipboard.png"></p><p><code>Animate.css</code>是一个平滑的CSS库，允许您添加整洁的动画到所选对象。它具有超过50种不同的预设，可以应用于文本，形式，对象和CSS3的图片。由于小文件大小，跨浏览器支持和易于使用它可以是一个非常适合移动项目，滑块，主页等。</p><h1 id="时间日期"><a href="#时间日期" class="headerlink" title="时间日期"></a>时间日期</h1><h2 id="Moment-js"><a href="#Moment-js" class="headerlink" title="Moment.js"></a>Moment.js</h2><p><img src="http://p3alsaatj.bkt.clouddn.com/20180207141151_MuJJGe_Screenshot.jpeg" alt=""></p><p><code>Moment.js</code>是一个简单和轻量级的日期库，使解析，操作和格式化日期和时间容易和准确。它具有多语言支持，持续时间，日历时间和各种插件，以获得诸如时区支持，Twitter集成等功能。但重要的是，它消除了使用本机JavaScript日期对象的需要，随后促进复杂解析过程和减少代码量。</p><h2 id="Date-fns"><a href="#Date-fns" class="headerlink" title="Date-fns"></a>Date-fns</h2><p><img src="http://p3alsaatj.bkt.clouddn.com/20180207141209_nLE7jE_Screenshot.jpeg" alt=""></p><p><code>Date-fns</code>是一个高级工具集，用于在浏览器和Node.js中操作时间和日期。它提供了140多个有用的功能，可以通过简单的API轻松访问。由于模块化结构，它允许您只选择您当前需要的项目的那些功能。</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="Math-js"><a href="#Math-js" class="headerlink" title="Math.js"></a>Math.js</h2><p><img src="http://p3alsaatj.bkt.clouddn.com/20180207141231_eEfaRZ_Screenshot.jpeg" alt=""></p><p>Math.js是JavaScript引擎的开源数学库。它有许多函数和常量，灵活的表达式解析器，以及支持复杂和大数字，单位，字符串，分数，矩阵，数组和符号计算。</p><h2 id="Handsontable"><a href="#Handsontable" class="headerlink" title="Handsontable"></a>Handsontable</h2><p><img src="http://p3alsaatj.bkt.clouddn.com/20180207141247_GqNwF8_Screenshot.jpeg" alt=""></p><p><code>Handsontable</code>是一个无障碍的JavaScript<code>电子表格库</code>用于构建一流的Web应用程序。它可以轻松地扩展和修改与自定义插件。由开发人员为开发人员建造，它确保快速和容易的开始，方便的模块化结构和活跃的社区支持。这个表库包括超过30个功能的免费版本和额外的10+功能的专业版。目前Handsontable用于销售报告，人力规划，数据合并，数据库编辑等领域。</p><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文是译文，原文是&lt;a href=&quot;https://da-14.com/blog/top-11-javascript-libraries-are-worth-your-attention&quot; target=&quot;_blank&quot; rel=&quot;noopener
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>【译】13简单的优秀编码规则（从我15年的经验）</title>
    <link href="https://wdd.js.org/few-simple-rules-for-good-coding-my-15-years-experience.html"/>
    <id>https://wdd.js.org/few-simple-rules-for-good-coding-my-15-years-experience.html</id>
    <published>2018-02-07T06:03:12.000Z</published>
    <updated>2018-02-07T06:04:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>原文地址：<a href="https://hackernoon.com/few-simple-rules-for-good-coding-my-15-years-experience-96cb29d4acd9#.ddzpjb80c" target="_blank" rel="noopener">https://hackernoon.com/few-simple-rules-for-good-coding-my-15-years-experience-96cb29d4acd9#.ddzpjb80c</a></p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180207140343_0UaL3X_Screenshot.jpeg" alt=""></p><p>嗨，我的工作作为一个程序员超过15年，并使用许多不同的语言，范例，框架和其他狗屎。我想和大家分享我写好代码的规则。</p><h1 id="优化VS可读性-去他妈的优化"><a href="#优化VS可读性-去他妈的优化" class="headerlink" title="优化VS可读性 去他妈的优化"></a>优化VS可读性 去他妈的优化</h1><p>始终编​​写易于阅读且对开发人员可理解的代码。因为在硬可读代码上花费的时间和资源将远远高于从优化中获得的。<br>如果你需要进行优化，那么使它像DI的独立模块，具有100％的测试覆盖率，并且不会被触及至少一年。</p><h1 id="架构第一"><a href="#架构第一" class="headerlink" title="架构第一"></a>架构第一</h1><p>我看到很多人说“我们需要快速做事，我们没有时间做架构”。其中约99％的人因为这样的想法而遇到了大问题。<br>编写代码而不考虑其架构是没有用的，就像没有实现它们的计划一样，梦想你的愿望。<br>在编写代码的第一行之前，你应该明白它将要做什么，它将如何使用，模块，服务如何相互工作，它将有什么结构，如何进行测试和调试，以及如何更新。</p><h1 id="测试覆盖率"><a href="#测试覆盖率" class="headerlink" title="测试覆盖率"></a>测试覆盖率</h1><p>测试是好事，但他们并不总是负担得起，对项目有意义。</p><p>当你需要测试：</p><ul><li>当你编写模块时，微服务将不会被触及至少一个月。</li><li>当你编写开源代码。</li><li>当你编写涉及金融渠道的核心代码或代码。</li><li>当您有代码更新的同时更新测试的资源。</li></ul><p>当你不需要测试时：</p><ul><li>当你是一个创业。</li><li>当你有小团队和代码更改是快速。</li><li>当你编写的脚本，可以简单地通过他们的输出手动测试。</li></ul><p>记住，<code>带有严格测试的代码可能比没有测试的代码更有害</code>。</p><h1 id="保持简单，极度简单"><a href="#保持简单，极度简单" class="headerlink" title="保持简单，极度简单"></a>保持简单，极度简单</h1><p>不要编写复杂的代码。更多更简单，那么更少的错误它可能有和更少的时间来调试它们。代码应该做的只是它需要没有非常多的抽象和其他OOP shit（尤其是涉及java开发人员）+ 20％的东西可能需要在将来以简单的方式更新它。</p><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p>出现注释说明你的代码不够好。好的代码应该是可以理解的，没有一行注释。但是如何为新开发人员节省时间？ - 编写简单的内联文档描述什么和如何方法工作。这将节省很多时间来理解，甚至更多 - 它将给人们更多的机会来提出更好的实施这种方法。并且它将是全球代码文档的良好开端。</p><h1 id="硬耦合VS较小耦合"><a href="#硬耦合VS较小耦合" class="headerlink" title="硬耦合VS较小耦合"></a>硬耦合VS较小耦合</h1><p>始终尝试使用微服务架构。单片软件可以比微服务软件运行得更快，但只能在一个服务器的上下文中运行。<br>微服务使您可以不仅在许多服务器上，而且有时甚至在一台机器上（我的意思是过程分发）高效地分发您的软件。</p><h1 id="代码审查"><a href="#代码审查" class="headerlink" title="代码审查"></a>代码审查</h1><p>代码审查可以是好的，也以是坏的。<br>您可以组织代码审查，只有当您有开发人员了解95％的代码，谁可以监控所有更新，而不浪费很多时间。在其他情况下，这将是只是耗时，每个人都会讨厌这个。</p><p>在这部分有很多问题，所以更深入地描述这一点。</p><p>许多人认为代码审查是一个很好的方式教新手，或者工作在不同部分的代码的队友。但是代码审查的主要目标是保持代码质量，而不是教学。让我们想象你的团队制作代码用于控制核反应堆或太空火箭发动机的冷却系统。你在非常硬的逻辑中犯了巨大的错误，然后你给这个代码审查新的家伙。你怎么认为会发生意外的风险？ - 我的练习率超过70％。</p><p>良好的团队是每个人都有自己的角色，负责确切的工作。如果有人想要理解另一段代码，那么他去一个负责任去问他。你不可能知道一切，更好的优秀的理解小块代码而不是理解所有。</p><h1 id="重构没啥用"><a href="#重构没啥用" class="headerlink" title="重构没啥用"></a>重构没啥用</h1><p>在我的职业生涯中，我听到很多次“不要担心，我们以后会重构它”。在未来，这会导致大的技术债务或从头开始删除所有的代码和写作。</p><p>所以，不要得到一个债务，除非你有钱从头开发你的软件几次。</p><h1 id="当你累了或在一个坏的心情不要写代码。"><a href="#当你累了或在一个坏的心情不要写代码。" class="headerlink" title="当你累了或在一个坏的心情不要写代码。"></a>当你累了或在一个坏的心情不要写代码。</h1><p>当开发人员厌倦时，他们正在制造2到5倍或者更多的bug。所以工作更多是非常糟糕的做法。这就是为什么越来越多的国家思考6小时工作日，其中一些已经有了。精神工作不同于使用你的二头肌。</p><h1 id="不要一次写全部-使开发迭代"><a href="#不要一次写全部-使开发迭代" class="headerlink" title="不要一次写全部 - 使开发迭代"></a>不要一次写全部 - 使开发迭代</h1><p>在编写代码分析和预测之前，您的客户/客户真正需要什么，然后选择您可以在短期内以高质量开发的MVF（最有价值的功能）。使用这样的迭代来部署质量更新，而不是腰部时间和资源对不合理的愿望和牺牲与质量。</p><h1 id="自动化VS手动"><a href="#自动化VS手动" class="headerlink" title="自动化VS手动"></a>自动化VS手动</h1><p>自动化是长期的100％成功。所以如果你有资源自动化的东西，现在应该做。你可能认为“只需要5分钟，为什么我应该自动化？但让我计算这个。例如，它是5个开发人员的日常任务。 5分钟<em> 5天</em> 21天* 12个月= 6 300分钟= 105小时= 13.125天〜5250 $。<br>如果你有40 000名员工，这将需要多少费用？</p><h1 id="出去浪，学习新爱好"><a href="#出去浪，学习新爱好" class="headerlink" title="出去浪，学习新爱好"></a>出去浪，学习新爱好</h1><p>差异化工作可以增加心智能力，并提供新想法。所以，暂停现在的工作，出去呼吸一下新鲜空气，与朋友交谈，弹吉他等。<br><code>ps: 莫春者，春服既成，冠者五六人，童子六七人，浴乎沂，风乎舞雩，咏而归。------《论语.先进》。</code></p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180207140423_Iku4es_Screenshot.jpeg" alt=""></p><h1 id="在空闲时间学习新事物"><a href="#在空闲时间学习新事物" class="headerlink" title="在空闲时间学习新事物"></a>在空闲时间学习新事物</h1><p><code>当人们停止学习时，他们开始退化。</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原文地址：&lt;a href=&quot;https://hackernoon.com/few-simple-rules-for-good-coding-my-15-years-experience-96cb29d4acd9#.ddzpjb80c&quot; target=&quot;_blank&quot; rel
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>15行代码为segmentfault增加头条文章排序功能</title>
    <link href="https://wdd.js.org/sort-for-sf.html"/>
    <id>https://wdd.js.org/sort-for-sf.html</id>
    <published>2018-02-07T06:00:46.000Z</published>
    <updated>2018-02-07T06:01:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>有个需求，想看点赞最多的头条，但是页面没有这种按钮。怎么办？自己写吧。</p><p>先看效果<br><img src="http://p3alsaatj.bkt.clouddn.com/20180207140139_xwjt2M_Screenshot.jpeg" alt=""></p><p>再看代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rows = $(<span class="string">'.news__item'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> key = +$(<span class="keyword">this</span>).find(<span class="string">'.news__item-zan-number'</span>).text();</span><br><span class="line">    $(<span class="keyword">this</span>).data(<span class="string">'key'</span>, key);</span><br><span class="line">&#125;).get();</span><br><span class="line"></span><br><span class="line">rows.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> keyA = $(a).data(<span class="string">'key'</span>);</span><br><span class="line">    <span class="keyword">var</span> keyB = $(b).data(<span class="string">'key'</span>);</span><br><span class="line">    <span class="keyword">if</span>(keyA&lt;keyB)&#123;<span class="keyword">return</span> <span class="number">-1</span>;&#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;<span class="keyword">return</span> <span class="number">1</span>;&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$.each(rows, <span class="function"><span class="keyword">function</span>(<span class="params">index, row</span>)</span>&#123;</span><br><span class="line">    $(<span class="string">'.news__list'</span>).prepend(row);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有个需求，想看点赞最多的头条，但是页面没有这种按钮。怎么办？自己写吧。&lt;/p&gt;
&lt;p&gt;先看效果&lt;br&gt;&lt;img src=&quot;http://p3alsaatj.bkt.clouddn.com/20180207140139_xwjt2M_Screenshot.jpeg&quot; alt=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>可视化交互阅读JS源代码</title>
    <link href="https://wdd.js.org/visual-reading-js-code.html"/>
    <id>https://wdd.js.org/visual-reading-js-code.html</id>
    <published>2018-02-07T05:57:25.000Z</published>
    <updated>2018-02-07T05:58:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="曾经，你可以能习惯这样阅读javascript"><a href="#曾经，你可以能习惯这样阅读javascript" class="headerlink" title="曾经，你可以能习惯这样阅读javascript"></a>曾经，你可以能习惯这样阅读javascript</h1><p><img src="http://p3alsaatj.bkt.clouddn.com/20180207135809_HSz6fD_Screenshot.jpeg" alt=""></p><h1 id="现在，你可以用这个姿势阅读"><a href="#现在，你可以用这个姿势阅读" class="headerlink" title="现在，你可以用这个姿势阅读"></a>现在，你可以用这个姿势阅读</h1><p><img src="http://p3alsaatj.bkt.clouddn.com/20180207135821_3b9l9c_Screenshot.jpeg" alt=""></p><h1 id="怎么做呢"><a href="#怎么做呢" class="headerlink" title="怎么做呢?"></a>怎么做呢?</h1><h2 id="step1"><a href="#step1" class="headerlink" title="step1:"></a>step1:</h2><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g <span class="built_in">lambda</span>-<span class="built_in">view</span></span><br></pre></td></tr></table></figure><h2 id="step2"><a href="#step2" class="headerlink" title="step2:"></a>step2:</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 阅读本地代码</span></span><br><span class="line">lv targer.js</span><br><span class="line"></span><br><span class="line"><span class="comment">// 阅读远程代码</span></span><br><span class="line">lv https:<span class="comment">//code.jquery.com/jquery-3.1.1.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 阅读多个代码</span></span><br><span class="line">lv file1<span class="selector-class">.js</span> file2<span class="selector-class">.js</span> file3.js</span><br><span class="line"></span><br><span class="line"><span class="comment">// 阅读所有</span></span><br><span class="line">lv *.js</span><br></pre></td></tr></table></figure><h1 id="项目地址：https-github-com-Jianru-Lin-lambda-view"><a href="#项目地址：https-github-com-Jianru-Lin-lambda-view" class="headerlink" title="项目地址：https://github.com/Jianru-Lin/lambda-view"></a>项目地址：<a href="https://github.com/Jianru-Lin/lambda-view" target="_blank" rel="noopener">https://github.com/Jianru-Lin/lambda-view</a></h1><h1 id="欢迎试玩！"><a href="#欢迎试玩！" class="headerlink" title="欢迎试玩！"></a>欢迎试玩！</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;曾经，你可以能习惯这样阅读javascript&quot;&gt;&lt;a href=&quot;#曾经，你可以能习惯这样阅读javascript&quot; class=&quot;headerlink&quot; title=&quot;曾经，你可以能习惯这样阅读javascript&quot;&gt;&lt;/a&gt;曾经，你可以能习惯这样阅读java
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>谷歌浏览器： Snippets小程序哪家强？</title>
    <link href="https://wdd.js.org/chrome-snippets-collect.html"/>
    <id>https://wdd.js.org/chrome-snippets-collect.html</id>
    <published>2018-02-07T05:48:55.000Z</published>
    <updated>2018-02-07T05:55:18.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Snippets是可以在Chrome DevTools的“源”面板中创建和执行的小脚本。 您可以从任何页面访问和运行它们。 当您运行代码段时，它会从当前打开的页面的上下文执行。</p></blockquote><h1 id="显示所有元素的边框，看页面布局非常方便"><a href="#显示所有元素的边框，看页面布局非常方便" class="headerlink" title="显示所有元素的边框，看页面布局非常方便"></a>显示所有元素的边框，看页面布局非常方便</h1><p><img src="http://p3alsaatj.bkt.clouddn.com/20180207135027_4TAe1P_Screenshot.jpeg" alt=""></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[].forEach.call($$(<span class="string">"*"</span>),<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">  a.style.outline=<span class="string">"1px solid #"</span>+(~~(<span class="built_in">Math</span>.random()*(<span class="number">1</span>&lt;&lt;<span class="number">24</span>))).toString(<span class="number">16</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="allcolors-js"><a href="#allcolors-js" class="headerlink" title="allcolors.js"></a>allcolors.js</h1><blockquote><p>从页面上的元素中使用的计算样式打印所有颜色。 使用样式化的console.log调用来可视化每种颜色。</p></blockquote><p><img src="http://p3alsaatj.bkt.clouddn.com/20180207135046_bfEqm5_Screenshot.jpeg" alt=""><br><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// allcolors.js</span></span><br><span class="line"><span class="comment">// https://github.com/bgrins/devtools-snippets</span></span><br><span class="line"><span class="comment">// Print out CSS colors used in elements on the page.</span></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Should include colors from elements that have a border color but have a zero width?</span></span><br><span class="line">  <span class="keyword">var</span> includeBorderColorsWithZeroWidth = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> allColors = &#123;&#125;;</span><br><span class="line">  <span class="keyword">var</span> props = [<span class="string">"background-color"</span>, <span class="string">"color"</span>, <span class="string">"border-top-color"</span>, <span class="string">"border-right-color"</span>, <span class="string">"border-bottom-color"</span>, <span class="string">"border-left-color"</span>];</span><br><span class="line">  <span class="keyword">var</span> skipColors = &#123;</span><br><span class="line">    <span class="string">"rgb(0, 0, 0)"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">"rgba(0, 0, 0, 0)"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">"rgb(255, 255, 255)"</span>: <span class="number">1</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  [].forEach.call(<span class="built_in">document</span>.querySelectorAll(<span class="string">"*"</span>), <span class="function"><span class="keyword">function</span> (<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> nodeColors = &#123;&#125;;</span><br><span class="line">    props.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">prop</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> <span class="built_in">color</span> = <span class="built_in">window</span>.getComputedStyle(node, <span class="literal">null</span>).getPropertyValue(prop),</span><br><span class="line">        thisIsABorderProperty = (prop.indexOf(<span class="string">"border"</span>) != <span class="number">-1</span>),</span><br><span class="line">        notBorderZero = thisIsABorderProperty ? <span class="built_in">window</span>.getComputedStyle(node, <span class="literal">null</span>).getPropertyValue(prop.replace(<span class="string">"color"</span>, <span class="string">"width"</span>)) !== <span class="string">"0px"</span> : <span class="literal">true</span>,</span><br><span class="line">        colorConditionsMet;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (includeBorderColorsWithZeroWidth) &#123;</span><br><span class="line">        colorConditionsMet = <span class="built_in">color</span> &amp;&amp; !skipColors[<span class="built_in">color</span>];</span><br><span class="line">      &#125; <span class="title">else</span> &#123;</span><br><span class="line">        colorConditionsMet = <span class="built_in">color</span> &amp;&amp; !skipColors[<span class="built_in">color</span>] &amp;&amp; notBorderZero;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (colorConditionsMet) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!allColors[<span class="built_in">color</span>]) &#123;</span><br><span class="line">          allColors[<span class="built_in">color</span>] = &#123;</span><br><span class="line">            <span class="attribute">count</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attribute">nodes</span>: []</span><br><span class="line">          &#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!nodeColors[<span class="built_in">color</span>]) &#123;</span><br><span class="line">          allColors[<span class="built_in">color</span>].count++;</span><br><span class="line">          allColors[<span class="built_in">color</span>].nodes.push(node);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        nodeColors[<span class="built_in">color</span>] = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">rgbTextToRgbArray</span>(<span class="params">rgbText</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> rgbText.replace(<span class="regexp">/\s/g</span>, <span class="string">""</span>).match(<span class="regexp">/\d+,\d+,\d+/</span>)[<span class="number">0</span>].split(<span class="string">","</span>).map(<span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">parseInt</span>(num, <span class="number">10</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">componentToHex</span>(<span class="params">c</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> hex = c.toString(<span class="number">16</span>);</span><br><span class="line">    <span class="keyword">return</span> hex.length == <span class="number">1</span> ? <span class="string">"0"</span> + <span class="attribute">hex</span> : hex;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">rgbToHex</span>(<span class="params">rgbArray</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> r = rgbArray[<span class="number">0</span>],</span><br><span class="line">      g = rgbArray[<span class="number">1</span>],</span><br><span class="line">      b = rgbArray[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"#"</span> + componentToHex(r) + componentToHex(g) + componentToHex(b);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> allColorsSorted = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> allColors) &#123;</span><br><span class="line">    <span class="keyword">var</span> rgbArray = rgbTextToRgbArray(i);</span><br><span class="line">    <span class="keyword">var</span> hexValue = rgbToHex(rgbArray);</span><br><span class="line"></span><br><span class="line">    allColorsSorted.push(&#123;</span><br><span class="line">      <span class="attribute">key</span>: i,</span><br><span class="line">      <span class="attribute">value</span>: allColors[i],</span><br><span class="line">      <span class="attribute">hexValue</span>: hexValue</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  allColorsSorted = allColorsSorted.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b.value.count - a.value.count;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> nameStyle = <span class="string">"font-weight:normal;"</span>;</span><br><span class="line">  <span class="keyword">var</span> countStyle = <span class="string">"font-weight:bold;"</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">colorStyle</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"background:"</span> + <span class="built_in">color</span> + <span class="string">";color:"</span> + <span class="built_in">color</span> + <span class="string">";border:1px solid #333;"</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.group(<span class="string">"Total colors used in elements on the page: "</span> + <span class="built_in">window</span>.location.href + <span class="string">" are "</span> + allColorsSorted.length);</span><br><span class="line">  allColorsSorted.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">c</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.groupCollapsed(<span class="string">"%c    %c "</span> + c.key + <span class="string">" "</span> + c.hexValue + <span class="string">" %c("</span> + c.value.count + <span class="string">" times)"</span>,</span><br><span class="line">      colorStyle(c.key), nameStyle, countStyle);</span><br><span class="line">    c.value.nodes.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">node</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(node);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.groupEnd();</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">console</span>.groupEnd(<span class="string">"All colors used in elements on the page"</span>);</span><br><span class="line"></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p><h1 id="cachebuster-js"><a href="#cachebuster-js" class="headerlink" title="cachebuster.js"></a>cachebuster.js</h1><blockquote><p>通过在href和src属性的末尾添加Date.now（）来覆盖所有链接和（可选）脚本标记。 默认情况下，不执行处理脚本，应将变量process_scripts更改为true以运行这些脚本。</p></blockquote><p><img src="http://p3alsaatj.bkt.clouddn.com/20180207135131_CvscRc_Screenshot.jpeg" alt=""></p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">//Cache Buster</span><br><span class="line">(<span class="name">function</span> ()&#123;</span><br><span class="line">  var rep = /.*\?.*/,</span><br><span class="line">      links = document.getElementsByTagName('link'),</span><br><span class="line">      scripts = document.getElementsByTagName('script'),</span><br><span class="line">      process_scripts = false<span class="comment">;</span></span><br><span class="line">  for (<span class="name">var</span> i=0<span class="comment">;i&lt;links.length;i++)&#123;</span></span><br><span class="line">    var link = links[i],</span><br><span class="line">        href = link.href<span class="comment">;</span></span><br><span class="line">    if(<span class="name">rep</span>.test(<span class="name">href</span>))&#123;</span><br><span class="line">      link.href = href+'&amp;'+Date.now()<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">      link.href = href+'?'+Date.now()<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  if(<span class="name">process_scripts</span>)&#123;</span><br><span class="line">    for (<span class="name">var</span> i=0<span class="comment">;i&lt;scripts.length;i++)&#123;</span></span><br><span class="line">      var script = scripts[i],</span><br><span class="line">          src = script.src<span class="comment">;</span></span><br><span class="line">      if(<span class="name">rep</span>.test(<span class="name">src</span>))&#123;</span><br><span class="line">        script.src = src+'&amp;'+Date.now()<span class="comment">;</span></span><br><span class="line">      &#125;</span><br><span class="line">      else&#123;</span><br><span class="line">        script.src = src+'?'+Date.now()<span class="comment">;</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()<span class="comment">;</span></span><br></pre></td></tr></table></figure><h1 id="console-save-js"><a href="#console-save-js" class="headerlink" title="console-save.js"></a>console-save.js</h1><blockquote><p>从控制台将对象保存为.json文件的简单方法包括一个chrome扩展和一个纯文本。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">console</span><span class="selector-class">.save</span>(<span class="selector-tag">data</span>, <span class="selector-attr">[filename]</span>)</span><br></pre></td></tr></table></figure></p></blockquote><p><img src="http://p3alsaatj.bkt.clouddn.com/20180207135218_BG0kgp_Screenshot.jpeg" alt=""><br><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">function</span>(<span class="name">console</span>)&#123;</span><br><span class="line"></span><br><span class="line">    console.save = function(<span class="name">data</span>, filename)&#123;</span><br><span class="line"></span><br><span class="line">        if(<span class="name">!data</span>) &#123;</span><br><span class="line">            console.error(<span class="symbol">'Console.save:</span> No data')</span><br><span class="line">            return<span class="comment">;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if(<span class="name">!filename</span>) filename = <span class="symbol">'console.json</span>'</span><br><span class="line"></span><br><span class="line">        if(<span class="name">typeof</span> data === <span class="string">"object"</span>)&#123;</span><br><span class="line">            data = JSON.stringify(<span class="name">data</span>, undefined, <span class="number">4</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        var blob = new Blob([<span class="name">data</span>], &#123;type: <span class="symbol">'text/json</span>'&#125;),</span><br><span class="line">            e    = document.createEvent(<span class="symbol">'MouseEvents</span>'),</span><br><span class="line">            a    = document.createElement(<span class="symbol">'a</span>')</span><br><span class="line"></span><br><span class="line">        a.download = filename</span><br><span class="line">        a.href = window.URL.createObjectURL(<span class="name">blob</span>)</span><br><span class="line">        a.dataset.downloadurl =  [<span class="symbol">'text/json</span>', a.download, a.href].join(<span class="symbol">':</span>')</span><br><span class="line">        e.initMouseEvent(<span class="symbol">'click</span>', true, false, window, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, false, false, false, false, <span class="number">0</span>, null)</span><br><span class="line">        a.dispatchEvent(<span class="name">e</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(<span class="name">console</span>)</span><br></pre></td></tr></table></figure></p><h1 id="formcontrols-js"><a href="#formcontrols-js" class="headerlink" title="formcontrols.js"></a>formcontrols.js</h1><blockquote><p>在一个不错的表中显示所有html表单元素及其值和类型。 在页面上为每个表单添加一个新表</p></blockquote><p><img src="http://p3alsaatj.bkt.clouddn.com/20180207135247_mH2FW4_Screenshot.jpeg" alt=""><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// formcontrols.js</span></span><br><span class="line"><span class="comment">// https://github.com/bgrins/devtools-snippets</span></span><br><span class="line"><span class="comment">// Print out forms and their controls</span></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> forms = <span class="built_in">document</span>.querySelectorAll(<span class="string">"form"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = forms.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> tab = [ ];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.group(<span class="string">"HTMLForm quot;"</span> + forms[i].name + <span class="string">"quot;: "</span> + forms[i].action);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Element:"</span>, forms[i], <span class="string">"\nName:    "</span>+forms[i].name+<span class="string">"\nMethod:  "</span>+forms[i].method.toUpperCase()+<span class="string">"\nAction:  "</span>+forms[i].action || <span class="string">"null"</span>);</span><br><span class="line"></span><br><span class="line">    [<span class="string">"input"</span>, <span class="string">"textarea"</span>, <span class="string">"select"</span>].forEach(<span class="function"><span class="keyword">function</span> (<span class="params">control</span>) </span>&#123;</span><br><span class="line">      [].forEach.call(forms[i].querySelectorAll(control), <span class="function"><span class="keyword">function</span> (<span class="params">node</span>) </span>&#123;</span><br><span class="line">        tab.push(&#123;</span><br><span class="line">          <span class="string">"Element"</span>: node,</span><br><span class="line">          <span class="string">"Type"</span>: node.type,</span><br><span class="line">          <span class="string">"Name"</span>: node.name,</span><br><span class="line">          <span class="string">"Value"</span>: node.value,</span><br><span class="line">          <span class="string">"Pretty Value"</span>: (<span class="built_in">isNaN</span>(node.value) || node.value === <span class="string">""</span> ? node.value : <span class="built_in">parseFloat</span>(node.value))</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.table(tab);</span><br><span class="line">    <span class="built_in">console</span>.groupEnd();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p><h1 id="log-globals-js"><a href="#log-globals-js" class="headerlink" title="log-globals.js"></a>log-globals.js</h1><blockquote><p>打印全局变量</p></blockquote><p><img src="http://p3alsaatj.bkt.clouddn.com/20180207135302_NLgNKa_Screenshot.jpeg" alt=""><br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="keyword">log</span>-globals</span><br><span class="line"><span class="keyword">by</span> Sindre Sorhus</span><br><span class="line">https:<span class="comment">//github.com/sindresorhus/log-globals</span></span><br><span class="line">MIT License</span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">(function () &#123;</span><br><span class="line">'<span class="keyword">use</span> strict';</span><br><span class="line"></span><br><span class="line">function getIframe() &#123;</span><br><span class="line"><span class="keyword">var</span> el = document.createElement('iframe');</span><br><span class="line">el.style.<span class="keyword">display</span> = 'none';</span><br><span class="line">document.body.appendChild(el);</span><br><span class="line"><span class="keyword">var</span> <span class="keyword">win</span> = el.contentWindow;</span><br><span class="line">document.body.removeChild(el);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">win</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function detectGlobals() &#123;</span><br><span class="line"><span class="keyword">var</span> iframe = getIframe();</span><br><span class="line"><span class="keyword">var</span> <span class="keyword">ret</span> = Object.create(null);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> <span class="keyword">prop</span> <span class="keyword">in</span> <span class="keyword">window</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!(<span class="keyword">prop</span> <span class="keyword">in</span> iframe)) &#123;</span><br><span class="line"><span class="keyword">ret</span>[<span class="keyword">prop</span>] = <span class="keyword">window</span>[<span class="keyword">prop</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">ret</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(detectGlobals());</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p><h1 id="performance-js"><a href="#performance-js" class="headerlink" title="performance.js"></a>performance.js</h1><blockquote><p>打印有关window.performance对象的信息。 使用console.table和分组来组织信息。</p></blockquote><p><img src="http://p3alsaatj.bkt.clouddn.com/20180207135314_IhE6UI_Screenshot.jpeg" alt=""><br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">// performance.js</span><br><span class="line">// https://github.com/bgrins/devtools-snippets</span><br><span class="line">// Print out window.performance information.</span><br><span class="line">// https://developer.mozilla.org/en-US/docs/Navigation_timing</span><br><span class="line"></span><br><span class="line">(function () &#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">var</span> t = window.performance.timing;</span><br><span class="line">  <span class="built_in">var</span> lt = window.chrome &amp;&amp; window.chrome.loadTimes &amp;&amp; window.chrome.loadTimes();</span><br><span class="line">  <span class="built_in">var</span> timings = [];</span><br><span class="line"></span><br><span class="line">  timings.<span class="built_in">push</span>(&#123;</span><br><span class="line">    <span class="built_in">label</span>: <span class="string">"Time Until Page Loaded"</span>,</span><br><span class="line">    <span class="built_in">time</span>: t.loadEventEnd - t.navigationStart + <span class="string">"ms"</span></span><br><span class="line">  &#125;);</span><br><span class="line">  timings.<span class="built_in">push</span>(&#123;</span><br><span class="line">    <span class="built_in">label</span>: <span class="string">"Time Until DOMContentLoaded"</span>,</span><br><span class="line">    <span class="built_in">time</span>: t.domContentLoadedEventEnd - t.navigationStart + <span class="string">"ms"</span></span><br><span class="line">  &#125;);</span><br><span class="line">  timings.<span class="built_in">push</span>(&#123;</span><br><span class="line">    <span class="built_in">label</span>: <span class="string">"Total Response Time"</span>,</span><br><span class="line">    <span class="built_in">time</span>: t.responseEnd - t.requestStart + <span class="string">"ms"</span></span><br><span class="line">  &#125;);</span><br><span class="line">  timings.<span class="built_in">push</span>(&#123;</span><br><span class="line">    <span class="built_in">label</span>: <span class="string">"Connection"</span>,</span><br><span class="line">    <span class="built_in">time</span>: t.connectEnd - t.connectStart + <span class="string">"ms"</span></span><br><span class="line">  &#125;);</span><br><span class="line">  timings.<span class="built_in">push</span>(&#123;</span><br><span class="line">    <span class="built_in">label</span>: <span class="string">"Response"</span>,</span><br><span class="line">    <span class="built_in">time</span>: t.responseEnd - t.responseStart + <span class="string">"ms"</span></span><br><span class="line">  &#125;);</span><br><span class="line">  timings.<span class="built_in">push</span>(&#123;</span><br><span class="line">    <span class="built_in">label</span>: <span class="string">"Domain Lookup"</span>,</span><br><span class="line">    <span class="built_in">time</span>: t.domainLookupEnd - t.domainLookupStart + <span class="string">"ms"</span></span><br><span class="line">  &#125;);</span><br><span class="line">  timings.<span class="built_in">push</span>(&#123;</span><br><span class="line">    <span class="built_in">label</span>: <span class="string">"Load Event"</span>,</span><br><span class="line">    <span class="built_in">time</span>: t.loadEventEnd - t.loadEventStart + <span class="string">"ms"</span></span><br><span class="line">  &#125;);</span><br><span class="line">  timings.<span class="built_in">push</span>(&#123;</span><br><span class="line">    <span class="built_in">label</span>: <span class="string">"Unload Event"</span>,</span><br><span class="line">    <span class="built_in">time</span>: t.unloadEventEnd - t.unloadEventStart + <span class="string">"ms"</span></span><br><span class="line">  &#125;);</span><br><span class="line">  timings.<span class="built_in">push</span>(&#123;</span><br><span class="line">    <span class="built_in">label</span>: <span class="string">"DOMContentLoaded Event"</span>,</span><br><span class="line">    <span class="built_in">time</span>: t.domContentLoadedEventEnd - t.domContentLoadedEventStart + <span class="string">"ms"</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">if</span>(lt) &#123;</span><br><span class="line">    <span class="keyword">if</span>(lt.wasNpnNegotiated) &#123;</span><br><span class="line">      timings.<span class="built_in">push</span>(&#123;</span><br><span class="line">        <span class="built_in">label</span>: <span class="string">"NPN negotiation protocol"</span>,</span><br><span class="line">        <span class="built_in">time</span>: lt.npnNegotiatedProtocol</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    timings.<span class="built_in">push</span>(&#123;</span><br><span class="line">      <span class="built_in">label</span>: <span class="string">"Connection Info"</span>,</span><br><span class="line">      <span class="built_in">time</span>: lt.connectionInfo</span><br><span class="line">    &#125;);</span><br><span class="line">    timings.<span class="built_in">push</span>(&#123;</span><br><span class="line">      <span class="built_in">label</span>: <span class="string">"First paint after Document load"</span>,</span><br><span class="line">      <span class="built_in">time</span>: Math.ceil(lt.firstPaintTime - lt.finishDocumentLoadTime) + <span class="string">"ms"</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">var</span> navigation = window.performance.navigation;</span><br><span class="line">  <span class="built_in">var</span> navigationTypes = &#123; &#125;;</span><br><span class="line">  navigationTypes[navigation.TYPE_NAVIGATENEXT || <span class="number">0</span>] = <span class="string">"Navigation started by clicking on a link, or entering the URL in the user agent's address bar, or form submission."</span>,</span><br><span class="line">  navigationTypes[navigation.TYPE_RELOAD] = <span class="string">"Navigation through the reload operation or the location.reload() method."</span>,</span><br><span class="line">  navigationTypes[navigation.TYPE_BACK_FORWARD] = <span class="string">"Navigation through a history traversal operation."</span>,</span><br><span class="line">  navigationTypes[navigation.TYPE_UNDEFINED] = <span class="string">"Navigation type is undefined."</span>,</span><br><span class="line"></span><br><span class="line">  console.group(<span class="string">"window.performance"</span>);</span><br><span class="line"></span><br><span class="line">  console.<span class="built_in">log</span>(window.performance);</span><br><span class="line"></span><br><span class="line">  console.group(<span class="string">"Navigation Information"</span>);</span><br><span class="line">  console.<span class="built_in">log</span>(navigationTypes[navigation.type]);</span><br><span class="line">  console.<span class="built_in">log</span>(<span class="string">"Number of redirects that have taken place: "</span>, navigation.redirectCount)</span><br><span class="line">  console.groupEnd(<span class="string">"Navigation Information"</span>);</span><br><span class="line"></span><br><span class="line">  console.group(<span class="string">"Timing"</span>);</span><br><span class="line">  console.<span class="built_in">log</span>(window.performance.timing);</span><br><span class="line">  console.table(timings, [<span class="string">"label"</span>, <span class="string">"time"</span>]);</span><br><span class="line">  console.groupEnd(<span class="string">"Timing"</span>);</span><br><span class="line"></span><br><span class="line">  console.groupEnd(<span class="string">"window.performance"</span>);</span><br><span class="line"></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p><h1 id="更多有意思的："><a href="#更多有意思的：" class="headerlink" title="更多有意思的："></a>更多有意思的：</h1><ul><li><a href="http://bgrins.github.io/devtools-snippets/" target="_blank" rel="noopener">http://bgrins.github.io/devtools-snippets/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Snippets是可以在Chrome DevTools的“源”面板中创建和执行的小脚本。 您可以从任何页面访问和运行它们。 当您运行代码段时，它会从当前打开的页面的上下文执行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;显示所有元素的边框
      
    
    </summary>
    
    
      <category term="snippets" scheme="https://wdd.js.org/tags/snippets/"/>
    
  </entry>
  
  <entry>
    <title>nodejs 日志插件比较 VS 自定义日志插件</title>
    <link href="https://wdd.js.org/nodejs-log-packages.html"/>
    <id>https://wdd.js.org/nodejs-log-packages.html</id>
    <published>2018-02-07T05:46:51.000Z</published>
    <updated>2018-02-07T05:49:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="morgan"><a href="#morgan" class="headerlink" title="morgan"></a><a href="https://github.com/expressjs/morgan" target="_blank" rel="noopener">morgan</a></h1><ul><li>【优点】morgan配置非常简单</li><li>【优点】支持自定义日志格式</li><li>【优点】支持日志分机</li><li>【优点】支持日志压缩：使用<a href="https://github.com/iccicci/rotating-file-stream" target="_blank" rel="noopener">rotating-file-stream</a></li><li>【缺点】无法同时往console和文件中写日志</li></ul><h1 id="log4js-node"><a href="#log4js-node" class="headerlink" title="log4js-node"></a><a href="https://github.com/nomiddlename/log4js-node" target="_blank" rel="noopener">log4js-node</a></h1><ul><li>【优点】配置简单</li><li>【优点】支持同时往控制台和文件中写数据</li><li>【优点】支持按照时间或文件大小分割文件</li><li>【优点】支持文件压缩<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line">, log4js = <span class="built_in">require</span>(<span class="string">'../lib/log4js'</span>);</span><br><span class="line"></span><br><span class="line">log4js.configure(</span><br><span class="line">  &#123;</span><br><span class="line">    appenders: [</span><br><span class="line">      &#123;</span><br><span class="line">        type: <span class="string">"file"</span>,</span><br><span class="line">        filename: <span class="string">"important-things.log"</span>,</span><br><span class="line">        maxLogSize: <span class="number">10</span>*<span class="number">1024</span>*<span class="number">1024</span>, <span class="comment">// = 10Mb</span></span><br><span class="line">        numBackups: <span class="number">5</span>, <span class="comment">// keep five backup files</span></span><br><span class="line">        compress: <span class="literal">true</span>, <span class="comment">// compress the backups</span></span><br><span class="line">        encoding: <span class="string">'utf-8'</span>,</span><br><span class="line">        mode: <span class="built_in">parseInt</span>(<span class="string">'0640'</span>, <span class="number">8</span>),</span><br><span class="line">        flags: <span class="string">'w+'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        type: <span class="string">"dateFile"</span>,</span><br><span class="line">        filename: <span class="string">"more-important-things.log"</span>,</span><br><span class="line">        pattern: <span class="string">"yyyy-MM-dd-hh"</span>,</span><br><span class="line">        compress: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        type: <span class="string">"stdout"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> logger = log4js.getLogger(<span class="string">'things'</span>);</span><br><span class="line">logger.debug(<span class="string">"This little thing went to market"</span>);</span><br><span class="line">logger.info(<span class="string">"This little thing stayed at home"</span>);</span><br><span class="line">logger.error(<span class="string">"This little thing had roast beef"</span>);</span><br><span class="line">logger.fatal(<span class="string">"This little thing had none"</span>);</span><br><span class="line">logger.trace(<span class="string">"and this little thing went wee, wee, wee, all the way home."</span>);</span><br></pre></td></tr></table></figure></li></ul><h1 id="winston"><a href="#winston" class="headerlink" title="winston"></a><a href="https://github.com/winstonjs/winston" target="_blank" rel="noopener">winston</a></h1><ul><li>没用过，不做评论</li></ul><h1 id="fluent-logger-node"><a href="#fluent-logger-node" class="headerlink" title="fluent-logger-node"></a><a href="https://github.com/fluent/fluent-logger-node" target="_blank" rel="noopener">fluent-logger-node</a></h1><ul><li>往fluntd中写日志，没用过</li></ul><h1 id="express-winston"><a href="#express-winston" class="headerlink" title="express-winston"></a><a href="https://github.com/bithavoc/express-winston" target="_blank" rel="noopener">express-winston</a></h1><ul><li>没用过</li></ul><h1 id="如何自定义一个日志插件"><a href="#如何自定义一个日志插件" class="headerlink" title="如何自定义一个日志插件"></a>如何自定义一个日志插件</h1><ul><li>可以自定义日志结构</li><li>日志文件可以用gzip压缩</li><li>不影响往console写日志</li><li>可以按时间分割日志</li><li>支持日志覆盖，最多保留1个月的备份</li></ul><p>使用<a href="https://github.com/iccicci/rotating-file-stream" target="_blank" rel="noopener">rotating-file-stream</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> rfs = <span class="built_in">require</span>(<span class="string">'rotating-file-stream'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> logDirectory = __dirname;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Wpad</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (num &gt; <span class="number">9</span> ? <span class="string">""</span> : <span class="string">"0"</span>) + num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * [Wgenerator 创建文件名函数]</span></span><br><span class="line"><span class="comment"> * @Author   Wdd</span></span><br><span class="line"><span class="comment"> * @DateTime 2017-02-22T10:13:39+0800</span></span><br><span class="line"><span class="comment"> * 日志会保留一个月的：因为日志文件名是只使用日期，9月8号的日志就会覆盖8月8号的日志</span></span><br><span class="line"><span class="comment"> * 文件的格式是gzip</span></span><br><span class="line"><span class="comment"> * 文件名例如：22-log.gizp</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Wgenerator</span>(<span class="params">time, index</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(! time)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"temp-log.txt.gzip"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"/storage/"</span>+ Wpad(time.getDate()) +<span class="string">"-log.txt.gzip"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> accessLogStream = rfs(Wgenerator, &#123;</span><br><span class="line">    interval: <span class="string">'1d'</span>, <span class="comment">// 周期为1天</span></span><br><span class="line">    path: logDirectory,</span><br><span class="line">    compress: <span class="string">'gzip'</span> ,</span><br><span class="line">    rotationTime:<span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * [exports description]</span></span><br><span class="line"><span class="comment"> * @Author   Wdd</span></span><br><span class="line"><span class="comment"> * @DateTime 2017-02-22T10:24:06+0800</span></span><br><span class="line"><span class="comment"> * 使用方式：</span></span><br><span class="line"><span class="comment"> * 1. 安装rotating-file-stream</span></span><br><span class="line"><span class="comment"> * 2. 在根目录下创建一个文件夹，例如logs。然后把access-log.js放进去</span></span><br><span class="line"><span class="comment"> * 3. 在app.js中var mylog = require('./logs/access-log');</span></span><br><span class="line"><span class="comment"> * 4. 在app = express(); 后添加一句 app.use(mylog);</span></span><br><span class="line"><span class="comment"> * 5. 日志文件会自动生成在./logs/storage文件夹下面，当天的日志会保存在暂存的./logs/temp-log.gzip里</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">req._startTime = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line">res.once(<span class="string">'finish'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> msg = <span class="string">""</span>;</span><br><span class="line"><span class="comment">//hostname</span></span><br><span class="line">msg = process.env.hostname+<span class="string">" "</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 时间</span></span><br><span class="line">msg += <span class="keyword">new</span> <span class="built_in">Date</span>()+<span class="string">" "</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求方式</span></span><br><span class="line">msg += req.method+<span class="string">" "</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应状态码</span></span><br><span class="line">msg += res.statusCode+<span class="string">" "</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sessionId</span></span><br><span class="line">msg += req.headers.sessionid+<span class="string">" "</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应时长</span></span><br><span class="line">msg += <span class="keyword">new</span> <span class="built_in">Date</span>() - req._startTime ;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求路径</span></span><br><span class="line">msg += <span class="string">" "</span> + req.originalUrl +<span class="string">'\n\r\n\r'</span>;</span><br><span class="line"></span><br><span class="line">accessLogStream.write(msg);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">next();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;morgan&quot;&gt;&lt;a href=&quot;#morgan&quot; class=&quot;headerlink&quot; title=&quot;morgan&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/expressjs/morgan&quot; target=&quot;_blank&quot; rel=&quot;n
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>jQuery进阶：用最优雅的方式写ajax请求</title>
    <link href="https://wdd.js.org/elegant-way-write-ajax-request.html"/>
    <id>https://wdd.js.org/elegant-way-write-ajax-request.html</id>
    <published>2018-02-07T05:42:36.000Z</published>
    <updated>2018-02-07T05:43:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="首先需要一个配置文件"><a href="#首先需要一个配置文件" class="headerlink" title="首先需要一个配置文件"></a>首先需要一个配置文件</h1><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var api = &#123;</span><br><span class="line">basePath: <span class="string">'http://192.168.200.226:58080'</span>,</span><br><span class="line">pathList: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">name</span>: <span class="string">'agentHeartBeat'</span>,</span><br><span class="line"><span class="built_in">path</span>:<span class="string">'/api/csta/agent/heartbeat/&#123;&#123;agentId&#125;&#125;/&#123;&#123;type&#125;&#125;/&#123;&#123;something&#125;&#125;'</span>,</span><br><span class="line">method:<span class="string">'get'</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">name</span>: <span class="string">'setAgentState'</span>,</span><br><span class="line"><span class="built_in">path</span>: <span class="string">'/api/csta/agent/state'</span>,</span><br><span class="line">method: <span class="string">'post'</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">name</span>: <span class="string">'getAgents'</span>,</span><br><span class="line"><span class="built_in">path</span>: <span class="string">'/user/agent/&#123;&#123;query&#125;&#125;'</span>,</span><br><span class="line">method: <span class="string">'get'</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="然后需要一个方法，把配置文件生成接口"><a href="#然后需要一个方法，把配置文件生成接口" class="headerlink" title="然后需要一个方法，把配置文件生成接口"></a>然后需要一个方法，把配置文件生成接口</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">WellApi</span><span class="params">(Config)</span></span>&#123;</span><br><span class="line"><span class="keyword">var</span> headers = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> Api = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">Api.pt = Api.prototype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> util = &#123;</span><br><span class="line">ajax: <span class="function"><span class="keyword">function</span><span class="params">(url, method, payload)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $.ajax(&#123;</span><br><span class="line">        url: url,</span><br><span class="line">        type: method || <span class="string">"get"</span>,</span><br><span class="line">        data: JSON.stringify(payload),</span><br><span class="line">        headers: headers,</span><br><span class="line">        dataType: <span class="string">"json"</span>,</span><br><span class="line">        contentType: <span class="string">'application/json; charset=UTF-8'</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * [render 模板渲染]</span></span><br><span class="line"><span class="comment"> * 主要用于将 /users/&#123;&#123;userId&#125;&#125; 和&#123;userId: '89898'&#125;转换成/users/89898，和mastache语法差不多，</span></span><br><span class="line"><span class="comment"> * 当然我们没必要为了这么小的一个功能来引入一个模板库</span></span><br><span class="line"><span class="comment"> * query字符串可以当做一个参数传递进来</span></span><br><span class="line"><span class="comment"> * 例如： /users/&#123;&#123;query&#125;&#125;和&#123;query:'?name=jisika&amp;sex=1'&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>   Wdd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DateTime</span> 2017-03-13T19:42:58+0800</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>    &#123;[type]&#125; tpl [description]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>    &#123;[type]&#125; data [description]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>   &#123;[type]&#125; [description]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">render: <span class="function"><span class="keyword">function</span><span class="params">(tpl, data)</span></span>&#123;</span><br><span class="line"><span class="keyword">var</span> re = /&#123;&#123;([^&#125;]+)?&#125;&#125;/;</span><br><span class="line"><span class="keyword">var</span> match = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(match = re.exec(tpl))&#123;</span><br><span class="line">    tpl = tpl.replace(match[<span class="number">0</span>],data[match[<span class="number">1</span>]]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> tpl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * [setHeader 暴露设置头部信息的方法]</span></span><br><span class="line"><span class="comment"> * 有些方法需要特定的头部信息，例如登录之后才能获取sesssionId,然后访问所有的接口时，必须携带sessionId</span></span><br><span class="line"><span class="comment"> * 才可以访问</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>   Wdd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DateTime</span> 2017-03-13T10:34:03+0800</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>    &#123;[type]&#125; headers [description]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Api.pt.setHeader = <span class="function"><span class="keyword">function</span><span class="params">(headers)</span></span>&#123;</span><br><span class="line">headers = headers;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * [fire 发送ajax请求，this会绑定到每个接口上]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>   Wdd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DateTime</span> 2017-03-13T19:42:13+0800</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>    &#123;[type]&#125; pathParm [description]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>    &#123;[type]&#125; payload [description]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>   &#123;[type]&#125; [description]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fire</span><span class="params">(pathParm, payload)</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> url = util.render(this.path, pathParm);</span><br><span class="line">    <span class="keyword">return</span> util.ajax(url, this.method, payload);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * [for 遍历所有接口]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>   Wdd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DateTime</span> 2017-03-13T19:49:33+0800</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>    &#123;[type]&#125; var i [description]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>   &#123;[type]&#125; [description]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; Config.pathList.length; i++)&#123;</span><br><span class="line"></span><br><span class="line">    Api.pt[Config.pathList[i].name] = &#123;</span><br><span class="line">        path: Config.basePath + Config.pathList[i].path,</span><br><span class="line">        method: Config.pathList[i].method,</span><br><span class="line">        fire: fire</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Api();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="试用一下"><a href="#试用一下" class="headerlink" title="试用一下"></a>试用一下</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://cdn.bootcss.com/jquery/1.11.3/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"api.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery-ajax.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> saas = WellApi(api);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">saas.agentHeartBeat.fire(&#123;agentId: <span class="string">'5001@1011.cc'</span>, type:<span class="string">'a'</span>, something: <span class="string">'test'</span>&#125;)</span></span><br><span class="line"><span class="actionscript">.done(<span class="function"><span class="keyword">function</span><span class="params">(res)</span></span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">'心跳成功'</span>);</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="actionscript">.fail(<span class="function"><span class="keyword">function</span><span class="params">(res)</span></span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">'心跳失败'</span>);</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 如果没有参数要渲染到路径上，那个第一个参数可以传空对象</span></span></span><br><span class="line"><span class="actionscript">saas.setAgentState.fire(&#123;&#125;, &#123;status: <span class="string">'Ready'</span>&#125;)</span></span><br><span class="line"><span class="actionscript">.done(<span class="function"><span class="keyword">function</span><span class="params">(res)</span></span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">'设置成功'</span>);</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="actionscript">.fail(<span class="function"><span class="keyword">function</span><span class="params">(res)</span></span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">'设置失败'</span>);</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><p><code>fire(pathParm, payload)</code>中的<code>pathParm</code>是最终会被渲染到请求的路径里面，而paylaod代表请求体。 </p><p>例如：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 路径这么写</span></span><br><span class="line"><span class="regexp">/api/</span>&#123;&#123;version&#125;&#125;<span class="regexp">/agent/</span>&#123;&#123;id&#125;&#125;/&#123;&#123;somethingElse&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pathParm这样写</span></span><br><span class="line">&#123;<span class="string">version:</span> <span class="number">1</span>, <span class="string">id:</span> <span class="string">'2'</span>, <span class="string">somethingElse:</span> <span class="string">'sss'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最终路径会被渲染成</span></span><br><span class="line"><span class="regexp">/api/</span><span class="number">1</span><span class="regexp">/agent/</span><span class="number">2</span>/sss</span><br></pre></td></tr></table></figure></p><p><code>path里面不仅仅可放一个变量的</code>，具体可以参考<a href="https://github.com/janl/mustache.js" target="_blank" rel="noopener">mustache</a>语法，上面代码里的render是以最简单的实现。</p><h1 id="优点与扩展"><a href="#优点与扩展" class="headerlink" title="优点与扩展"></a>优点与扩展</h1><ul><li>[优点]：类似与promise的回调方式</li><li>[优点]：增加一个接口只是需要增加一个配置文件，很方便</li><li>[扩展]：当前的ajax 的contentType我只写了json，有兴趣可以扩展其他的数据类型</li><li>[缺点]：没有对函数参数进行校验</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;首先需要一个配置文件&quot;&gt;&lt;a href=&quot;#首先需要一个配置文件&quot; class=&quot;headerlink&quot; title=&quot;首先需要一个配置文件&quot;&gt;&lt;/a&gt;首先需要一个配置文件&lt;/h1&gt;&lt;figure class=&quot;highlight xl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;
      
    
    </summary>
    
    
      <category term="ajxa" scheme="https://wdd.js.org/tags/ajxa/"/>
    
      <category term="jQuery" scheme="https://wdd.js.org/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>2017年 最好的javascript 书籍</title>
    <link href="https://wdd.js.org/2017-best-js-books.html"/>
    <id>https://wdd.js.org/2017-best-js-books.html</id>
    <published>2018-02-07T02:19:22.000Z</published>
    <updated>2018-02-07T02:21:34.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我看过三本，第1本，第二本，第四本。第一本买的的实体书，其他两本看的是电子书。第一本是大名鼎鼎老道写的，书很薄，但是非常经典。javascirpt忍者秘籍是jquery的作者写的，也是非常经典。you dont kown js系列也是非常好。看了收益匪浅。文章是谷歌翻译的，英文好的直接看原文吧。</p></blockquote><p>原文：<a href="https://reactdom.com/blog/javascript-books" target="_blank" rel="noopener">https://reactdom.com/blog/javascript-books</a></p><blockquote><p>你不能是一个好的ReactJS，React Native或GraphQL开发人员，如果你没有很好地理解JavaScript。有太多的JavaScript书出来，每月出来更多。那么什么是最好的JavaScript书为你？经过多年的经历，这些是学习JavaScript的最好的JavaScript书。请记住，这些书中的一些可能不是最新的，但概念和基础仍应适用。我们将继续更新这个最好的JavaScript书籍的列表，还有书签，共享和定期检查！</p></blockquote><h1 id="JavaScript-The-Good-Parts《JavaScript语言精粹》"><a href="#JavaScript-The-Good-Parts《JavaScript语言精粹》" class="headerlink" title="JavaScript: The Good Parts《JavaScript语言精粹》"></a>JavaScript: The Good Parts《JavaScript语言精粹》</h1><p><img src="http://p3alsaatj.bkt.clouddn.com/20180207102004_vjixz0_Screenshot.jpeg" alt=""></p><p>JavaScript：Douglas Crockford的Good Parts是JavaScript书籍历史中的一个重要版本，是每个JavaScript程序员都需要阅读的一本书。 Douglas Crockford是JSON，JSLint的创建者，并且对JavaScript的开发做出了许多贡献。</p><p>JavaScript：The Good Parts侧重于使JavaScript成为一个伟大的面向对象编程语言的想法。这些想法包括函数，对象，语法，符号等。不幸的是，这些好的想法与坏的和彻底的可怕的想法混在一起，如基于全局变量的编程模型。这本书将告诉你如何避免这些坏的部分，并使用好的部分来制作伟大的代码。</p><p>JavaScript：Good Parts将告诉你如何创建优雅的代码，而不管你使用JavaScript的方式。如果你为Web开发网站或应用程序，这本书是绝对必须的。你需要编写复杂的接口，做大量的计算和处理JS，就像它是面向对象的语言，这实际上是一个必读。</p><h1 id="You-Don’t-Know-JS《你不知道js》"><a href="#You-Don’t-Know-JS《你不知道js》" class="headerlink" title="You Don’t Know JS《你不知道js》"></a>You Don’t Know JS《你不知道js》</h1><p><img src="http://p3alsaatj.bkt.clouddn.com/20180207102016_UmVPGO_Screenshot.jpeg" alt=""></p><p>你不知道JS通过Kyle Simpson是一个JavaScript系列的书，将显示你的JavaScript知识的差距，然后教你需要了解JavaScript的一切，以弥补这些差距。 Kyle Simpson是最好的JavaScript老师之一。任何认真对待JavaScript的人都应该注意凯尔的所有教义。</p><p>你不知道JS书籍处理JavaScript的棘手部分，以帮助你实现真正的JavaScript掌握。这些书的范围相似，涵盖了并不总是被理解的主题。你不知道JS是每个级别的开发人员的完美。这些书在范围上非常具体，这是它的最大优势。</p><p>你不知道JS书系列是所有JavaScript程序员的必须，所有的书是伟大的。短书的长度是一件伟大的事情，你可以快速完成，而不失去焦点。你不知道JS带有最高的建议。</p><h1 id="JavaScript-The-Definitive-Guide《JavaScript权威指南》"><a href="#JavaScript-The-Definitive-Guide《JavaScript权威指南》" class="headerlink" title="JavaScript: The Definitive Guide《JavaScript权威指南》"></a>JavaScript: The Definitive Guide《JavaScript权威指南》</h1><p><img src="http://p3alsaatj.bkt.clouddn.com/20180207102027_1Flhff_Screenshot.jpeg" alt=""></p><p>JavaScript：David Flanagan的“绝对指南”是一本书，它肯定是一个非常沉重的标题，绝对是最好的JavaScript书籍之一。 David Flanagan在Mozilla工作，他的大部分时间都在编写编程书。</p><p>JavaScript：The Definitive Guide被分为两个部分，分别是讨论和引用。这两个部分中的每一个包含两个部分，核心和客户端。核心章节涵盖了数据类型，函数，类等语言特性。客户端章节涵盖了在浏览器中运行的JavaScript的使用。 JavaScript：The Definitive Guide包括基于作者现实世界经验的准确文档。</p><p>JavaScript：The Definitive Guide多年来一直有多个版本和更新。这是很好的理由;这本书总是在改进，作者总是参与新版本（缺乏许多JavaScript书籍的东西）。无论版本是什么，本书的基础和核心以及JavaScript保持不变。</p><p>JavaScript：The Definitive Guide是一个关于JavaScript的最终指南，从基础知识开始，一直到高级功能。 JavaScript：The Definitive Guide属于每个程序员的架子，不能被推荐足够。</p><h1 id="Secrets-of-the-JavaScript-Ninja《JavaScript忍者秘籍》"><a href="#Secrets-of-the-JavaScript-Ninja《JavaScript忍者秘籍》" class="headerlink" title="Secrets of the JavaScript Ninja《JavaScript忍者秘籍》"></a>Secrets of the JavaScript Ninja《JavaScript忍者秘籍》</h1><p><img src="http://p3alsaatj.bkt.clouddn.com/20180207102038_jVjJSH_Screenshot.jpeg" alt=""></p><p>JavaScript Ninja的秘密由John Resig，Bear Bibeault＆Josip Maras是一个JavaScript经典，将把你变成一个JavaScript忍者。 John Resig是jQuery库的创建者，Bear Bibeault是一名网络开发人员，Josip Maras是一位博士后研究员。</p><p>JavaScript Ninja的秘密由4部分组成。每个部分都集中在几个相关的话题，从基础到高级。包括的一些主题是功能，对象，原型，承诺等。本书有很多有用的摘要和练习。</p><p>JavaScript Ninja的秘密使用非常实用的例子清楚地说明每个核心概念和技术。 JavaScript Ninja的秘密还包括API，最佳实践，跨各种浏览器测试等。</p><p>JavaScript Ninja的秘密是非常精巧的写作，这是没有什么惊喜，因为作者在JavaScript非常有经验。 JavaScript Ninja的秘密推荐给任何想成为一个JavaScript忍者，这是每个人。</p><h1 id="Effective-JavaScript-68-Specific-Ways-to-Harness-the-Power-of-JavaScript"><a href="#Effective-JavaScript-68-Specific-Ways-to-Harness-the-Power-of-JavaScript" class="headerlink" title="Effective JavaScript: 68 Specific Ways to Harness the Power of JavaScript"></a>Effective JavaScript: 68 Specific Ways to Harness the Power of JavaScript</h1><p><img src="http://p3alsaatj.bkt.clouddn.com/20180207102048_OqhkNl_Screenshot.jpeg" alt=""></p><p>有效的JavaScript：68具体的方法来利用JavaScript的力量David Herman将教会你通过68提示和技巧写更好的JavaScript。 David Herman是Mozilla Research的首席研究员，在Ecma的JavaScript标准化委员会有多年的经验。</p><p>有效的JavaScript集中在68个不同的课程与示例，使你写更好的JavaScript。从基础到高级功能的一切都在详细讨论。要成为JavaScript的主人，您必须学习如何避免陷阱，并使用JavaScript的强大功能有效地工作。有效的JavaScript将帮助编写更好和可维护的代码，而不管您的JavaScript体验。</p><p>有效的JavaScript涵盖68个JavaScript原则到68个简短的课程，使它成为一个伟大的方式来学习JavaScript。 Effective JavaScript是一本推荐给所有级别的JavaScript程序员的书，不管它们有多忙。</p><h1 id="JavaScript-Patterns-Build-Better-Applications-with-Coding-and-Design-Patterns"><a href="#JavaScript-Patterns-Build-Better-Applications-with-Coding-and-Design-Patterns" class="headerlink" title="JavaScript Patterns: Build Better Applications with Coding and Design Patterns"></a>JavaScript Patterns: Build Better Applications with Coding and Design Patterns</h1><p><img src="http://p3alsaatj.bkt.clouddn.com/20180207102104_pqt50u_Screenshot.jpeg" alt=""></p><p>JavaScript模式：使用编码和设计模式构建更好的应用程序Stoyan Stefanov教你JavaScript编码模式和最佳实践。 Stoyan Stefanov在雅虎工作，是YSlow 2.0的建筑师</p><p>JavaScript模式将引导您使用模式和反模式编写JavaScript。讨论了Singleton等经典设计模式，然后展示了如何在JavaScript中使用它们。讨论了编写高质量JavaScript代码和定义函数的不同和适当方法的伟大习惯。本书涵盖了大量的继承和代码重用技术。 JavaScript模式将教你从初学者到高级水平所需的一切。</p><p>JavaScript模式在JavaScript的教学模式以及详细的代码示例方面非常出色。这本书展示了你使用它教授的各种技术的优点和缺点。 JavaScript模式是一本关于开发JavaScript应用程序的精心编写的书，应该用作各级JavaScript开发人员的参考。</p><h1 id="The-Principles-of-Object-Oriented-JavaScript"><a href="#The-Principles-of-Object-Oriented-JavaScript" class="headerlink" title="The Principles of Object-Oriented JavaScript"></a>The Principles of Object-Oriented JavaScript</h1><p><img src="http://p3alsaatj.bkt.clouddn.com/20180207102115_O5ja00_Screenshot.jpeg" alt=""></p><p>Nicholas C. Zakas的面向对象JavaScript的原理探讨了JavaScript的面向对象的特性，并揭示了JavaScript如何使用继承和其他关键属性。 Nicholas C. Zakas是一位前端顾问，在他的主页，YUI等上与Yahoo广泛合作。</p><p>面向对象的JavaScript的原则遍历所有的方式在JavaScript中使用面向对象的原则。所有讨论的主题，如处理原型，对象，构造函数等。面向对象的JavaScript的原则涵盖了所有提供的解决方案的优点和缺点，同时深入地涵盖了主题。所有级别的JavaScript开发人员都将从阅读本书中获益良多，并编写更高效的代码。</p><p>面向对象的JavaScript的原则涵盖JavaScript的面向对象的方面，并且非常好。这本书的长度不算太大，所以它不会压倒你。如果你想使用JavaScript的面向对象的原则，面向对象的JavaScript的原则是为你。</p><h1 id="Eloquent-JavaScript-A-Modern-Introduction-to-Programming"><a href="#Eloquent-JavaScript-A-Modern-Introduction-to-Programming" class="headerlink" title="Eloquent JavaScript: A Modern Introduction to Programming"></a>Eloquent JavaScript: A Modern Introduction to Programming</h1><p><img src="http://p3alsaatj.bkt.clouddn.com/20180207102127_poTUgO_Screenshot.jpeg" alt=""></p><p>雄辩的JavaScript：Marijn的现代编程介绍Haverbeke是一本关于JavaScript的惊人的书。这肯定是一本雄辩的书.Marijn Haverbeke在开源软件上工作，并创建了CodeMirror和Tern。</p><p>雄辩的JavaScript是所有关于编程。这本书专注于编程和所有的编程概念。雄辩的JavaScript是伟大的初学者，因为它假设没有以前的经验，从编程的基础开始。</p><p>雄辩的JavaScript使用一个非常集中的路线图，并充满了练习。 Eloquent JavaScript是一本伟大的书，可以启动JavaScript，并推荐给大家。</p><p>擅长JavaScript是一个需要是一个好的ReactJS开发人员。无论你在JavaScript中的专业水平，这些书将帮助你成为一个更好的JavaScript开发人员。不仅如此，他们还会让你成为一个更好的ReactJS和前端开发人员。<br>在你完成这些书后，查看ReactJS书籍和最好的React本土书籍。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;我看过三本，第1本，第二本，第四本。第一本买的的实体书，其他两本看的是电子书。第一本是大名鼎鼎老道写的，书很薄，但是非常经典。javascirpt忍者秘籍是jquery的作者写的，也是非常经典。you dont kown js系列也是非常好。看了收
      
    
    </summary>
    
    
      <category term="books" scheme="https://wdd.js.org/tags/books/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记：编写高质量javascript的68个方法</title>
    <link href="https://wdd.js.org/68-skills-to-write-better-js-code.html"/>
    <id>https://wdd.js.org/68-skills-to-write-better-js-code.html</id>
    <published>2018-02-07T02:17:16.000Z</published>
    <updated>2018-02-07T02:18:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>书还没看完。一遍看，一遍写读书笔记。</p><p>这本书的序是JavaScript之父Brendan Eich写的，作者是JavaScript标准化委员会专家。可想而知其质量如何。这本书不厚，和《JavaScript语言精粹》差不多厚，约等于4分之一的《JavaScript权威指南》的厚度。绝对值得一看。</p><h1 id="本书赞誉"><a href="#本书赞誉" class="headerlink" title="本书赞誉"></a>本书赞誉</h1><p>本书的赞誉有来自Chrome开发主管，有来自JSHint的专家，还有一些行业大咖。</p><blockquote><p>如果你想成为一名真正的JavaScript开发者, 那么请阅读这本书。就我来说，我多么希望在第一次开始JavaScript编程时就阅读它。—Anton Kovalyov, JSHint开发者</p><p>很少有人有机会同大师一起学习他们的手艺。这本书弥补了这种缺陷，其对JavaScript的研究就像随一位时间旅行哲学家回到公园前5世纪与柏拉图一起学习。—Rick Waldron, JavaScript传教士， Bocoup</p></blockquote><h1 id="让自己习惯JavaScript"><a href="#让自己习惯JavaScript" class="headerlink" title="让自己习惯JavaScript"></a>让自己习惯JavaScript</h1><blockquote><p>有些人说不清哪里好，可就是谁也替代不了。</p><h2 id="了解你使用的JavaScript的版本"><a href="#了解你使用的JavaScript的版本" class="headerlink" title="了解你使用的JavaScript的版本"></a>了解你使用的JavaScript的版本</h2></blockquote><h2 id="理解JavaScript的浮点数"><a href="#理解JavaScript的浮点数" class="headerlink" title="理解JavaScript的浮点数"></a>理解JavaScript的浮点数</h2><h2 id="当心隐式的强制类型转换"><a href="#当心隐式的强制类型转换" class="headerlink" title="当心隐式的强制类型转换"></a>当心隐式的强制类型转换</h2><h2 id="原始类型优于封装对象"><a href="#原始类型优于封装对象" class="headerlink" title="原始类型优于封装对象"></a>原始类型优于封装对象</h2><h2 id="避免对混合类型使用-运算符"><a href="#避免对混合类型使用-运算符" class="headerlink" title="避免对混合类型使用 == 运算符"></a>避免对混合类型使用 == 运算符</h2><h2 id="了解分号插入的局限"><a href="#了解分号插入的局限" class="headerlink" title="了解分号插入的局限"></a>了解分号插入的局限</h2><h2 id="视字符串为16位的代码单元序列"><a href="#视字符串为16位的代码单元序列" class="headerlink" title="视字符串为16位的代码单元序列"></a>视字符串为16位的代码单元序列</h2><h1 id="变量与作用域"><a href="#变量与作用域" class="headerlink" title="变量与作用域"></a>变量与作用域</h1><blockquote><p>作用域对程序员来说就像氧气。它无处不在，甚至，你往往不会去想它。但当它被污染时，你会感觉到窒息。</p></blockquote><h2 id="尽量少使用全局对象"><a href="#尽量少使用全局对象" class="headerlink" title="尽量少使用全局对象"></a>尽量少使用全局对象</h2><ul><li>避免声明全局变量</li><li>尽量声明局部变量</li><li>避免对全局变量增加属性</li></ul><h2 id="始终声明局部变量"><a href="#始终声明局部变量" class="headerlink" title="始终声明局部变量"></a>始终声明局部变量</h2><h2 id="避免使用with语句"><a href="#避免使用with语句" class="headerlink" title="避免使用with语句"></a>避免使用with语句</h2><h2 id="熟练使用闭包"><a href="#熟练使用闭包" class="headerlink" title="熟练使用闭包"></a>熟练使用闭包</h2><blockquote><p>JavaScript的函数值包含了比调用他们时执行所需要的代码还要更多的信息。而且，JavaScript函数值还在内部存储他们可能会引用的定义在其封闭作用域的变量。那些在其所涵盖的作用域内跟踪变量的函数称为闭包。</p></blockquote><ul><li>JavaScript允许你引用在当前函数以外定义的变量</li><li>即使外部函数已经返回，当前函数仍然可以引用外部函数定义的变量</li><li>闭包可以更新外部函数的值</li></ul><h2 id="理解变量声明提升"><a href="#理解变量声明提升" class="headerlink" title="理解变量声明提升"></a>理解变量声明提升</h2><h2 id="使用立即调用表达式创建局部作用域"><a href="#使用立即调用表达式创建局部作用域" class="headerlink" title="使用立即调用表达式创建局部作用域"></a>使用立即调用表达式创建局部作用域</h2><h2 id="当心命名函数表达式笨拙的作用域"><a href="#当心命名函数表达式笨拙的作用域" class="headerlink" title="当心命名函数表达式笨拙的作用域"></a>当心命名函数表达式笨拙的作用域</h2><h2 id="当心局部块函数声明笨拙的作用域"><a href="#当心局部块函数声明笨拙的作用域" class="headerlink" title="当心局部块函数声明笨拙的作用域"></a>当心局部块函数声明笨拙的作用域</h2><h2 id="避免使用evel创建局部变量"><a href="#避免使用evel创建局部变量" class="headerlink" title="避免使用evel创建局部变量"></a>避免使用evel创建局部变量</h2><h2 id="间接调用eval函数函数优于直接调用"><a href="#间接调用eval函数函数优于直接调用" class="headerlink" title="间接调用eval函数函数优于直接调用"></a>间接调用eval函数函数优于直接调用</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;书还没看完。一遍看，一遍写读书笔记。&lt;/p&gt;
&lt;p&gt;这本书的序是JavaScript之父Brendan Eich写的，作者是JavaScript标准化委员会专家。可想而知其质量如何。这本书不厚，和《JavaScript语言精粹》差不多厚，约等于4分之一的《JavaScrip
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript 高级技巧</title>
    <link href="https://wdd.js.org/js-high-skills.html"/>
    <id>https://wdd.js.org/js-high-skills.html</id>
    <published>2018-02-07T02:14:56.000Z</published>
    <updated>2018-02-07T02:16:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安全类型检测"><a href="#安全类型检测" class="headerlink" title="安全类型检测"></a>安全类型检测</h2><ul><li>javascript内置类型检测并不可靠</li><li>safari某些版本（&lt;4）typeof正则表达式返回为function</li></ul><p>建议使用Object.prototype.toString.call()方法检测数据类型<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(value) === <span class="string">"[object Array]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFunction</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(value) === <span class="string">"[object Function]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isRegExp</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(value) === <span class="string">"[object RegExp]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isNativeJSON</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">window</span>.JSON &amp;&amp; <span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">JSON</span>) === <span class="string">"[object JSON]"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>对于ie中一COM对象形式实现的任何函数，isFunction都返回false，因为他们并非原生的javascript函数。</code></p><p><strong>在web开发中，能够区分原生与非原生的对象非常重要。只有这样才能确切知道某个对象是否有哪些功能</strong></p><p>以上所有的正确性的前提是：Object.prototype.toString没有被修改过</p><h2 id="作用域安全的构造函数"><a href="#作用域安全的构造函数" class="headerlink" title="作用域安全的构造函数"></a>作用域安全的构造函数</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">(name)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用new来创建一个对象</span></span><br><span class="line"><span class="keyword">var</span> one = <span class="keyword">new</span> Person(<span class="string">'wdd'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//直接调用构造函数</span></span><br><span class="line">Person();</span><br></pre></td></tr></table></figure><p>由于this是运行时分配的，如果你使用new来操作，this指向的就是one。如果直接调用构造函数，那么this会指向全局对象window,然后你的代码就会覆盖window的原生name。如果有其他地方使用过window.name, 那么你的函数将会埋下一个深藏的bug。</p><p>==那么，如何才能创建一个作用域安全的构造函数？==<br>方法1<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">(name)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span> <span class="keyword">instanceof</span> Person)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="惰性载入函数"><a href="#惰性载入函数" class="headerlink" title="惰性载入函数"></a>惰性载入函数</h1><p>假设有一个方法X，在A类浏览器里叫A,在b类浏览器里叫B,有些浏览器并没有这个方法,你想实现一个跨浏览器的方法。</p><p>惰性载入函数的思想是：<code>在函数内部改变函数自身的执行逻辑</code></p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">X</span></span>()&#123;</span><br><span class="line">    <span class="keyword">if</span>(A)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">A</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(B)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">B</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">Error</span>(<span class="string">'no A or B'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>换一种写法<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">X</span></span>()&#123;</span><br><span class="line">    <span class="keyword">if</span>(A)&#123;</span><br><span class="line">        X = <span class="function"><span class="keyword">function</span></span>()&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">A</span>();</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(B)&#123;</span><br><span class="line">            X = <span class="function"><span class="keyword">function</span></span>()&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">B</span>();</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">Error</span>(<span class="string">'no A or B'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">X</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="防篡改对象"><a href="#防篡改对象" class="headerlink" title="防篡改对象"></a>防篡改对象</h1><h2 id="不可扩展对象-Object-preventExtensions"><a href="#不可扩展对象-Object-preventExtensions" class="headerlink" title="不可扩展对象 Object.preventExtensions"></a>不可扩展对象 Object.preventExtensions</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面代码在谷歌浏览器中执行</span></span><br><span class="line">&gt; <span class="keyword">var</span> person = &#123;<span class="attr">name</span>: <span class="string">'wdd'</span>&#125;;</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">&gt; <span class="built_in">Object</span>.preventExtensions(person);</span><br><span class="line"><span class="built_in">Object</span> &#123;<span class="attr">name</span>: <span class="string">"wdd"</span>&#125;</span><br><span class="line">&gt; person.age = <span class="number">10</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line">&gt; person</span><br><span class="line"><span class="built_in">Object</span> &#123;<span class="attr">name</span>: <span class="string">"wdd"</span>&#125;</span><br><span class="line">&gt; <span class="built_in">Object</span>.isExtensible(person)</span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="密封对象Object-seal"><a href="#密封对象Object-seal" class="headerlink" title="密封对象Object.seal"></a>密封对象Object.seal</h2><p>密封对象不可扩展，并且不能删除对象的属性或者方法。但是属性值可以修改。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> var one = &#123;name: <span class="string">'hihi'</span>&#125;</span></span><br><span class="line">undefined</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Object.seal(one)</span></span><br><span class="line">Object &#123;name: "hihi"&#125;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> one.age = 12</span></span><br><span class="line">12</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> one</span></span><br><span class="line">Object &#123;name: "hihi"&#125;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> delete one.name</span></span><br><span class="line">false</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> one</span></span><br><span class="line">Object &#123;name: "hihi"&#125;</span><br></pre></td></tr></table></figure></p><h2 id="冻结对象-Object-freeze"><a href="#冻结对象-Object-freeze" class="headerlink" title="冻结对象 Object.freeze"></a>冻结对象 Object.freeze</h2><p>最严格的防篡改就是冻结对象。对象不可扩展，而且密封，不能修改。只能访问。</p><h1 id="高级定时器"><a href="#高级定时器" class="headerlink" title="高级定时器"></a>高级定时器</h1><h2 id="函数节流"><a href="#函数节流" class="headerlink" title="函数节流"></a>函数节流</h2><p>函数节流的思想是：<code>某些代码不可以没有间断的连续重复执行</code><br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> processor = &#123;</span><br><span class="line">timeoutId: <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实际进行处理的方法</span></span><br><span class="line">performProcessing: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化调用方法</span></span><br><span class="line">process: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">clearTimeout(<span class="keyword">this</span>.timeoutId);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.timeoutId = setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">that.performProcessing();</span><br><span class="line">&#125;, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 尝试开始执行</span></span><br><span class="line">processor.process();</span><br></pre></td></tr></table></figure></p><h2 id="中央定时器"><a href="#中央定时器" class="headerlink" title="中央定时器"></a>中央定时器</h2><p>页面如果有十个区域要动态显示当前时间，一般来说，可以用10个定时来实现。其实一个中央定时器就可以搞定。</p><p>中央定时器动画 demo地址：<a href="http://wangduanduan.coding.me/my-all-demos/ninja/center-time-control.html" target="_blank" rel="noopener">http://wangduanduan.coding.me/my-all-demos/ninja/center-time-control.html</a></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> timers = &#123;</span><br><span class="line">timerId: <span class="number">0</span>,</span><br><span class="line">timers: [],</span><br><span class="line">add: <span class="function"><span class="keyword">function</span><span class="params">(fn)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.timers.push(fn);</span><br><span class="line">&#125;,</span><br><span class="line">start: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.timerId)&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">runNext</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(timers.timers.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; timers.timers.length ; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(timers.timers[i]() === <span class="literal">false</span>)&#123;</span><br><span class="line">timers.timers.splice(i, <span class="number">1</span>);</span><br><span class="line">i--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">timers.timerId = setTimeout(runNext, <span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)();</span><br><span class="line">&#125;,</span><br><span class="line">stop: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">clearTimeout(timers.timerId);</span><br><span class="line"><span class="keyword">this</span>.timerId = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>参考书籍：<br>《javascript高级程序设计》<br>《javascript忍者秘籍》</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安全类型检测&quot;&gt;&lt;a href=&quot;#安全类型检测&quot; class=&quot;headerlink&quot; title=&quot;安全类型检测&quot;&gt;&lt;/a&gt;安全类型检测&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;javascript内置类型检测并不可靠&lt;/li&gt;
&lt;li&gt;safari某些版本（&amp;lt;4）t
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>从一个小场景学会使用 apply方法</title>
    <link href="https://wdd.js.org/how-to-use-apply.html"/>
    <id>https://wdd.js.org/how-to-use-apply.html</id>
    <published>2018-02-07T02:12:36.000Z</published>
    <updated>2018-02-07T02:13:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><ul><li>需要自定义一个log方法，这个方法可以像原生的console.log一样</li><li>在开发环境我希望调用这个log会输出日志信息，生产环境我希望即使调用了这个方法，也不会输出日志信息。</li></ul><h1 id="实现这个log"><a href="#实现这个log" class="headerlink" title="实现这个log"></a>实现这个log</h1><ul><li>可能要使用apply或者call方法</li><li>log的参数个数和类型都是不固定的</li><li>call的参数个数是固定的，要排除它</li><li>apply的参数是需要一个<code>数组</code>，这个合适，可以使用<code>arguments</code>来当做数组传递</li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MyLog = &#123;</span><br><span class="line">    silent: <span class="literal">false</span>,</span><br><span class="line">    log: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">this</span>.silent)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="试用"><a href="#试用" class="headerlink" title="试用"></a>试用</h1><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; MyLog.log(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>, '<span class="number">4545</span>');</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="string">"4545"</span></span><br><span class="line">undefined</span><br><span class="line"></span><br><span class="line">&gt; MyLog.silent = true</span><br><span class="line">true</span><br><span class="line"></span><br><span class="line">&gt; MyLog.log(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>, '<span class="number">4545</span>');</span><br><span class="line">undefined</span><br></pre></td></tr></table></figure><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>不要随处使用console.log，因为这样当你不需要日志输出的时候，你就要到处填坑了</li><li>不要使用alert，这个很烦人</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;需要自定义一个log方法，这个方法可以像原生的console.log一样&lt;/li&gt;
&lt;li&gt;在开发环境我希望调用这个log会输出
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>突然觉得自己好像没学过JS</title>
    <link href="https://wdd.js.org/i-realy-dont-know-js.html"/>
    <id>https://wdd.js.org/i-realy-dont-know-js.html</id>
    <published>2018-02-07T02:09:42.000Z</published>
    <updated>2018-02-07T02:10:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="先看题：mean的值是什么？"><a href="#先看题：mean的值是什么？" class="headerlink" title="先看题：mean的值是什么？"></a>先看题：mean的值是什么？</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scores = [10,11,12];</span><br><span class="line"><span class="keyword">var</span> <span class="keyword">total</span> = 0;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> <span class="keyword">score</span> <span class="keyword">in</span> scores)&#123;</span><br><span class="line">  <span class="keyword">total</span> += <span class="keyword">score</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="keyword">mean</span> = <span class="keyword">total</span>/scores.length;</span><br><span class="line">console.<span class="built_in">log</span>(<span class="keyword">mean</span>);</span><br></pre></td></tr></table></figure><h2 id="是11？"><a href="#是11？" class="headerlink" title="是11？"></a>是11？</h2><p>恭喜你：答错了！</p><h2 id="是1？"><a href="#是1？" class="headerlink" title="是1？"></a>是1？</h2><p>恭喜你：答错了！</p><h2 id="正确答案：-4"><a href="#正确答案：-4" class="headerlink" title="正确答案： 4"></a>正确答案： 4</h2><p>解释： <code>for in 循环循环的值永远是key, key是一个字符串</code>。所以total的值是：’0012’。它是一个字符串，字符串’0012’/3,0012会被转换成12，然后除以3，结果是4。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这个示例是来自《编写高质量JavaScript的68个方法》的第49条：<code>数组迭代要优先使用for循环而不是for in循环</code>。<br>既然已经发布，就可能有好事者拿出去当面试题。这个题目很有可能坑一堆人。其中包括我。</p><p>这里涉及到许多js的基础知识.</p><ol><li><code>for in 循环是循环对象的索引属性，key是一个字符串。</code></li><li><code>数值类型和字符串相加，会自动转换为字符串</code></li><li><code>字符串除以数值类型，会先把字符串转为数值，最终结果为数值</code></li></ol><p>正确方法<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scores = [10,11,12];</span><br><span class="line"><span class="keyword">var</span> <span class="keyword">total</span> = 0;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=0, <span class="keyword">n</span>=scores.length; i &lt; <span class="keyword">n</span>; i++)&#123;</span><br><span class="line">  <span class="keyword">total</span> += scores[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="keyword">mean</span> = <span class="keyword">total</span>/scores.length;</span><br><span class="line">console.<span class="built_in">log</span>(<span class="keyword">mean</span>);</span><br></pre></td></tr></table></figure></p><p>这样写有几个好处。</p><ul><li>循环的终止条件简单且明确</li><li>即使在循环体内修改了数组，也能有效的终止循环。否则就可能变成死循环。</li><li>编译器很难保证重启计算scores.length是安全的。</li><li>提前确定了循环终止条件，避免多次计算数组长度。这个可能会被一些浏览器优化。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;先看题：mean的值是什么？&quot;&gt;&lt;a href=&quot;#先看题：mean的值是什么？&quot; class=&quot;headerlink&quot; title=&quot;先看题：mean的值是什么？&quot;&gt;&lt;/a&gt;先看题：mean的值是什么？&lt;/h2&gt;&lt;figure class=&quot;highlight 
      
    
    </summary>
    
    
      <category term="js" scheme="https://wdd.js.org/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>UI大全：前端UI框架集合（持续更新）</title>
    <link href="https://wdd.js.org/all-best-ui-frame.html"/>
    <id>https://wdd.js.org/all-best-ui-frame.html</id>
    <published>2018-02-07T01:47:34.000Z</published>
    <updated>2018-02-07T02:00:45.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h1><p><code>UI选择务必慎重，货比三家。</code></p><p>弱水三千只取一瓢：弱水三千只取一瓢，源起佛经中的一则故事，警醒人们<code>在一生中可能会遇到很多美好的东西，但只要用心好好把握住其中的一样就足够了</code></p><p>😊😊😊😊欢迎贡献😊😊😊😊</p><ul><li>2017-1209 ZanUI (Vue)</li><li>2017-1218 Onsen UI(Vue, React, Angular)</li><li>2017-1215 增加 Vuetify, Weex UI, Semantic UI React,element-react, element-angular,NG-ZORRO</li><li>2017-1214 增加 Mint UI</li><li>2017-1211 增加 Layui, UIkit</li><li>2017-1206 增加 cube-ui, Amaze ui React</li></ul><p>除了老牌构建于jQuery框架之上的UI外, 新锐UI派系：</p><ul><li>基于Vue: ELementUI, iViewui</li><li>基于React: AntDesign, Amaze UI React</li></ul><h1 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h1><h2 id="WeUI"><a href="#WeUI" class="headerlink" title="WeUI"></a>WeUI</h2><p><img src="http://p3alsaatj.bkt.clouddn.com/20180207094906_feQoNF_Screenshot.jpeg" alt=""></p><p>来自：腾讯</p><blockquote><p>WeUI 是一套同微信原生视觉体验一致的基础样式库，由微信官方设计团队为微信内网页和微信小程序量身设计，令用户的使用感知更加统一。<br><a href="https://weui.io/" target="_blank" rel="noopener">详情</a></p></blockquote><h2 id="SUI-Mobile"><a href="#SUI-Mobile" class="headerlink" title="SUI Mobile"></a>SUI Mobile</h2><p><img src="http://p3alsaatj.bkt.clouddn.com/20180207094938_FjBqKD_Screenshot.jpeg" alt=""></p><p>来自：阿里</p><blockquote><p>SUI Mobile 是一套基于 Framework7 开发的UI库。它非常轻量、精美，只需要引入我们的CDN文件就可以使用，并且能兼容到 iOS 6.0+ 和 Android 4.0+，非常适合开发跨平台Web App。轻量的UI库<br>SUI Mobile 非常轻量，核心库压缩Gzip后的JS、CSS网络传输体积总共只有52K，却提供了20+个常用的组件。<a href="http://m.sui.taobao.org/" target="_blank" rel="noopener">详情</a></p></blockquote><h2 id="Amaze-妹子-UI"><a href="#Amaze-妹子-UI" class="headerlink" title="Amaze ~ 妹子 UI"></a>Amaze ~ 妹子 UI</h2><p><img src="http://p3alsaatj.bkt.clouddn.com/20180207094922_0rwozv_Screenshot.jpeg" alt=""></p><blockquote><p>中国首个开源 HTML5 跨屏前端框架 <a href="http://amazeui.org/" target="_blank" rel="noopener">详情</a></p></blockquote><ul><li>Amaze UI 以移动优先（Mobile first）为理念，从小屏逐步扩展到大屏，最终实现所有屏幕适配，适应移动互联潮流。</li><li>Amaze UI 含近 20 个 CSS 组件、20 余 JS 组件，更有多个包含不同主题的 Web 组件，可快速构建界面出色、体验优秀的跨屏页面，大幅提升开发效率。</li><li>相比国外框架，Amaze UI 关注中文排版，根据用户代理调整字体，实现更好的中文排版效果；兼顾国内主流浏览器及 App 内置浏览器兼容支持。</li><li>Amaze UI 面向 HTML5 开发，使用 CSS3 来做动画交互，平滑、高效，更适合移动设备，让 Web 应用更快速载入。</li></ul><h2 id="jQuery-mobile"><a href="#jQuery-mobile" class="headerlink" title="jQuery mobile"></a>jQuery mobile</h2><p><img src="http://p3alsaatj.bkt.clouddn.com/20180207095020_QB3Wp3_Screenshot.jpeg" alt=""></p><blockquote><p>jQuery移动是一个基于html5的用户界面系统,为响应web站点和应用程序都可以访问所有的智能手机,平板电脑和桌面设备而设计。<a href="https://jquerymobile.com/" target="_blank" rel="noopener">详情</a></p></blockquote><h2 id="Framework7"><a href="#Framework7" class="headerlink" title="Framework7"></a>Framework7</h2><p><img src="http://p3alsaatj.bkt.clouddn.com/20180207095038_xJKBFh_Screenshot.jpeg" alt=""></p><blockquote><p>Framework7 是一个开源免费的框架可以用来开发混合移动应用（原生和HTML混合）或者开发 iOS &amp; Android 风格的WEB APP。也可以用来作为原型开发工具，可以迅速创建一个应用的原型。<a href="http://framework7.taobao.org/" target="_blank" rel="noopener">详情</a></p></blockquote><ul><li><p>Framework7 最主要的功能是可以使用HTML、CSS和JS来开发iOS7应用。Framework7 是完全免费开源的。</p></li><li><p>Framework7 并不能兼容所有的设备。她只专注于为 iOS 和 Google Material 设计提供最好的体验。</p></li><li><p>如果你想开发 iOS 或者 Android 混合应用（Phonegap）或者你想开发 iOS 和 Google Material 风格的WEB APP，那么Framework7将会是你的首选。</p></li></ul><h2 id="cube-ui（Vue）"><a href="#cube-ui（Vue）" class="headerlink" title="cube-ui（Vue）"></a>cube-ui（Vue）</h2><p><code>cube-ui 是由滴滴开源的基于 Vue.js 实现的移动端组件库。</code> <a href="https://didi.github.io/cube-ui/#/zh-CN" target="_blank" rel="noopener">详情</a></p><p>● 质量可靠：由滴滴内部组件库精简提炼而来，历经考验，并且每个组件都有充分单元测试，为后续集成提供保障。<br>● 体验极致：以迅速响应、动画流畅、接近原生为目标，在交互体验方面追求极致。<br>● 标准规范：遵循统一的设计交互标准，高度还原设计效果；接口标准化，统一规范使用方式，开发更加简单高效。<br>● 扩展性强：支持按需引入和后编译，轻量灵活；扩展性强，可以方便地基于现有组件实现二次开发。</p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180207095110_mdSrCw_Screenshot.jpeg" alt=""></p><h2 id="Mint-UI-Vue"><a href="#Mint-UI-Vue" class="headerlink" title="Mint UI (Vue)"></a>Mint UI (Vue)</h2><p>基于 Vue.js 的移动端组件库 <a href="https://mint-ui.github.io/#!/zh-cn" target="_blank" rel="noopener">详情</a></p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180207095129_EYQPfv_Screenshot.jpeg" alt=""><br><img src="http://p3alsaatj.bkt.clouddn.com/20180207095149_shP7k0_Screenshot.jpeg" alt=""></p><h2 id="Weex-UI-Vue"><a href="#Weex-UI-Vue" class="headerlink" title="Weex UI (Vue)"></a>Weex UI (Vue)</h2><p><code>一个基于 Weex 的富交互、轻量级、高性能的 UI 组件库</code> <a href="https://alibaba.github.io/weex-ui/#/cn/" target="_blank" rel="noopener">详情</a></p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180207095205_GZN6wf_Screenshot.jpeg" alt=""></p><h2 id="Onsen-UI-Vue-React-Angular"><a href="#Onsen-UI-Vue-React-Angular" class="headerlink" title="Onsen UI(Vue, React, Angular)"></a>Onsen UI(Vue, React, Angular)</h2><p><code>最偏亮高效的开发HTML5应用和WEB apps, 支持angular, vue ,react</code>, <a href="https://onsen.io/" target="_blank" rel="noopener">详情</a></p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180207095223_FfYrPd_Screenshot.jpeg" alt=""></p><h1 id="PC端"><a href="#PC端" class="headerlink" title="PC端"></a>PC端</h1><h2 id="EasyUI"><a href="#EasyUI" class="headerlink" title="EasyUI"></a>EasyUI</h2><p><img src="http://p3alsaatj.bkt.clouddn.com/20180207095243_zIIavI_Screenshot.jpeg" alt=""></p><blockquote><p>easyui是一种基于jQuery的用户界面插件集合。easyui为创建现代化，互动，JavaScript应用程序，提供必要的功能。<a href="http://www.jeasyui.net/" target="_blank" rel="noopener">详情</a></p></blockquote><ul><li>使用easyui你不需要写很多代码，你只需要通过编写一些简单HTML标记，就可以定义用户界面。</li><li>easyui是个完美支持HTML5网页的完整框架。</li><li>easyui节省您网页开发的时间和规模。</li><li>easyui很简单但功能强大的。 </li></ul><h2 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h2><p><img src="http://p3alsaatj.bkt.clouddn.com/20180207095304_snl6Va_Screenshot.jpeg" alt=""></p><blockquote><p>简洁、直观、强悍的前端开发框架，让web开发更迅速、简单。<a href="http://www.bootcss.com/" target="_blank" rel="noopener">详情</a></p></blockquote><h2 id="jQuery-UI"><a href="#jQuery-UI" class="headerlink" title="jQuery UI"></a>jQuery UI</h2><p><img src="http://p3alsaatj.bkt.clouddn.com/20180207095319_n66Uay_Screenshot.jpeg" alt=""></p><blockquote><p>jQuery UI 是建立在 jQuery JavaScript 库上的一组用户界面交互、特效、小部件及主题。无论您是创建高度交互的 Web 应用程序还是仅仅向窗体控件添加一个日期选择器，jQuery UI 都是一个完美的选择。<br>jQuery UI 包含了许多维持状态的小部件（Widget），因此，它与典型的 jQuery 插件使用模式略有不同。所有的 jQuery UI 小部件（Widget）使用相同的模式，所以，只要您学会使用其中一个，您就知道如何使用其他的小部件（Widget）。<a href="https://jqueryui.com/" target="_blank" rel="noopener">详情</a></p></blockquote><h2 id="SUI"><a href="#SUI" class="headerlink" title="SUI"></a>SUI</h2><p><img src="http://p3alsaatj.bkt.clouddn.com/20180207095334_yEhDb0_Screenshot.jpeg" alt=""></p><blockquote><p>SUI 是一套基于bootstrap开发的前端组件库，同时她也是一套设计规范。<br>通过SUI，可以非常方便的设计和实现精美的页面。<a href="http://sui.taobao.org/sui/docs/index.html" target="_blank" rel="noopener">详情</a></p></blockquote><h2 id="ZUI"><a href="#ZUI" class="headerlink" title="ZUI"></a>ZUI</h2><p><img src="http://p3alsaatj.bkt.clouddn.com/20180207095351_BLEw5e_Screenshot.jpeg" alt=""></p><blockquote><p>一个基于 Bootstrap 深度定制开源前端实践方案，帮助你快速构建现代跨屏应用。<a href="http://zui.sexy/#/" target="_blank" rel="noopener">详情</a></p></blockquote><h2 id="Plane-UI"><a href="#Plane-UI" class="headerlink" title="Plane UI"></a>Plane UI</h2><p><img src="http://p3alsaatj.bkt.clouddn.com/20180207095604_L0tf0x_Screenshot.jpeg" alt=""></p><blockquote><p>HTML5 跨终端响应式前端界面框架<a href="https://pandao.github.io/planeui/" target="_blank" rel="noopener">详情</a></p></blockquote><h2 id="Semantic-UI"><a href="#Semantic-UI" class="headerlink" title="Semantic UI"></a>Semantic UI</h2><p><img src="http://p3alsaatj.bkt.clouddn.com/20180207095620_R0B6If_Screenshot.jpeg" alt=""></p><blockquote><p>Semantic UI 是一款语义化设计的前端开源框架，其功能强大，使用简单，为设计师和开发师提供可复用的完美设计方案。<a href="https://semantic-ui.com/" target="_blank" rel="noopener">详情</a></p></blockquote><h2 id="materialize"><a href="#materialize" class="headerlink" title="materialize"></a>materialize</h2><p><img src="http://p3alsaatj.bkt.clouddn.com/20180207095630_COJfPb_Screenshot.jpeg" alt=""></p><blockquote><p>基于谷歌material design设计的框架<a href="http://materializecss.com/" target="_blank" rel="noopener">详情</a></p></blockquote><h2 id="ElementUI-（Vue）"><a href="#ElementUI-（Vue）" class="headerlink" title="ElementUI （Vue）"></a>ElementUI （Vue）</h2><p>Element由<code>饿了吗</code>团队开源，一套为开发者、设计师和产品经理准备的基于 Vue 2.0 的组件库，提供了配套设计资源，帮助你的网站快速成型。<a href="http://element.eleme.io/#/zh-CN" target="_blank" rel="noopener">详情</a></p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180207095643_iqtE1s_Screenshot.jpeg" alt=""></p><h2 id="iviewui-（Vue）"><a href="#iviewui-（Vue）" class="headerlink" title="iviewui （Vue）"></a>iviewui （Vue）</h2><p>一套基于 Vue.js 的高质量 UI 组件库 <a href="https://www.iviewui.com/" target="_blank" rel="noopener">详情</a></p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180207095655_71FOMw_Screenshot.jpeg" alt=""></p><h2 id="ANT-DESIGN-React"><a href="#ANT-DESIGN-React" class="headerlink" title="ANT DESIGN (React)"></a>ANT DESIGN (React)</h2><p>一套企业级的 UI 设计语言和 React 实现。<br><a href="https://ant.design/index-cn" target="_blank" rel="noopener">https://ant.design/index-cn</a></p><ul><li>提炼自企业级中后台产品的交互语言和视觉风格。</li><li>开箱即用的高质量 React 组件。</li><li>使用 TypeScript 构建，提供完整的类型定义文件。</li><li>基于 npm + webpack + dva 的企业级开发框架。</li></ul><p><img src="http://p3alsaatj.bkt.clouddn.com/20180207095708_TkWO4d_Screenshot.jpeg" alt=""></p><h2 id="MDUI"><a href="#MDUI" class="headerlink" title="MDUI"></a>MDUI</h2><p>MDUI 是一套基于 Material Design 的前端框架。轻量级、多主题切换、响应式、无依赖。<br><a href="http://www.mdui.org/" target="_blank" rel="noopener">http://www.mdui.org/</a></p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180207095724_pTKd1y_Screenshot.jpeg" alt=""></p><h2 id="Amaze-UI-React-React"><a href="#Amaze-UI-React-React" class="headerlink" title="Amaze UI React (React)"></a>Amaze UI React (React)</h2><p><code>基于 React.js 开发的 Web 组件库</code> <a href="http://amazeui.org/react/" target="_blank" rel="noopener">详情</a></p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180207095734_B7WvWB_Screenshot.jpeg" alt=""></p><h2 id="Layui"><a href="#Layui" class="headerlink" title="Layui"></a>Layui</h2><blockquote><p>layui（谐音：类UI) 是一款采用自身模块规范编写的前端 UI 框架，<code>遵循原生 HTML/CSS/JS 的书写与组织形式</code>，<code>门槛极低</code>，拿来即用。其外在极简，却又不失饱满的内在，<code>体积轻盈，组件丰盈</code>，从核心代码到 API 的每一处细节都经过精心雕琢，非常适合界面的快速开发。layui 首个版本发布于2016年金秋，她区别于那些基于 MVVM 底层的 UI 框架，却并非逆道而行，而是信奉返璞归真之道。准确地说，她更多是为服务端程序员量身定做，你无需涉足各种前端工具的复杂配置，只需面对浏览器本身，让一切你所需要的元素与交互，从这里信手拈来。 <a href="http://www.layui.com/doc/" target="_blank" rel="noopener">详情</a></p></blockquote><p><img src="http://p3alsaatj.bkt.clouddn.com/20180207095745_pOm9JI_Screenshot.jpeg" alt=""></p><h2 id="UIkit"><a href="#UIkit" class="headerlink" title="UIkit"></a>UIkit</h2><blockquote><p>轻量级模块化前端框架 <a href="https://getuikit.com/" target="_blank" rel="noopener">详情</a></p></blockquote><p><img src="http://p3alsaatj.bkt.clouddn.com/20180207095757_muC5KG_Screenshot.jpeg" alt=""></p><h2 id="Vuetify-Vue"><a href="#Vuetify-Vue" class="headerlink" title="Vuetify (Vue)"></a>Vuetify (Vue)</h2><p>基于vue2的material风格组件化框架 <a href="https://vuetifyjs.com/" target="_blank" rel="noopener">详情</a></p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180207095808_9FR3VY_Screenshot.jpeg" alt=""></p><h2 id="Semantic-UI-React-React"><a href="#Semantic-UI-React-React" class="headerlink" title="Semantic UI React(React)"></a>Semantic UI React(React)</h2><p>The official Semantic-UI-React integration. <a href="https://react.semantic-ui.com/introduction" target="_blank" rel="noopener">detail</a></p><ul><li>jQuery Free</li><li>Declarative API</li><li>Augmentation</li><li>Shorthand Props</li><li>Sub Components</li><li>Auto Controlled State</li></ul><p><img src="http://p3alsaatj.bkt.clouddn.com/20180207095822_3kxbmi_Screenshot.jpeg" alt=""></p><h2 id="element-react-React"><a href="#element-react-React" class="headerlink" title="element-react (React)"></a>element-react (React)</h2><p>element ui的react版本 <a href="https://eleme.github.io/element-react/#/zh-CN/quick-start" target="_blank" rel="noopener">详情</a></p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180207095833_MwiVC2_Screenshot.jpeg" alt=""></p><h2 id="element-angular-angular"><a href="#element-angular-angular" class="headerlink" title="element-angular (angular)"></a>element-angular (angular)</h2><p>element ui的react版本 <a href="https://element-angular.faas.ele.me/guide/install" target="_blank" rel="noopener">详情</a><br><img src="http://p3alsaatj.bkt.clouddn.com/20180207095843_HEcA0p_Screenshot.jpeg" alt=""></p><h2 id="NG-ZORRO-angular"><a href="#NG-ZORRO-angular" class="headerlink" title="NG-ZORRO (angular)"></a>NG-ZORRO (angular)</h2><p>这里是 Ant Design 的 Angular^5.0.0 实现，开发和服务于企业级后台产品。 <a href="https://ng.ant.design/#/docs/angular/introduce" target="_blank" rel="noopener">详情</a></p><p><img src="http://p3alsaatj.bkt.clouddn.com/20180207095855_58jPPd_Screenshot.jpeg" alt=""></p><h1 id="3-PC-amp-移动端"><a href="#3-PC-amp-移动端" class="headerlink" title="3 PC &amp; 移动端"></a>3 PC &amp; 移动端</h1><h2 id="3-1-ZanUI-Vue"><a href="#3-1-ZanUI-Vue" class="headerlink" title="3.1 ZanUI (Vue)"></a>3.1 ZanUI (Vue)</h2><blockquote><p>Vant ( \ˈvænt\ ) 是有赞前端团队基于有赞统一的规范实现的 Vue 组件库，提供了一整套 UI 基础组件和业务组件。 <a href="https://www.youzanyun.com/zanui" target="_blank" rel="noopener">详情</a></p></blockquote><ul><li>48+ 个经过有赞线上业务检验的组件</li><li>单测覆盖率超过 90%</li><li>完善详实的 中英文文档</li><li>专门的设计师团队维护视觉规范，统一而优雅</li><li>支持 babel-plugin-import</li><li>支持 TypeScript</li></ul><p><img src="http://p3alsaatj.bkt.clouddn.com/20180207100013_ZEC0Op_Screenshot.jpeg" alt=""><br><img src="http://p3alsaatj.bkt.clouddn.com/20180207100025_pmdTYa_Screenshot.jpeg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;更新&quot;&gt;&lt;a href=&quot;#更新&quot; class=&quot;headerlink&quot; title=&quot;更新&quot;&gt;&lt;/a&gt;更新&lt;/h1&gt;&lt;p&gt;&lt;code&gt;UI选择务必慎重，货比三家。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;弱水三千只取一瓢：弱水三千只取一瓢，源起佛经中的一则故事，警醒人们&lt;c
      
    
    </summary>
    
    
      <category term="ui" scheme="https://wdd.js.org/tags/ui/"/>
    
      <category term="frame" scheme="https://wdd.js.org/tags/frame/"/>
    
  </entry>
  
</feed>
